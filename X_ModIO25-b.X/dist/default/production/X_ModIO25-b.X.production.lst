

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Sep 27 09:43:51 2019

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F25K50 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataBANK0
   133  0026DC                     __pidataBANK0:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _MIOTpoDeltaMax
   137  0026DC  00B4               	dw	180
   138                           
   139                           ;initializer for _MIOTpoDeltaMin
   140  0026DE  003C               	dw	60
   141                           
   142                           	psect	nvBANK0
   143  0000FF                     __pnvBANK0:
   144                           	opt stack 0
   145  0000FF                     _MstPpEjecutaF:
   146                           	opt stack 0
   147  0000FF                     	ds	1
   148                           
   149                           	psect	nvBANK1
   150  000191                     __pnvBANK1:
   151                           	opt stack 0
   152  000191                     _LedContMs:
   153                           	opt stack 0
   154  000191                     	ds	2
   155  0000                     _ANSELA	set	3931
   156  0000                     _ANSELB	set	3932
   157  0000                     _ANSELC	set	3933
   158  0000                     _ADCON0	set	4034
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON2	set	4032
   161  0000                     _ADRESH	set	4036
   162  0000                     _ADRESL	set	4035
   163  0000                     _BAUDCON	set	4024
   164  0000                     _INTCON	set	4082
   165  0000                     _OSCCON	set	4051
   166  0000                     _PORTB	set	3969
   167  0000                     _PORTBbits	set	3969
   168  0000                     _PORTCbits	set	3970
   169  0000                     _PR2	set	4027
   170  0000                     _RCREG1	set	4014
   171  0000                     _RCSTA	set	4011
   172  0000                     _SPBRG	set	4015
   173  0000                     _SPBRGH	set	4016
   174  0000                     _SSP1CON1	set	4038
   175  0000                     _T2CON	set	4026
   176  0000                     _TRISA	set	3986
   177  0000                     _TRISB	set	3987
   178  0000                     _TRISBbits	set	3987
   179  0000                     _TRISCbits	set	3988
   180  0000                     _TXREG1	set	4013
   181  0000                     _TXSTA	set	4012
   182  0000                     _GIE	set	32663
   183  0000                     _GO	set	32273
   184  0000                     _RCIF	set	31989
   185  0000                     _TMR2IE	set	31977
   186  0000                     _TMR2IF	set	31985
   187  0000                     _TXIF	set	31988
   188                           
   189                           ; #config settings
   190  0000                     
   191                           	psect	cinit
   192  001FC0                     __pcinit:
   193                           	opt stack 0
   194  001FC0                     start_initialization:
   195                           	opt stack 0
   196  001FC0                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Initialize objects allocated to BANK0 (4 bytes)
   200                           ; load TBLPTR registers with __pidataBANK0
   201  001FC0  0EDC               	movlw	low __pidataBANK0
   202  001FC2  6EF6               	movwf	tblptrl,c
   203  001FC4  0E26               	movlw	high __pidataBANK0
   204  001FC6  6EF7               	movwf	tblptrh,c
   205  001FC8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   206  001FCA  6EF8               	movwf	tblptru,c
   207  001FCC  EE00  F0FB         	lfsr	0,__pdataBANK0
   208  001FD0  EE10 F004          	lfsr	1,4
   209  001FD4                     copy_data0:
   210  001FD4  0009               	tblrd		*+
   211  001FD6  CFF5 FFEE          	movff	tablat,postinc0
   212  001FDA  50E5               	movf	postdec1,w,c
   213  001FDC  50E1               	movf	fsr1l,w,c
   214  001FDE  E1FA               	bnz	copy_data0
   215                           
   216                           ; Clear objects allocated to BANK1 (121 bytes)
   217  001FE0  EE01  F000         	lfsr	0,__pbssBANK1
   218  001FE4  0E79               	movlw	121
   219  001FE6                     clear_0:
   220  001FE6  6AEE               	clrf	postinc0,c
   221  001FE8  06E8               	decf	wreg,f,c
   222  001FEA  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to BANK0 (149 bytes)
   225  001FEC  EE00  F060         	lfsr	0,__pbssBANK0
   226  001FF0  0E95               	movlw	149
   227  001FF2                     clear_1:
   228  001FF2  6AEE               	clrf	postinc0,c
   229  001FF4  06E8               	decf	wreg,f,c
   230  001FF6  E1FD               	bnz	clear_1
   231                           
   232                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   233  001FF8  6A46               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   234                           
   235                           ; Clear objects allocated to COMRAM (23 bytes)
   236  001FFA  EE00  F02F         	lfsr	0,__pbssCOMRAM
   237  001FFE  0E17               	movlw	23
   238  002000                     clear_2:
   239  002000  6AEE               	clrf	postinc0,c
   240  002002  06E8               	decf	wreg,f,c
   241  002004  E1FD               	bnz	clear_2
   242  002006                     end_of_initialization:
   243                           	opt stack 0
   244  002006                     __end_of__initialization:
   245                           	opt stack 0
   246  002006  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247  002008  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248  00200A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   249  00200C  6EF8               	movwf	tblptru,c
   250  00200E  0100               	movlb	0
   251  002010  EF63  F013         	goto	_main	;jump to C main() function
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	bitbssCOMRAM
   262  000230                     __pbitbssCOMRAM:
   263                           	opt stack 0
   264  000230                     _MrInicializado:
   265                           	opt stack 0
   266  000230                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssCOMRAM
   277  00002F                     __pbssCOMRAM:
   278                           	opt stack 0
   279  00002F                     _MstPpInicializadoF:
   280                           	opt stack 0
   281  00002F                     	ds	1
   282  000030                     _RsRxCS:
   283                           	opt stack 0
   284  000030                     	ds	1
   285  000031                     _RsRxCar:
   286                           	opt stack 0
   287  000031                     	ds	1
   288  000032                     _RsTxCar:
   289                           	opt stack 0
   290  000032                     	ds	1
   291  000033                     _MIOAdcAct:
   292                           	opt stack 0
   293  000033                     	ds	10
   294  00003D                     _MrFecha12:
   295                           	opt stack 0
   296  00003D                     	ds	4
   297  000041                     _MrDirV:
   298                           	opt stack 0
   299  000041                     	ds	2
   300  000043                     _MrUltV:
   301                           	opt stack 0
   302  000043                     	ds	2
   303  000045                     _Car1:
   304                           	opt stack 0
   305  000045                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	bssBANK0
   316  000060                     __pbssBANK0:
   317                           	opt stack 0
   318  000060                     _MIOAdcAnt:
   319                           	opt stack 0
   320  000060                     	ds	10
   321  00006A                     _MIOAdcDelta:
   322                           	opt stack 0
   323  00006A                     	ds	10
   324  000074                     _MIOAdcMin:
   325                           	opt stack 0
   326  000074                     	ds	10
   327  00007E                     _MrRegPos:
   328                           	opt stack 0
   329  00007E                     	ds	4
   330  000082                     _Adc2_5:
   331                           	opt stack 0
   332  000082                     	ds	2
   333  000084                     _Adc5v:
   334                           	opt stack 0
   335  000084                     	ds	2
   336  000086                     _Adc5v1:
   337                           	opt stack 0
   338  000086                     	ds	2
   339  000088                     _Dir1:
   340                           	opt stack 0
   341  000088                     	ds	2
   342  00008A                     _Dummy:
   343                           	opt stack 0
   344  00008A                     	ds	2
   345  00008C                     _EntradaAN:
   346                           	opt stack 0
   347  00008C                     	ds	2
   348  00008E                     _I2CAck:
   349                           	opt stack 0
   350  00008E                     	ds	2
   351  000090                     _LecturaAN:
   352                           	opt stack 0
   353  000090                     	ds	2
   354  000092                     _MIOSegCont:
   355                           	opt stack 0
   356  000092                     	ds	2
   357  000094                     _MioCicloHabilitado:
   358                           	opt stack 0
   359  000094                     	ds	2
   360  000096                     _MonDir:
   361                           	opt stack 0
   362  000096                     	ds	2
   363  000098                     _MonRsCMD:
   364                           	opt stack 0
   365  000098                     	ds	2
   366  00009A                     _MrGpo:
   367                           	opt stack 0
   368  00009A                     	ds	2
   369  00009C                     _MrNRegEnGpo:
   370                           	opt stack 0
   371  00009C                     	ds	2
   372  00009E                     _MrRegsXGpo:
   373                           	opt stack 0
   374  00009E                     	ds	2
   375  0000A0                     _MseUltDirLeido:
   376                           	opt stack 0
   377  0000A0                     	ds	2
   378  0000A2                     _NBytes1:
   379                           	opt stack 0
   380  0000A2                     	ds	2
   381  0000A4                     _PpalRsCMD:
   382                           	opt stack 0
   383  0000A4                     	ds	2
   384  0000A6                     _Ptr1:
   385                           	opt stack 0
   386  0000A6                     	ds	2
   387  0000A8                     _RsRxBufferLen:
   388                           	opt stack 0
   389  0000A8                     	ds	2
   390  0000AA                     _RsRxCarDobleF:
   391                           	opt stack 0
   392  0000AA                     	ds	2
   393  0000AC                     _RsRxIndex:
   394                           	opt stack 0
   395  0000AC                     	ds	2
   396  0000AE                     _RsRxRecibioMsgF:
   397                           	opt stack 0
   398  0000AE                     	ds	2
   399  0000B0                     _RsTxBufferLen:
   400                           	opt stack 0
   401  0000B0                     	ds	2
   402  0000B2                     _RsTxCarDobleF:
   403                           	opt stack 0
   404  0000B2                     	ds	2
   405  0000B4                     _RsTxIndex:
   406                           	opt stack 0
   407  0000B4                     	ds	2
   408  0000B6                     _RsTxTransF:
   409                           	opt stack 0
   410  0000B6                     	ds	2
   411  0000B8                     _RsTxTransmitiendoF:
   412                           	opt stack 0
   413  0000B8                     	ds	2
   414  0000BA                     _TempSeg:
   415                           	opt stack 0
   416  0000BA                     	ds	2
   417  0000BC                     _Tpo50msF:
   418                           	opt stack 0
   419  0000BC                     	ds	2
   420  0000BE                     _TpoDiaF:
   421                           	opt stack 0
   422  0000BE                     	ds	2
   423  0000C0                     _TpoHoraF:
   424                           	opt stack 0
   425  0000C0                     	ds	2
   426  0000C2                     _TpoMinF:
   427                           	opt stack 0
   428  0000C2                     	ds	2
   429  0000C4                     _TpoMsCont:
   430                           	opt stack 0
   431  0000C4                     	ds	2
   432  0000C6                     _TpoRtcDiaAnt:
   433                           	opt stack 0
   434  0000C6                     	ds	2
   435  0000C8                     _TpoRtcHoraAnt:
   436                           	opt stack 0
   437  0000C8                     	ds	2
   438  0000CA                     _TpoRtcMinAnt:
   439                           	opt stack 0
   440  0000CA                     	ds	2
   441  0000CC                     _TpoRtcSegAnt:
   442                           	opt stack 0
   443  0000CC                     	ds	2
   444  0000CE                     _TpoSegF:
   445                           	opt stack 0
   446  0000CE                     	ds	2
   447  0000D0                     _RsTxCS:
   448                           	opt stack 0
   449  0000D0                     	ds	1
   450  0000D1                     _MrReg:
   451                           	opt stack 0
   452  0000D1                     	ds	13
   453  0000DE                     _MIOAdcLeido:
   454                           	opt stack 0
   455  0000DE                     	ds	10
   456  0000E8                     _RtcFechaHora:
   457                           	opt stack 0
   458  0000E8                     	ds	7
   459  0000EF                     _MrFecha12Ult:
   460                           	opt stack 0
   461  0000EF                     	ds	4
   462  0000F3                     _MrHora12:
   463                           	opt stack 0
   464  0000F3                     	ds	2
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           
   474                           	psect	dataBANK0
   475  0000FB                     __pdataBANK0:
   476                           	opt stack 0
   477  0000FB                     _MIOTpoDeltaMax:
   478                           	opt stack 0
   479  0000FB                     	ds	2
   480  0000FD                     _MIOTpoDeltaMin:
   481                           	opt stack 0
   482  0000FD                     	ds	2
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	bssBANK1
   493  000100                     __pbssBANK1:
   494                           	opt stack 0
   495  000100                     _Buffer1:
   496                           	opt stack 0
   497  000100                     	ds	20
   498  000114                     _MIOAdcDivisor:
   499                           	opt stack 0
   500  000114                     	ds	10
   501  00011E                     _EEByte:
   502                           	opt stack 0
   503  00011E                     	ds	7
   504  000125                     _Hora1:
   505                           	opt stack 0
   506  000125                     	ds	7
   507  00012C                     _TpoSegEnDia:
   508                           	opt stack 0
   509  00012C                     	ds	4
   510  000130                     _RsRxBuffer:
   511                           	opt stack 0
   512  000130                     	ds	30
   513  00014E                     _RsTxBuffer:
   514                           	opt stack 0
   515  00014E                     	ds	30
   516  00016C                     _MrRegAux:
   517                           	opt stack 0
   518  00016C                     	ds	13
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	cstackBANK1
   529  000179                     __pcstackBANK1:
   530                           	opt stack 0
   531  000179                     MseEsc@Index:
   532                           	opt stack 0
   533  000179                     MseLee@Index:
   534                           	opt stack 0
   535  000179                     MIOAdcAjuste2_5@k1:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x0
   539  000179                     	ds	4
   540  00017D                     __MrLee@MrNReg:
   541                           	opt stack 0
   542  00017D                     __MrEsc@MrNReg:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x4
   546  00017D                     	ds	2
   547  00017F                     __MrLee@MrReg1:
   548                           	opt stack 0
   549  00017F                     __MrEsc@MrReg1:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x6
   553  00017F                     	ds	2
   554  000181                     MrAgregaReg@MrTemp:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x8
   558  000181                     	ds	2
   559  000183                     ??_Ppal_RsComando:
   560  000183                     ??_MioCiclo:
   561                           
   562                           ; 1 bytes @ 0xA
   563  000183                     	ds	2
   564  000185                     Ppal_RsComando@ind:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0xC
   568  000185                     	ds	2
   569  000187                     ??_MstRsComando:
   570                           
   571                           ; 1 bytes @ 0xE
   572  000187                     	ds	3
   573  00018A                     MstRsComando@Ind:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x11
   577  00018A                     	ds	2
   578  00018C                     
   579                           ; 2 bytes @ 0x13
   580  00018C                     	ds	2
   581  00018E                     
   582                           ; 3 bytes @ 0x15
   583  00018E                     	ds	3
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	cstackBANK0
   594  0000F5                     __pcstackBANK0:
   595                           	opt stack 0
   596  0000F5                     ??_MseEsc:
   597  0000F5                     ??_MseLee:
   598  0000F5                     ___aldiv@counter:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x0
   602  0000F5                     	ds	1
   603  0000F6                     ___aldiv@sign:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x1
   607  0000F6                     	ds	1
   608  0000F7                     ___aldiv@quotient:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x2
   612  0000F7                     	ds	4
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	cstackCOMRAM
   623  000001                     __pcstackCOMRAM:
   624                           	opt stack 0
   625  000001                     ?_ADC_Lee:
   626                           	opt stack 0
   627  000001                     PsTxEnviaCar@car:
   628                           	opt stack 0
   629  000001                     IntDelay_ms@delay:
   630                           	opt stack 0
   631  000001                     ADC_Lee@AdcCanal:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x0
   635  000001                     	ds	1
   636  000002                     ??_PsTxInterrupt:
   637                           
   638                           ; 1 bytes @ 0x1
   639  000002                     	ds	1
   640  000003                     ??_IntDelay_ms:
   641  000003                     ??_ADC_Lee:
   642                           
   643                           ; 1 bytes @ 0x2
   644  000003                     	ds	1
   645  000004                     IntDelay_ms@I:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x3
   649  000004                     	ds	1
   650  000005                     ADC_Lee@ind:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x4
   654  000005                     	ds	1
   655  000006                     IntLedParpadea@Nveces:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x5
   659  000006                     	ds	1
   660  000007                     
   661                           ; 1 bytes @ 0x6
   662  000007                     	ds	1
   663  000008                     ??_IntLedParpadea:
   664                           
   665                           ; 1 bytes @ 0x7
   666  000008                     	ds	1
   667  000009                     IntLedParpadea@I:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x8
   671  000009                     	ds	2
   672  00000B                     ??_Interr:
   673                           
   674                           ; 1 bytes @ 0xA
   675  00000B                     	ds	14
   676  000019                     ??_MrSeparaFecha:
   677  000019                     ??_Bcd2Hex:
   678  000019                     ??_MioPreparaReg:
   679  000019                     ?__MrSgte:
   680                           	opt stack 0
   681  000019                     ?_abs:
   682                           	opt stack 0
   683  000019                     ?_I2CLeeByte:
   684                           	opt stack 0
   685  000019                     ?___awdiv:
   686                           	opt stack 0
   687  000019                     ?___awmod:
   688                           	opt stack 0
   689  000019                     ?___lwdiv:
   690                           	opt stack 0
   691  000019                     ?___lwmod:
   692                           	opt stack 0
   693  000019                     ?___lmul:
   694                           	opt stack 0
   695  000019                     Delay_ms@delay:
   696                           	opt stack 0
   697  000019                     RsCheckSum@RsLen:
   698                           	opt stack 0
   699  000019                     MrInicializa@Ind:
   700                           	opt stack 0
   701  000019                     __MrPreparaPor@Ind:
   702                           	opt stack 0
   703  000019                     __MrSgte@MrDirX:
   704                           	opt stack 0
   705  000019                     abs@a:
   706                           	opt stack 0
   707  000019                     ___awdiv@dividend:
   708                           	opt stack 0
   709  000019                     ___awmod@dividend:
   710                           	opt stack 0
   711  000019                     ___lwdiv@dividend:
   712                           	opt stack 0
   713  000019                     ___lwmod@dividend:
   714                           	opt stack 0
   715  000019                     memcpy@d1:
   716                           	opt stack 0
   717  000019                     PsInit@Baudrate:
   718                           	opt stack 0
   719  000019                     ___lmul@multiplier:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x18
   723  000019                     	ds	1
   724  00001A                     Bcd2Hex@Hex1:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x19
   728  00001A                     	ds	1
   729  00001B                     ??_Delay_ms:
   730  00001B                     ??_abs:
   731  00001B                     Bcd2Hex@Bcd1:
   732                           	opt stack 0
   733  00001B                     RsCheckSum@RsBuffer:
   734                           	opt stack 0
   735  00001B                     I2CLeeByte@Index:
   736                           	opt stack 0
   737  00001B                     ___awdiv@divisor:
   738                           	opt stack 0
   739  00001B                     ___awmod@divisor:
   740                           	opt stack 0
   741  00001B                     ___lwdiv@divisor:
   742                           	opt stack 0
   743  00001B                     ___lwmod@divisor:
   744                           	opt stack 0
   745  00001B                     memcpy@s1:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x1A
   749  00001B                     	ds	1
   750  00001C                     Delay_ms@I:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x1B
   754  00001C                     	ds	1
   755  00001D                     ??_RsCheckSum:
   756  00001D                     ___awdiv@counter:
   757                           	opt stack 0
   758  00001D                     ___awmod@counter:
   759                           	opt stack 0
   760  00001D                     ___lwdiv@counter:
   761                           	opt stack 0
   762  00001D                     ___lwmod@counter:
   763                           	opt stack 0
   764  00001D                     I2CLeeByte@I2CByte:
   765                           	opt stack 0
   766  00001D                     memcpy@n:
   767                           	opt stack 0
   768  00001D                     RsInit@Baudrate:
   769                           	opt stack 0
   770  00001D                     ___lmul@multiplicand:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x1C
   774  00001D                     	ds	1
   775  00001E                     RsCheckSum@CheckSum2:
   776                           	opt stack 0
   777  00001E                     ___awdiv@sign:
   778                           	opt stack 0
   779  00001E                     ___awmod@sign:
   780                           	opt stack 0
   781  00001E                     LedParpadea@Nveces:
   782                           	opt stack 0
   783  00001E                     ___lwdiv@quotient:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1D
   787  00001E                     	ds	1
   788  00001F                     RsCheckSum@CheckSum1:
   789                           	opt stack 0
   790  00001F                     ___awdiv@quotient:
   791                           	opt stack 0
   792  00001F                     memcpy@d:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x1E
   796  00001F                     	ds	1
   797  000020                     ??_LedParpadea:
   798  000020                     __CalculaRegPos@MrNReg1:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x1F
   802  000020                     	ds	1
   803  000021                     ??_Hex2Bcd:
   804  000021                     LedParpadea@I:
   805                           	opt stack 0
   806  000021                     RsCheckSum@Ind:
   807                           	opt stack 0
   808  000021                     memcpy@s:
   809                           	opt stack 0
   810  000021                     ___lmul@product:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x20
   814  000021                     	ds	1
   815  000022                     ??__CalculaRegPos:
   816                           
   817                           ; 1 bytes @ 0x21
   818  000022                     	ds	1
   819  000023                     Hex2Bcd@Bcd1:
   820                           	opt stack 0
   821  000023                     RsCheckSum@Car1:
   822                           	opt stack 0
   823  000023                     LeeRAM@Dir:
   824                           	opt stack 0
   825  000023                     EscRAM@Dir:
   826                           	opt stack 0
   827  000023                     __MrPreparaFecha@Ind:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x22
   831  000023                     	ds	1
   832  000024                     Hex2Bcd@Hex1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x23
   836  000024                     	ds	1
   837  000025                     ?___aldiv:
   838                           	opt stack 0
   839  000025                     RsTxEnviaMsg@RsTxLen:
   840                           	opt stack 0
   841  000025                     EscRAM@Car2P:
   842                           	opt stack 0
   843  000025                     I2CEscByte@I2CByte:
   844                           	opt stack 0
   845  000025                     MrSeparaFecha@MrAmPm:
   846                           	opt stack 0
   847  000025                     ___aldiv@dividend:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x24
   851  000025                     	ds	2
   852  000027                     ??_RsTxEnviaMsg:
   853  000027                     I2CEscByte@Index:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x26
   857  000027                     	ds	1
   858  000028                     RsTxEnviaMsg@Temp1:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x27
   862  000028                     	ds	1
   863  000029                     ??_RtcEsc:
   864  000029                     RtcLee@Char1:
   865                           	opt stack 0
   866  000029                     MseEsc@Dir:
   867                           	opt stack 0
   868  000029                     MseLee@Dir:
   869                           	opt stack 0
   870  000029                     ___aldiv@divisor:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x28
   874  000029                     	ds	1
   875  00002A                     ??_Tpo_Ciclo:
   876                           
   877                           ; 1 bytes @ 0x29
   878  00002A                     	ds	1
   879  00002B                     MseEsc@Datos:
   880                           	opt stack 0
   881  00002B                     MseLee@Datos:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x2A
   885  00002B                     	ds	2
   886  00002D                     MseEsc@NBytes:
   887                           	opt stack 0
   888  00002D                     MseLee@NBytes:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x2C
   892  00002D                     	ds	2
   893  00002F                     tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1l	equ	0xFE1
   901                           
   902                           ; 1 bytes @ 0x2E
   903 ;;
   904 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   905 ;;
   906 ;; *************** function _main *****************
   907 ;; Defined at:
   908 ;;		line 391 in file "ModIO24.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  argc            2   19[BANK1 ] int 
   911 ;;  argv            3   21[BANK1 ] PTR PTR unsigned char 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2   19[BANK1 ] int 
   916 ;; Registers used:
   917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   923 ;;      Params:         0       0       5       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0
   926 ;;      Totals:         0       0       5       0       0       0       0       0       0
   927 ;;Total ram usage:        5 bytes
   928 ;; Hardware stack levels required when called:   14
   929 ;; This function calls:
   930 ;;		_MstMain
   931 ;; This function is called by:
   932 ;;		Startup code after reset
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text0
   937  0026C6                     __ptext0:
   938                           	opt stack 0
   939  0026C6                     _main:
   940                           	opt stack 17
   941                           
   942                           ;ModIO24.c: 392: MstMain();
   943                           
   944                           ;incstack = 0
   945  0026C6  ECA6  F010         	call	_MstMain	;wreg free
   946  0026CA  EF4A  F000         	goto	start
   947  0026CE                     __end_of_main:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postdec1	equ	0xFE5
   956                           fsr1l	equ	0xFE1
   957                           
   958 ;; *************** function _MstMain *****************
   959 ;; Defined at:
   960 ;;		line 78 in file "Maestro21.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  2  294[None  ] int 
   967 ;; Registers used:
   968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       0       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       0       0       0       0       0       0       0       0
   977 ;;      Totals:         0       0       0       0       0       0       0       0       0
   978 ;;Total ram usage:        0 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:   13
   981 ;; This function calls:
   982 ;;		_MstCiclo
   983 ;;		_MstInit
   984 ;;		_Ppal_Ciclo
   985 ;;		_Ppal_Init
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text1
   992  00214C                     __ptext1:
   993                           	opt stack 0
   994  00214C                     _MstMain:
   995                           	opt stack 17
   996                           
   997                           ;Maestro21.c: 80: MstPpEjecutaF = 1;
   998                           
   999                           ;incstack = 0
  1000  00214C  0E01               	movlw	1
  1001  00214E  0100               	movlb	0	; () banked
  1002  002150  6FFF               	movwf	_MstPpEjecutaF& (0+255),b
  1003                           
  1004                           ;Maestro21.c: 81: MstPpInicializadoF = 0;
  1005  002152  0E00               	movlw	0
  1006  002154  6E2F               	movwf	_MstPpInicializadoF,c
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;Maestro21.c: 82: MstInit();
  1010  002156  EC83  F010         	call	_MstInit	;wreg free
  1011                           
  1012                           ;Maestro21.c: 83: if ( (MstPpEjecutaF == 1) && (MstPpInicializadoF == 0) ){
  1013  00215A  0100               	movlb	0	; () banked
  1014  00215C  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
  1015  00215E  A4D8               	btfss	status,2,c
  1016  002160  D007               	goto	l5222
  1017                           
  1018                           ; BSR set to: 0
  1019  002162  502F               	movf	_MstPpInicializadoF,w,c
  1020  002164  A4D8               	btfss	status,2,c
  1021  002166  D004               	goto	l5222
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;Maestro21.c: 84: Ppal_Init();
  1025  002168  EC2D  F00E         	call	_Ppal_Init	;wreg free
  1026                           
  1027                           ;Maestro21.c: 85: MstPpInicializadoF = 1;
  1028  00216C  0E01               	movlw	1
  1029  00216E  6E2F               	movwf	_MstPpInicializadoF,c
  1030  002170                     l5222:
  1031                           
  1032                           ;Maestro21.c: 88: MstCiclo();
  1033  002170  EC42  F013         	call	_MstCiclo	;wreg free
  1034                           
  1035                           ;Maestro21.c: 89: if (MstPpEjecutaF == 1) {
  1036  002174  0100               	movlb	0	; () banked
  1037  002176  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
  1038  002178  A4D8               	btfss	status,2,c
  1039  00217A  D7FA               	goto	l5222
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;Maestro21.c: 90: if (MstPpInicializadoF == 0) {
  1043  00217C  502F               	movf	_MstPpInicializadoF,w,c
  1044  00217E  A4D8               	btfss	status,2,c
  1045  002180  D004               	goto	l5232
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;Maestro21.c: 91: Ppal_Init();
  1049  002182  EC2D  F00E         	call	_Ppal_Init	;wreg free
  1050                           
  1051                           ;Maestro21.c: 92: MstPpInicializadoF = 1;
  1052  002186  0E01               	movlw	1
  1053  002188  6E2F               	movwf	_MstPpInicializadoF,c
  1054  00218A                     l5232:
  1055                           
  1056                           ;Maestro21.c: 93: }
  1057                           ;Maestro21.c: 94: Ppal_Ciclo ();
  1058  00218A  ECB2  F012         	call	_Ppal_Ciclo	;wreg free
  1059  00218E  D7F0               	goto	l5222
  1060  002190                     __end_of_MstMain:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           status	equ	0xFD8
  1071                           
  1072 ;; *************** function _Ppal_Init *****************
  1073 ;; Defined at:
  1074 ;;		line 103 in file "ModIO24.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1088 ;;      Params:         0       0       0       0       0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:   10
  1095 ;; This function calls:
  1096 ;;		_ADC_Init
  1097 ;;		_Delay_ms
  1098 ;;		_I2CInit
  1099 ;;		_MIOInit
  1100 ;;		_MrInicializa
  1101 ;;		_MrInit
  1102 ;;		_RsTxEnviaMsg
  1103 ;;		_RtcInit
  1104 ;;		_Tpo_init
  1105 ;; This function is called by:
  1106 ;;		_MstMain
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text2
  1111  001C5A                     __ptext2:
  1112                           	opt stack 0
  1113  001C5A                     _Ppal_Init:
  1114                           	opt stack 19
  1115                           
  1116                           ;ModIO24.c: 105: Delay_ms(100);
  1117                           
  1118                           ;incstack = 0
  1119  001C5A  0E00               	movlw	0
  1120  001C5C  6E1A               	movwf	Delay_ms@delay+1,c
  1121  001C5E  0E64               	movlw	100
  1122  001C60  6E19               	movwf	Delay_ms@delay,c
  1123  001C62  ECD4  F011         	call	_Delay_ms	;wreg free
  1124                           
  1125                           ;ModIO24.c: 107: RsTxBuffer [0] = 02;
  1126  001C66  0E02               	movlw	2
  1127  001C68  0101               	movlb	1	; () banked
  1128  001C6A  6F4E               	movwf	_RsTxBuffer& (0+255),b
  1129                           
  1130                           ; BSR set to: 1
  1131                           ;ModIO24.c: 108: RsTxBuffer [1] = 'h';
  1132  001C6C  0E68               	movlw	104
  1133  001C6E  0101               	movlb	1	; () banked
  1134  001C70  6F4F               	movwf	(_RsTxBuffer+1)& (0+255),b
  1135                           
  1136                           ; BSR set to: 1
  1137                           ;ModIO24.c: 109: RsTxBuffer [2] = 'p';
  1138  001C72  0E70               	movlw	112
  1139  001C74  0101               	movlb	1	; () banked
  1140  001C76  6F50               	movwf	(_RsTxBuffer+2)& (0+255),b
  1141                           
  1142                           ; BSR set to: 1
  1143                           ;ModIO24.c: 110: RsTxBuffer [3] = 'j';
  1144  001C78  0E6A               	movlw	106
  1145  001C7A  0101               	movlb	1	; () banked
  1146  001C7C  6F51               	movwf	(_RsTxBuffer+3)& (0+255),b
  1147                           
  1148                           ; BSR set to: 1
  1149                           ;ModIO24.c: 111: RsTxBuffer [4] = 'n';
  1150  001C7E  0E6E               	movlw	110
  1151  001C80  0101               	movlb	1	; () banked
  1152  001C82  6F52               	movwf	(_RsTxBuffer+4)& (0+255),b
  1153                           
  1154                           ; BSR set to: 1
  1155                           ;ModIO24.c: 112: RsTxEnviaMsg(3);
  1156  001C84  0E00               	movlw	0
  1157  001C86  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  1158  001C88  0E03               	movlw	3
  1159  001C8A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  1160  001C8C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  1161                           
  1162                           ;ModIO24.c: 113: Delay_ms(1500);
  1163  001C90  0E05               	movlw	5
  1164  001C92  6E1A               	movwf	Delay_ms@delay+1,c
  1165  001C94  0EDC               	movlw	220
  1166  001C96  6E19               	movwf	Delay_ms@delay,c
  1167  001C98  ECD4  F011         	call	_Delay_ms	;wreg free
  1168                           
  1169                           ;ModIO24.c: 115: Tpo_init();
  1170  001C9C  ECCC  F00E         	call	_Tpo_init	;wreg free
  1171                           
  1172                           ;ModIO24.c: 116: ADC_Init();
  1173  001CA0  EC22  F013         	call	_ADC_Init	;wreg free
  1174                           
  1175                           ;ModIO24.c: 117: I2CInit();
  1176  001CA4  EC17  F013         	call	_I2CInit	;wreg free
  1177                           
  1178                           ;ModIO24.c: 118: RtcInit();
  1179  001CA8  EC29  F011         	call	_RtcInit	;wreg free
  1180                           
  1181                           ;ModIO24.c: 119: MrInicializa();
  1182  001CAC  EC62  F00E         	call	_MrInicializa	;wreg free
  1183                           
  1184                           ;ModIO24.c: 120: MrInit();
  1185  001CB0  ECF9  F006         	call	_MrInit	;wreg free
  1186                           
  1187                           ;ModIO24.c: 121: MIOInit();
  1188  001CB4  ECC6  F009         	call	_MIOInit	;wreg free
  1189                           
  1190                           ;ModIO24.c: 126: TempSeg=0;
  1191  001CB8  0E00               	movlw	0
  1192  001CBA  0100               	movlb	0	; () banked
  1193  001CBC  6FBB               	movwf	(_TempSeg+1)& (0+255),b
  1194  001CBE  0E00               	movlw	0
  1195  001CC0  6FBA               	movwf	_TempSeg& (0+255),b
  1196                           
  1197                           ; BSR set to: 0
  1198  001CC2  0012               	return		;funcret
  1199  001CC4                     __end_of_Ppal_Init:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _Tpo_init *****************
  1212 ;; Defined at:
  1213 ;;		line 14 in file "RutinaTpo20.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1227 ;;      Params:         0       0       0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1230 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1231 ;;Total ram usage:        0 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    7
  1234 ;; This function calls:
  1235 ;;		_RtcLee
  1236 ;; This function is called by:
  1237 ;;		_Ppal_Init
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text3
  1242  001D98                     __ptext3:
  1243                           	opt stack 0
  1244  001D98                     _Tpo_init:
  1245                           	opt stack 21
  1246                           
  1247                           ;RutinaTpo20.c: 15: TpoMsCont = 0;
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;incstack = 0
  1251  001D98  0E00               	movlw	0
  1252  001D9A  0100               	movlb	0	; () banked
  1253  001D9C  6FC5               	movwf	(_TpoMsCont+1)& (0+255),b
  1254  001D9E  0E00               	movlw	0
  1255  001DA0  6FC4               	movwf	_TpoMsCont& (0+255),b
  1256                           
  1257                           ;RutinaTpo20.c: 16: Tpo50msF = 0;
  1258  001DA2  0E00               	movlw	0
  1259  001DA4  0100               	movlb	0	; () banked
  1260  001DA6  6FBD               	movwf	(_Tpo50msF+1)& (0+255),b
  1261  001DA8  0E00               	movlw	0
  1262  001DAA  6FBC               	movwf	_Tpo50msF& (0+255),b
  1263                           
  1264                           ;RutinaTpo20.c: 17: TpoSegF = 0;
  1265  001DAC  0E00               	movlw	0
  1266  001DAE  0100               	movlb	0	; () banked
  1267  001DB0  6FCF               	movwf	(_TpoSegF+1)& (0+255),b
  1268  001DB2  0E00               	movlw	0
  1269  001DB4  6FCE               	movwf	_TpoSegF& (0+255),b
  1270                           
  1271                           ;RutinaTpo20.c: 18: TpoMinF = 0;
  1272  001DB6  0E00               	movlw	0
  1273  001DB8  0100               	movlb	0	; () banked
  1274  001DBA  6FC3               	movwf	(_TpoMinF+1)& (0+255),b
  1275  001DBC  0E00               	movlw	0
  1276  001DBE  6FC2               	movwf	_TpoMinF& (0+255),b
  1277                           
  1278                           ;RutinaTpo20.c: 19: TpoHoraF = 0;
  1279  001DC0  0E00               	movlw	0
  1280  001DC2  0100               	movlb	0	; () banked
  1281  001DC4  6FC1               	movwf	(_TpoHoraF+1)& (0+255),b
  1282  001DC6  0E00               	movlw	0
  1283  001DC8  6FC0               	movwf	_TpoHoraF& (0+255),b
  1284                           
  1285                           ;RutinaTpo20.c: 20: TpoDiaF = 0;
  1286  001DCA  0E00               	movlw	0
  1287  001DCC  0100               	movlb	0	; () banked
  1288  001DCE  6FBF               	movwf	(_TpoDiaF+1)& (0+255),b
  1289  001DD0  0E00               	movlw	0
  1290  001DD2  6FBE               	movwf	_TpoDiaF& (0+255),b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;RutinaTpo20.c: 21: RtcLee();
  1294  001DD4  ECB0  F00A         	call	_RtcLee	;wreg free
  1295                           
  1296                           ;RutinaTpo20.c: 22: TpoRtcSegAnt=RtcFechaHora[5];
  1297  001DD8  C0ED  F0CC         	movff	_RtcFechaHora+5,_TpoRtcSegAnt
  1298  001DDC  0100               	movlb	0	; () banked
  1299  001DDE  6BCD               	clrf	(_TpoRtcSegAnt+1)& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;RutinaTpo20.c: 23: TpoRtcMinAnt=RtcFechaHora[4];
  1303  001DE0  C0EC  F0CA         	movff	_RtcFechaHora+4,_TpoRtcMinAnt
  1304  001DE4  0100               	movlb	0	; () banked
  1305  001DE6  6BCB               	clrf	(_TpoRtcMinAnt+1)& (0+255),b
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;RutinaTpo20.c: 24: TpoRtcHoraAnt=RtcFechaHora[3];
  1309  001DE8  C0EB  F0C8         	movff	_RtcFechaHora+3,_TpoRtcHoraAnt
  1310  001DEC  0100               	movlb	0	; () banked
  1311  001DEE  6BC9               	clrf	(_TpoRtcHoraAnt+1)& (0+255),b
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;RutinaTpo20.c: 25: TpoRtcDiaAnt=RtcFechaHora[2];
  1315  001DF0  C0EA  F0C6         	movff	_RtcFechaHora+2,_TpoRtcDiaAnt
  1316  001DF4  0100               	movlb	0	; () banked
  1317  001DF6  6BC7               	clrf	(_TpoRtcDiaAnt+1)& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320  001DF8  0012               	return		;funcret
  1321  001DFA                     __end_of_Tpo_init:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           status	equ	0xFD8
  1332                           
  1333 ;; *************** function _RtcInit *****************
  1334 ;; Defined at:
  1335 ;;		line 25 in file "RTC21.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;		None
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  1    wreg      void 
  1342 ;; Registers used:
  1343 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1349 ;;      Params:         0       0       0       0       0       0       0       0       0
  1350 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1352 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1353 ;;Total ram usage:        0 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    8
  1356 ;; This function calls:
  1357 ;;		_RtcEsc
  1358 ;;		_RtcLee
  1359 ;; This function is called by:
  1360 ;;		_Ppal_Init
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text4
  1365  002252                     __ptext4:
  1366                           	opt stack 0
  1367  002252                     _RtcInit:
  1368                           	opt stack 20
  1369                           
  1370                           ;RTC21.c: 26: RtcLee();
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;incstack = 0
  1374  002252  ECB0  F00A         	call	_RtcLee	;wreg free
  1375                           
  1376                           ;RTC21.c: 27: RtcLee();
  1377  002256  ECB0  F00A         	call	_RtcLee	;wreg free
  1378                           
  1379                           ;RTC21.c: 28: if ( ( RtcFechaHora[5] & (0x80) ) != 0 ) {
  1380  00225A  0100               	movlb	0	; () banked
  1381  00225C  AFED               	btfss	(_RtcFechaHora+5)& (0+255),7,b
  1382  00225E  0012               	return	
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;RTC21.c: 29: RtcFechaHora [0] = 11;
  1386  002260  0E0B               	movlw	11
  1387  002262  0100               	movlb	0	; () banked
  1388  002264  6FE8               	movwf	_RtcFechaHora& (0+255),b
  1389                           
  1390                           ;RTC21.c: 30: RtcFechaHora [1] = 5;
  1391  002266  0E05               	movlw	5
  1392  002268  0100               	movlb	0	; () banked
  1393  00226A  6FE9               	movwf	(_RtcFechaHora+1)& (0+255),b
  1394                           
  1395                           ;RTC21.c: 31: RtcFechaHora [2] = 10;
  1396  00226C  0E0A               	movlw	10
  1397  00226E  0100               	movlb	0	; () banked
  1398  002270  6FEA               	movwf	(_RtcFechaHora+2)& (0+255),b
  1399                           
  1400                           ;RTC21.c: 32: RtcFechaHora [3] = 1;
  1401  002272  0E01               	movlw	1
  1402  002274  0100               	movlb	0	; () banked
  1403  002276  6FEB               	movwf	(_RtcFechaHora+3)& (0+255),b
  1404                           
  1405                           ;RTC21.c: 33: RtcFechaHora [4] = 2;
  1406  002278  0E02               	movlw	2
  1407  00227A  0100               	movlb	0	; () banked
  1408  00227C  6FEC               	movwf	(_RtcFechaHora+4)& (0+255),b
  1409                           
  1410                           ;RTC21.c: 34: RtcFechaHora [5] = 3;
  1411  00227E  0E03               	movlw	3
  1412  002280  0100               	movlb	0	; () banked
  1413  002282  6FED               	movwf	(_RtcFechaHora+5)& (0+255),b
  1414                           
  1415                           ;RTC21.c: 35: RtcFechaHora [6] = 1;
  1416  002284  0E01               	movlw	1
  1417  002286  0100               	movlb	0	; () banked
  1418  002288  6FEE               	movwf	(_RtcFechaHora+6)& (0+255),b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;RTC21.c: 36: RtcEsc();
  1422  00228A  EC7C  F00B         	call	_RtcEsc	;wreg free
  1423  00228E  0012               	return	
  1424  002290                     __end_of_RtcInit:
  1425                           	opt stack 0
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _MIOInit *****************
  1437 ;; Defined at:
  1438 ;;		line 34 in file "RutinaModIO15.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1452 ;;      Params:         0       0       0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    5
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_Ppal_Init
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text5
  1467  00138C                     __ptext5:
  1468                           	opt stack 0
  1469  00138C                     _MIOInit:
  1470                           	opt stack 23
  1471                           
  1472                           ;RutinaModIO15.c: 36: TRISA = 255;
  1473                           
  1474                           ;incstack = 0
  1475  00138C  6892               	setf	3986,c	;volatile
  1476                           
  1477                           ;RutinaModIO15.c: 37: ANSELA = 0x2f;
  1478  00138E  0E2F               	movlw	47
  1479  001390  010F               	movlb	15	; () banked
  1480  001392  6F5B               	movwf	91,b	;volatile
  1481                           
  1482                           ;RutinaModIO15.c: 45: MIOAdcDelta[0]=3;
  1483  001394  0E00               	movlw	0
  1484  001396  0100               	movlb	0	; () banked
  1485  001398  6F6B               	movwf	(_MIOAdcDelta+1)& (0+255),b
  1486  00139A  0E03               	movlw	3
  1487  00139C  6F6A               	movwf	_MIOAdcDelta& (0+255),b
  1488                           
  1489                           ;RutinaModIO15.c: 46: MIOAdcDelta[1]=3;
  1490  00139E  0E00               	movlw	0
  1491  0013A0  0100               	movlb	0	; () banked
  1492  0013A2  6F6D               	movwf	(_MIOAdcDelta+3)& (0+255),b
  1493  0013A4  0E03               	movlw	3
  1494  0013A6  6F6C               	movwf	(_MIOAdcDelta+2)& (0+255),b
  1495                           
  1496                           ;RutinaModIO15.c: 47: MIOAdcDelta[2]=3;
  1497  0013A8  0E00               	movlw	0
  1498  0013AA  0100               	movlb	0	; () banked
  1499  0013AC  6F6F               	movwf	(_MIOAdcDelta+5)& (0+255),b
  1500  0013AE  0E03               	movlw	3
  1501  0013B0  6F6E               	movwf	(_MIOAdcDelta+4)& (0+255),b
  1502                           
  1503                           ;RutinaModIO15.c: 48: MIOAdcDelta[3]=3;
  1504  0013B2  0E00               	movlw	0
  1505  0013B4  0100               	movlb	0	; () banked
  1506  0013B6  6F71               	movwf	(_MIOAdcDelta+7)& (0+255),b
  1507  0013B8  0E03               	movlw	3
  1508  0013BA  6F70               	movwf	(_MIOAdcDelta+6)& (0+255),b
  1509                           
  1510                           ;RutinaModIO15.c: 49: MIOAdcDelta[4]=3;
  1511  0013BC  0E00               	movlw	0
  1512  0013BE  0100               	movlb	0	; () banked
  1513  0013C0  6F73               	movwf	(_MIOAdcDelta+9)& (0+255),b
  1514  0013C2  0E03               	movlw	3
  1515  0013C4  6F72               	movwf	(_MIOAdcDelta+8)& (0+255),b
  1516                           
  1517                           ;RutinaModIO15.c: 51: MIOAdcDivisor[0]=1;
  1518  0013C6  0E00               	movlw	0
  1519  0013C8  0101               	movlb	1	; () banked
  1520  0013CA  6F15               	movwf	(_MIOAdcDivisor+1)& (0+255),b
  1521  0013CC  0E01               	movlw	1
  1522  0013CE  6F14               	movwf	_MIOAdcDivisor& (0+255),b
  1523                           
  1524                           ;RutinaModIO15.c: 52: MIOAdcDivisor[1]=1;
  1525  0013D0  0E00               	movlw	0
  1526  0013D2  0101               	movlb	1	; () banked
  1527  0013D4  6F17               	movwf	(_MIOAdcDivisor+3)& (0+255),b
  1528  0013D6  0E01               	movlw	1
  1529  0013D8  6F16               	movwf	(_MIOAdcDivisor+2)& (0+255),b
  1530                           
  1531                           ;RutinaModIO15.c: 53: MIOAdcDivisor[2]=1;
  1532  0013DA  0E00               	movlw	0
  1533  0013DC  0101               	movlb	1	; () banked
  1534  0013DE  6F19               	movwf	(_MIOAdcDivisor+5)& (0+255),b
  1535  0013E0  0E01               	movlw	1
  1536  0013E2  6F18               	movwf	(_MIOAdcDivisor+4)& (0+255),b
  1537                           
  1538                           ;RutinaModIO15.c: 54: MIOAdcDivisor[3]=1;
  1539  0013E4  0E00               	movlw	0
  1540  0013E6  0101               	movlb	1	; () banked
  1541  0013E8  6F1B               	movwf	(_MIOAdcDivisor+7)& (0+255),b
  1542  0013EA  0E01               	movlw	1
  1543  0013EC  6F1A               	movwf	(_MIOAdcDivisor+6)& (0+255),b
  1544                           
  1545                           ;RutinaModIO15.c: 55: MIOAdcDivisor[4]=1;
  1546  0013EE  0E00               	movlw	0
  1547  0013F0  0101               	movlb	1	; () banked
  1548  0013F2  6F1D               	movwf	(_MIOAdcDivisor+9)& (0+255),b
  1549  0013F4  0E01               	movlw	1
  1550  0013F6  6F1C               	movwf	(_MIOAdcDivisor+8)& (0+255),b
  1551                           
  1552                           ;RutinaModIO15.c: 57: MIOAdcMin[0]=0;
  1553  0013F8  0E00               	movlw	0
  1554  0013FA  0100               	movlb	0	; () banked
  1555  0013FC  6F75               	movwf	(_MIOAdcMin+1)& (0+255),b
  1556  0013FE  0E00               	movlw	0
  1557  001400  6F74               	movwf	_MIOAdcMin& (0+255),b
  1558                           
  1559                           ;RutinaModIO15.c: 58: MIOAdcMin[1]=0;
  1560  001402  0E00               	movlw	0
  1561  001404  0100               	movlb	0	; () banked
  1562  001406  6F77               	movwf	(_MIOAdcMin+3)& (0+255),b
  1563  001408  0E00               	movlw	0
  1564  00140A  6F76               	movwf	(_MIOAdcMin+2)& (0+255),b
  1565                           
  1566                           ;RutinaModIO15.c: 59: MIOAdcMin[2]=0;
  1567  00140C  0E00               	movlw	0
  1568  00140E  0100               	movlb	0	; () banked
  1569  001410  6F79               	movwf	(_MIOAdcMin+5)& (0+255),b
  1570  001412  0E00               	movlw	0
  1571  001414  6F78               	movwf	(_MIOAdcMin+4)& (0+255),b
  1572                           
  1573                           ;RutinaModIO15.c: 60: MIOAdcMin[3]=0;
  1574  001416  0E00               	movlw	0
  1575  001418  0100               	movlb	0	; () banked
  1576  00141A  6F7B               	movwf	(_MIOAdcMin+7)& (0+255),b
  1577  00141C  0E00               	movlw	0
  1578  00141E  6F7A               	movwf	(_MIOAdcMin+6)& (0+255),b
  1579                           
  1580                           ;RutinaModIO15.c: 61: MIOAdcMin[4]=0;
  1581  001420  0E00               	movlw	0
  1582  001422  0100               	movlb	0	; () banked
  1583  001424  6F7D               	movwf	(_MIOAdcMin+9)& (0+255),b
  1584  001426  0E00               	movlw	0
  1585  001428  6F7C               	movwf	(_MIOAdcMin+8)& (0+255),b
  1586                           
  1587                           ;RutinaModIO15.c: 63: MrReg[0]=0;
  1588  00142A  0E00               	movlw	0
  1589  00142C  0100               	movlb	0	; () banked
  1590  00142E  6FD1               	movwf	_MrReg& (0+255),b
  1591                           
  1592                           ;RutinaModIO15.c: 64: MrReg[1]=0;
  1593  001430  0E00               	movlw	0
  1594  001432  0100               	movlb	0	; () banked
  1595  001434  6FD2               	movwf	(_MrReg+1)& (0+255),b
  1596                           
  1597                           ;RutinaModIO15.c: 65: MrReg[2]=0;
  1598  001436  0E00               	movlw	0
  1599  001438  0100               	movlb	0	; () banked
  1600  00143A  6FD3               	movwf	(_MrReg+2)& (0+255),b
  1601                           
  1602                           ;RutinaModIO15.c: 66: MrReg[3]=0;
  1603  00143C  0E00               	movlw	0
  1604  00143E  0100               	movlb	0	; () banked
  1605  001440  6FD4               	movwf	(_MrReg+3)& (0+255),b
  1606                           
  1607                           ;RutinaModIO15.c: 67: MrReg[4]=0;
  1608  001442  0E00               	movlw	0
  1609  001444  0100               	movlb	0	; () banked
  1610  001446  6FD5               	movwf	(_MrReg+4)& (0+255),b
  1611                           
  1612                           ;RutinaModIO15.c: 69: MIOAdcAnt[0]=255;
  1613  001448  0E00               	movlw	0
  1614  00144A  0100               	movlb	0	; () banked
  1615  00144C  6F61               	movwf	(_MIOAdcAnt+1)& (0+255),b
  1616  00144E  6960               	setf	_MIOAdcAnt& (0+255),b
  1617                           
  1618                           ;RutinaModIO15.c: 70: MIOAdcAnt[1]=255;
  1619  001450  0E00               	movlw	0
  1620  001452  0100               	movlb	0	; () banked
  1621  001454  6F63               	movwf	(_MIOAdcAnt+3)& (0+255),b
  1622  001456  6962               	setf	(_MIOAdcAnt+2)& (0+255),b
  1623                           
  1624                           ;RutinaModIO15.c: 71: MIOAdcAnt[2]=255;
  1625  001458  0E00               	movlw	0
  1626  00145A  0100               	movlb	0	; () banked
  1627  00145C  6F65               	movwf	(_MIOAdcAnt+5)& (0+255),b
  1628  00145E  6964               	setf	(_MIOAdcAnt+4)& (0+255),b
  1629                           
  1630                           ;RutinaModIO15.c: 72: MIOAdcAnt[3]=255;
  1631  001460  0E00               	movlw	0
  1632  001462  0100               	movlb	0	; () banked
  1633  001464  6F67               	movwf	(_MIOAdcAnt+7)& (0+255),b
  1634  001466  6966               	setf	(_MIOAdcAnt+6)& (0+255),b
  1635                           
  1636                           ;RutinaModIO15.c: 73: MIOAdcAnt[4]=255;
  1637  001468  0E00               	movlw	0
  1638  00146A  0100               	movlb	0	; () banked
  1639  00146C  6F69               	movwf	(_MIOAdcAnt+9)& (0+255),b
  1640  00146E  6968               	setf	(_MIOAdcAnt+8)& (0+255),b
  1641                           
  1642                           ;RutinaModIO15.c: 75: MioCicloHabilitado=1;
  1643  001470  0E00               	movlw	0
  1644  001472  0100               	movlb	0	; () banked
  1645  001474  6F95               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  1646  001476  0E01               	movlw	1
  1647  001478  6F94               	movwf	_MioCicloHabilitado& (0+255),b
  1648                           
  1649                           ; BSR set to: 0
  1650  00147A  0012               	return		;funcret
  1651  00147C                     __end_of_MIOInit:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _I2CInit *****************
  1664 ;; Defined at:
  1665 ;;		line 28 in file "I2C30.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    5
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_Ppal_Init
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text6
  1694  00262E                     __ptext6:
  1695                           	opt stack 0
  1696  00262E                     _I2CInit:
  1697                           	opt stack 23
  1698                           
  1699                           ;I2C30.c: 29: SSP1CON1 = 0x3B;
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;incstack = 0
  1703  00262E  0E3B               	movlw	59
  1704  002630  6EC6               	movwf	4038,c	;volatile
  1705                           
  1706                           ;I2C30.c: 30: PORTBbits.RB1 = 0;
  1707  002632  9281               	bcf	3969,1,c	;volatile
  1708                           
  1709                           ;I2C30.c: 31: PORTBbits.RB0 = 0;
  1710  002634  9081               	bcf	3969,0,c	;volatile
  1711                           
  1712                           ;I2C30.c: 32: TRISBbits.RB1=1;;
  1713  002636  8293               	bsf	3987,1,c	;volatile
  1714                           
  1715                           ;I2C30.c: 33: TRISBbits.RB0=1;;
  1716  002638  8093               	bsf	3987,0,c	;volatile
  1717                           
  1718                           ;I2C30.c: 34: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  1719  00263A  0E0C               	movlw	12
  1720  00263C                     u3607:
  1721  00263C  2EE8               	decfsz	wreg,f,c
  1722  00263E  D7FE               	bra	u3607
  1723  002640  D000               	nop2	
  1724  002642  0012               	return		;funcret
  1725  002644                     __end_of_I2CInit:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postdec1	equ	0xFE5
  1734                           fsr1l	equ	0xFE1
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _ADC_Init *****************
  1738 ;; Defined at:
  1739 ;;		line 5 in file "ADC30.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_Ppal_Init
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text7
  1768  002644                     __ptext7:
  1769                           	opt stack 0
  1770  002644                     _ADC_Init:
  1771                           	opt stack 23
  1772                           
  1773                           ;ADC30.c: 7: TRISA = 255;
  1774                           
  1775                           ;incstack = 0
  1776  002644  6892               	setf	3986,c	;volatile
  1777                           
  1778                           ;ADC30.c: 8: ANSELA = 0x2f;
  1779  002646  0E2F               	movlw	47
  1780  002648  010F               	movlb	15	; () banked
  1781  00264A  6F5B               	movwf	91,b	;volatile
  1782                           
  1783                           ;ADC30.c: 9: ADCON2 = 0xAD;
  1784  00264C  0EAD               	movlw	173
  1785  00264E  6EC0               	movwf	4032,c	;volatile
  1786                           
  1787                           ;ADC30.c: 11: ADCON1 = 4;
  1788  002650  0E04               	movlw	4
  1789  002652  6EC1               	movwf	4033,c	;volatile
  1790                           
  1791                           ;ADC30.c: 12: ADCON0 = 0x01;
  1792  002654  0E01               	movlw	1
  1793  002656  6EC2               	movwf	4034,c	;volatile
  1794                           
  1795                           ; BSR set to: 15
  1796  002658  0012               	return		;funcret
  1797  00265A                     __end_of_ADC_Init:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _Ppal_Ciclo *****************
  1810 ;; Defined at:
  1811 ;;		line 150 in file "ModIO24.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1825 ;;      Params:         0       0       0       0       0       0       0       0       0
  1826 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1828 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:   10
  1832 ;; This function calls:
  1833 ;;		_MioCiclo
  1834 ;;		_Tpo_Ciclo
  1835 ;; This function is called by:
  1836 ;;		_MstMain
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text8
  1841  002564                     __ptext8:
  1842                           	opt stack 0
  1843  002564                     _Ppal_Ciclo:
  1844                           	opt stack 19
  1845                           
  1846                           ;ModIO24.c: 156: Tpo_Ciclo();
  1847                           
  1848                           ; BSR set to: 15
  1849                           ;incstack = 0
  1850  002564  EC1B  F00B         	call	_Tpo_Ciclo	;wreg free
  1851                           
  1852                           ;ModIO24.c: 158: MioCiclo();
  1853  002568  ECB7  F004         	call	_MioCiclo	;wreg free
  1854                           
  1855                           ;ModIO24.c: 163: if (TpoSegF){
  1856  00256C  0100               	movlb	0	; () banked
  1857  00256E  51CE               	movf	_TpoSegF& (0+255),w,b
  1858  002570  0100               	movlb	0	; () banked
  1859  002572  11CF               	iorwf	(_TpoSegF+1)& (0+255),w,b
  1860  002574  B4D8               	btfsc	status,2,c
  1861  002576  0012               	return	
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;ModIO24.c: 164: TempSeg++;
  1865  002578  0100               	movlb	0	; () banked
  1866  00257A  4BBA               	infsnz	_TempSeg& (0+255),f,b
  1867  00257C  2BBB               	incf	(_TempSeg+1)& (0+255),f,b
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;ModIO24.c: 165: TpoSegF=0;
  1871  00257E  0E00               	movlw	0
  1872  002580  0100               	movlb	0	; () banked
  1873  002582  6FCF               	movwf	(_TpoSegF+1)& (0+255),b
  1874  002584  0E00               	movlw	0
  1875  002586  6FCE               	movwf	_TpoSegF& (0+255),b
  1876  002588  0012               	return	
  1877  00258A                     __end_of_Ppal_Ciclo:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _Tpo_Ciclo *****************
  1890 ;; Defined at:
  1891 ;;		line 40 in file "RutinaTpo20.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1908 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        2 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    7
  1912 ;; This function calls:
  1913 ;;		_RtcLee
  1914 ;; This function is called by:
  1915 ;;		_Ppal_Ciclo
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text9
  1920  001636                     __ptext9:
  1921                           	opt stack 0
  1922  001636                     _Tpo_Ciclo:
  1923                           	opt stack 21
  1924                           
  1925                           ;RutinaTpo20.c: 41: if (!Tpo50msF) {return;}
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;incstack = 0
  1929  001636  0100               	movlb	0	; () banked
  1930  001638  51BC               	movf	_Tpo50msF& (0+255),w,b
  1931  00163A  0100               	movlb	0	; () banked
  1932  00163C  11BD               	iorwf	(_Tpo50msF+1)& (0+255),w,b
  1933  00163E  B4D8               	btfsc	status,2,c
  1934  001640  0012               	return	
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;RutinaTpo20.c: 43: RtcLee();
  1938                           
  1939                           ; BSR set to: 0
  1940                           
  1941                           ; BSR set to: 0
  1942  001642  ECB0  F00A         	call	_RtcLee	;wreg free
  1943                           
  1944                           ;RutinaTpo20.c: 44: if (RtcFechaHora[5] == TpoRtcSegAnt) {return;}
  1945  001646  0100               	movlb	0	; () banked
  1946  001648  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  1947  00164A  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  1948  00164C  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  1949  00164E  0100               	movlb	0	; () banked
  1950  001650  51CC               	movf	_TpoRtcSegAnt& (0+255),w,b
  1951  001652  182A               	xorwf	??_Tpo_Ciclo,w,c
  1952  001654  E105               	bnz	l5092
  1953  001656  0100               	movlb	0	; () banked
  1954  001658  51CD               	movf	(_TpoRtcSegAnt+1)& (0+255),w,b
  1955  00165A  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  1956  00165C  B4D8               	btfsc	status,2,c
  1957  00165E  0012               	return	
  1958  001660                     l5092:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;RutinaTpo20.c: 45: TpoSegF=1;
  1962  001660  0E00               	movlw	0
  1963  001662  0100               	movlb	0	; () banked
  1964  001664  6FCF               	movwf	(_TpoSegF+1)& (0+255),b
  1965  001666  0E01               	movlw	1
  1966  001668  6FCE               	movwf	_TpoSegF& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;RutinaTpo20.c: 46: TpoRtcSegAnt = RtcFechaHora[5];
  1970  00166A  C0ED  F0CC         	movff	_RtcFechaHora+5,_TpoRtcSegAnt
  1971  00166E  0100               	movlb	0	; () banked
  1972  001670  6BCD               	clrf	(_TpoRtcSegAnt+1)& (0+255),b
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;RutinaTpo20.c: 48: if (RtcFechaHora[4] == TpoRtcMinAnt) {return;}
  1976  001672  0100               	movlb	0	; () banked
  1977  001674  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  1978  001676  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  1979  001678  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  1980  00167A  0100               	movlb	0	; () banked
  1981  00167C  51CA               	movf	_TpoRtcMinAnt& (0+255),w,b
  1982  00167E  182A               	xorwf	??_Tpo_Ciclo,w,c
  1983  001680  E105               	bnz	l5100
  1984  001682  0100               	movlb	0	; () banked
  1985  001684  51CB               	movf	(_TpoRtcMinAnt+1)& (0+255),w,b
  1986  001686  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  1987  001688  B4D8               	btfsc	status,2,c
  1988  00168A  0012               	return	
  1989  00168C                     l5100:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;RutinaTpo20.c: 49: TpoMinF=1;
  1993  00168C  0E00               	movlw	0
  1994  00168E  0100               	movlb	0	; () banked
  1995  001690  6FC3               	movwf	(_TpoMinF+1)& (0+255),b
  1996  001692  0E01               	movlw	1
  1997  001694  6FC2               	movwf	_TpoMinF& (0+255),b
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;RutinaTpo20.c: 50: TpoRtcMinAnt = RtcFechaHora[4];
  2001  001696  C0EC  F0CA         	movff	_RtcFechaHora+4,_TpoRtcMinAnt
  2002  00169A  0100               	movlb	0	; () banked
  2003  00169C  6BCB               	clrf	(_TpoRtcMinAnt+1)& (0+255),b
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;RutinaTpo20.c: 52: if (RtcFechaHora[3] == TpoRtcHoraAnt) {return;}
  2007  00169E  0100               	movlb	0	; () banked
  2008  0016A0  51EB               	movf	(_RtcFechaHora+3)& (0+255),w,b
  2009  0016A2  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  2010  0016A4  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  2011  0016A6  0100               	movlb	0	; () banked
  2012  0016A8  51C8               	movf	_TpoRtcHoraAnt& (0+255),w,b
  2013  0016AA  182A               	xorwf	??_Tpo_Ciclo,w,c
  2014  0016AC  E105               	bnz	l5108
  2015  0016AE  0100               	movlb	0	; () banked
  2016  0016B0  51C9               	movf	(_TpoRtcHoraAnt+1)& (0+255),w,b
  2017  0016B2  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  2018  0016B4  B4D8               	btfsc	status,2,c
  2019  0016B6  0012               	return	
  2020  0016B8                     l5108:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;RutinaTpo20.c: 53: TpoHoraF=1;
  2024  0016B8  0E00               	movlw	0
  2025  0016BA  0100               	movlb	0	; () banked
  2026  0016BC  6FC1               	movwf	(_TpoHoraF+1)& (0+255),b
  2027  0016BE  0E01               	movlw	1
  2028  0016C0  6FC0               	movwf	_TpoHoraF& (0+255),b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;RutinaTpo20.c: 54: TpoRtcHoraAnt = RtcFechaHora[3];
  2032  0016C2  C0EB  F0C8         	movff	_RtcFechaHora+3,_TpoRtcHoraAnt
  2033  0016C6  0100               	movlb	0	; () banked
  2034  0016C8  6BC9               	clrf	(_TpoRtcHoraAnt+1)& (0+255),b
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;RutinaTpo20.c: 56: if (RtcFechaHora[2] == TpoRtcDiaAnt) {return;}
  2038  0016CA  0100               	movlb	0	; () banked
  2039  0016CC  51EA               	movf	(_RtcFechaHora+2)& (0+255),w,b
  2040  0016CE  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  2041  0016D0  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  2042  0016D2  0100               	movlb	0	; () banked
  2043  0016D4  51C6               	movf	_TpoRtcDiaAnt& (0+255),w,b
  2044  0016D6  182A               	xorwf	??_Tpo_Ciclo,w,c
  2045  0016D8  E105               	bnz	l5116
  2046  0016DA  0100               	movlb	0	; () banked
  2047  0016DC  51C7               	movf	(_TpoRtcDiaAnt+1)& (0+255),w,b
  2048  0016DE  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  2049  0016E0  B4D8               	btfsc	status,2,c
  2050  0016E2  0012               	return	
  2051  0016E4                     l5116:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;RutinaTpo20.c: 57: TpoDiaF=1;
  2055  0016E4  0E00               	movlw	0
  2056  0016E6  0100               	movlb	0	; () banked
  2057  0016E8  6FBF               	movwf	(_TpoDiaF+1)& (0+255),b
  2058  0016EA  0E01               	movlw	1
  2059  0016EC  6FBE               	movwf	_TpoDiaF& (0+255),b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;RutinaTpo20.c: 58: TpoRtcDiaAnt = RtcFechaHora[2];
  2063  0016EE  C0EA  F0C6         	movff	_RtcFechaHora+2,_TpoRtcDiaAnt
  2064  0016F2  0100               	movlb	0	; () banked
  2065  0016F4  6BC7               	clrf	(_TpoRtcDiaAnt+1)& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068  0016F6  0012               	return		;funcret
  2069  0016F8                     __end_of_Tpo_Ciclo:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1l	equ	0xFE1
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _MioCiclo *****************
  2082 ;; Defined at:
  2083 ;;		line 228 in file "RutinaModIO15.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  temp2           2    0        int 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2100 ;;      Totals:         0       0       3       0       0       0       0       0       0
  2101 ;;Total ram usage:        3 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    9
  2104 ;; This function calls:
  2105 ;;		_MIOAdcAjuste2_5
  2106 ;;		_MioPreparaReg
  2107 ;;		_MrAgregaReg
  2108 ;;		_abs
  2109 ;; This function is called by:
  2110 ;;		_Ppal_Ciclo
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text10
  2115  00096E                     __ptext10:
  2116                           	opt stack 0
  2117  00096E                     _MioCiclo:
  2118                           	opt stack 19
  2119                           
  2120                           ;RutinaModIO15.c: 229: int temp2;
  2121                           ;RutinaModIO15.c: 230: if (!MioCicloHabilitado) {return;}
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;incstack = 0
  2125  00096E  0100               	movlb	0	; () banked
  2126  000970  5194               	movf	_MioCicloHabilitado& (0+255),w,b
  2127  000972  0100               	movlb	0	; () banked
  2128  000974  1195               	iorwf	(_MioCicloHabilitado+1)& (0+255),w,b
  2129  000976  B4D8               	btfsc	status,2,c
  2130  000978  0012               	return	
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;RutinaModIO15.c: 232: if (!TpoSegF) {
  2134                           
  2135                           ; BSR set to: 0
  2136                           
  2137                           ; BSR set to: 0
  2138  00097A  0100               	movlb	0	; () banked
  2139  00097C  51CE               	movf	_TpoSegF& (0+255),w,b
  2140  00097E  0100               	movlb	0	; () banked
  2141  000980  11CF               	iorwf	(_TpoSegF+1)& (0+255),w,b
  2142  000982  B4D8               	btfsc	status,2,c
  2143  000984  0012               	return	
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;RutinaModIO15.c: 234: }
  2147                           ;RutinaModIO15.c: 237: TpoSegF=0;
  2148                           
  2149                           ; BSR set to: 0
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;RutinaModIO15.c: 233: return;
  2153  000986  0E00               	movlw	0
  2154  000988  0100               	movlb	0	; () banked
  2155  00098A  6FCF               	movwf	(_TpoSegF+1)& (0+255),b
  2156  00098C  0E00               	movlw	0
  2157  00098E  6FCE               	movwf	_TpoSegF& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;RutinaModIO15.c: 238: MIOSegCont++;
  2161  000990  0100               	movlb	0	; () banked
  2162  000992  4B92               	infsnz	_MIOSegCont& (0+255),f,b
  2163  000994  2B93               	incf	(_MIOSegCont+1)& (0+255),f,b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;RutinaModIO15.c: 239: if (MIOSegCont<MIOTpoDeltaMax){
  2167  000996  0100               	movlb	0	; () banked
  2168  000998  51FB               	movf	_MIOTpoDeltaMax& (0+255),w,b
  2169  00099A  0100               	movlb	0	; () banked
  2170  00099C  5D92               	subwf	_MIOSegCont& (0+255),w,b
  2171  00099E  0100               	movlb	0	; () banked
  2172  0009A0  51FC               	movf	(_MIOTpoDeltaMax+1)& (0+255),w,b
  2173  0009A2  0100               	movlb	0	; () banked
  2174  0009A4  5993               	subwfb	(_MIOSegCont+1)& (0+255),w,b
  2175  0009A6  B0D8               	btfsc	status,0,c
  2176  0009A8  D097               	goto	l5150
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;RutinaModIO15.c: 241: if (MIOSegCont<MIOTpoDeltaMin){
  2180  0009AA  0100               	movlb	0	; () banked
  2181  0009AC  51FD               	movf	_MIOTpoDeltaMin& (0+255),w,b
  2182  0009AE  0100               	movlb	0	; () banked
  2183  0009B0  5D92               	subwf	_MIOSegCont& (0+255),w,b
  2184  0009B2  0100               	movlb	0	; () banked
  2185  0009B4  51FE               	movf	(_MIOTpoDeltaMin+1)& (0+255),w,b
  2186  0009B6  0100               	movlb	0	; () banked
  2187  0009B8  5993               	subwfb	(_MIOSegCont+1)& (0+255),w,b
  2188  0009BA  A0D8               	btfss	status,0,c
  2189  0009BC  0012               	return	
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;RutinaModIO15.c: 243: }
  2193                           ;RutinaModIO15.c: 245: MIOAdcAjuste2_5();
  2194                           
  2195                           ; BSR set to: 0
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;RutinaModIO15.c: 242: return;
  2199  0009BE  ECDD  F003         	call	_MIOAdcAjuste2_5	;wreg free
  2200                           
  2201                           ;RutinaModIO15.c: 247: if ( (abs(MIOAdcAct[0]-MIOAdcAnt[0])<MIOAdcDelta[0]) &&
  2202                           ;RutinaModIO15.c: 248: (abs(MIOAdcAct[1]-MIOAdcAnt[1])<MIOAdcDelta[1]) &&
  2203                           ;RutinaModIO15.c: 249: (abs(MIOAdcAct[2]-MIOAdcAnt[2])<MIOAdcDelta[2]) &&
  2204                           ;RutinaModIO15.c: 250: (abs(MIOAdcAct[3]-MIOAdcAnt[3])<MIOAdcDelta[3]) ) {
  2205  0009C2  C060  F183         	movff	_MIOAdcAnt,??_MioCiclo
  2206  0009C6  C061  F184         	movff	_MIOAdcAnt+1,??_MioCiclo+1
  2207  0009CA  0101               	movlb	1	; () banked
  2208  0009CC  1F83               	comf	??_MioCiclo& (0+255),f,b
  2209  0009CE  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2210  0009D0  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2211  0009D2  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2212  0009D4  5033               	movf	_MIOAdcAct,w,c
  2213  0009D6  0101               	movlb	1	; () banked
  2214  0009D8  2583               	addwf	??_MioCiclo& (0+255),w,b
  2215  0009DA  6E19               	movwf	abs@a,c
  2216  0009DC  5034               	movf	_MIOAdcAct+1,w,c
  2217  0009DE  0101               	movlb	1	; () banked
  2218  0009E0  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2219  0009E2  6E1A               	movwf	abs@a+1,c
  2220  0009E4  EC76  F012         	call	_abs	;wreg free
  2221  0009E8  0100               	movlb	0	; () banked
  2222  0009EA  516A               	movf	_MIOAdcDelta& (0+255),w,b
  2223  0009EC  5C19               	subwf	?_abs,w,c
  2224  0009EE  501A               	movf	?_abs+1,w,c
  2225  0009F0  0A80               	xorlw	128
  2226  0009F2  0101               	movlb	1	; () banked
  2227  0009F4  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2228  0009F6  0100               	movlb	0	; () banked
  2229  0009F8  516B               	movf	(_MIOAdcDelta+1)& (0+255),w,b
  2230  0009FA  0A80               	xorlw	128
  2231  0009FC  0101               	movlb	1	; () banked
  2232  0009FE  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2233  000A00  B0D8               	btfsc	status,0,c
  2234  000A02  D06C               	goto	l570
  2235                           
  2236                           ; BSR set to: 1
  2237  000A04  EE20  F062         	lfsr	2,_MIOAdcAnt+2
  2238  000A08  CFDE F183          	movff	postinc2,??_MioCiclo
  2239  000A0C  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2240  000A10  0101               	movlb	1	; () banked
  2241  000A12  1F83               	comf	??_MioCiclo& (0+255),f,b
  2242  000A14  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2243  000A16  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2244  000A18  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2245  000A1A  5035               	movf	_MIOAdcAct+2,w,c
  2246  000A1C  0101               	movlb	1	; () banked
  2247  000A1E  2583               	addwf	??_MioCiclo& (0+255),w,b
  2248  000A20  6E19               	movwf	abs@a,c
  2249  000A22  5036               	movf	_MIOAdcAct+3,w,c
  2250  000A24  0101               	movlb	1	; () banked
  2251  000A26  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2252  000A28  6E1A               	movwf	abs@a+1,c
  2253  000A2A  EC76  F012         	call	_abs	;wreg free
  2254  000A2E  0100               	movlb	0	; () banked
  2255  000A30  516C               	movf	(_MIOAdcDelta+2)& (0+255),w,b
  2256  000A32  5C19               	subwf	?_abs,w,c
  2257  000A34  501A               	movf	?_abs+1,w,c
  2258  000A36  0A80               	xorlw	128
  2259  000A38  0101               	movlb	1	; () banked
  2260  000A3A  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2261  000A3C  0100               	movlb	0	; () banked
  2262  000A3E  516D               	movf	(_MIOAdcDelta+3)& (0+255),w,b
  2263  000A40  0A80               	xorlw	128
  2264  000A42  0101               	movlb	1	; () banked
  2265  000A44  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2266  000A46  B0D8               	btfsc	status,0,c
  2267  000A48  D049               	goto	l570
  2268                           
  2269                           ; BSR set to: 1
  2270  000A4A  EE20  F064         	lfsr	2,_MIOAdcAnt+4
  2271  000A4E  CFDE F183          	movff	postinc2,??_MioCiclo
  2272  000A52  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2273  000A56  0101               	movlb	1	; () banked
  2274  000A58  1F83               	comf	??_MioCiclo& (0+255),f,b
  2275  000A5A  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2276  000A5C  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2277  000A5E  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2278  000A60  5037               	movf	_MIOAdcAct+4,w,c
  2279  000A62  0101               	movlb	1	; () banked
  2280  000A64  2583               	addwf	??_MioCiclo& (0+255),w,b
  2281  000A66  6E19               	movwf	abs@a,c
  2282  000A68  5038               	movf	_MIOAdcAct+5,w,c
  2283  000A6A  0101               	movlb	1	; () banked
  2284  000A6C  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2285  000A6E  6E1A               	movwf	abs@a+1,c
  2286  000A70  EC76  F012         	call	_abs	;wreg free
  2287  000A74  0100               	movlb	0	; () banked
  2288  000A76  516E               	movf	(_MIOAdcDelta+4)& (0+255),w,b
  2289  000A78  5C19               	subwf	?_abs,w,c
  2290  000A7A  501A               	movf	?_abs+1,w,c
  2291  000A7C  0A80               	xorlw	128
  2292  000A7E  0101               	movlb	1	; () banked
  2293  000A80  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2294  000A82  0100               	movlb	0	; () banked
  2295  000A84  516F               	movf	(_MIOAdcDelta+5)& (0+255),w,b
  2296  000A86  0A80               	xorlw	128
  2297  000A88  0101               	movlb	1	; () banked
  2298  000A8A  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2299  000A8C  B0D8               	btfsc	status,0,c
  2300  000A8E  D026               	goto	l570
  2301                           
  2302                           ; BSR set to: 1
  2303  000A90  EE20  F066         	lfsr	2,_MIOAdcAnt+6
  2304  000A94  CFDE F183          	movff	postinc2,??_MioCiclo
  2305  000A98  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2306  000A9C  0101               	movlb	1	; () banked
  2307  000A9E  1F83               	comf	??_MioCiclo& (0+255),f,b
  2308  000AA0  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2309  000AA2  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2310  000AA4  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2311  000AA6  5039               	movf	_MIOAdcAct+6,w,c
  2312  000AA8  0101               	movlb	1	; () banked
  2313  000AAA  2583               	addwf	??_MioCiclo& (0+255),w,b
  2314  000AAC  6E19               	movwf	abs@a,c
  2315  000AAE  503A               	movf	_MIOAdcAct+7,w,c
  2316  000AB0  0101               	movlb	1	; () banked
  2317  000AB2  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2318  000AB4  6E1A               	movwf	abs@a+1,c
  2319  000AB6  EC76  F012         	call	_abs	;wreg free
  2320  000ABA  0100               	movlb	0	; () banked
  2321  000ABC  5170               	movf	(_MIOAdcDelta+6)& (0+255),w,b
  2322  000ABE  5C19               	subwf	?_abs,w,c
  2323  000AC0  501A               	movf	?_abs+1,w,c
  2324  000AC2  0A80               	xorlw	128
  2325  000AC4  0101               	movlb	1	; () banked
  2326  000AC6  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2327  000AC8  0100               	movlb	0	; () banked
  2328  000ACA  5171               	movf	(_MIOAdcDelta+7)& (0+255),w,b
  2329  000ACC  0A80               	xorlw	128
  2330  000ACE  0101               	movlb	1	; () banked
  2331  000AD0  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2332  000AD2  A0D8               	btfss	status,0,c
  2333  000AD4  0012               	return	
  2334  000AD6  D002               	goto	l570
  2335  000AD8                     l5150:
  2336                           
  2337                           ;RutinaModIO15.c: 254: else {MIOAdcAjuste2_5();}
  2338  000AD8  ECDD  F003         	call	_MIOAdcAjuste2_5	;wreg free
  2339  000ADC                     l570:
  2340                           
  2341                           ;RutinaModIO15.c: 258: MioPreparaReg();
  2342  000ADC  ECDB  F00B         	call	_MioPreparaReg	;wreg free
  2343                           
  2344                           ;RutinaModIO15.c: 260: MrAgregaReg();
  2345  000AE0  EC47  F006         	call	_MrAgregaReg	;wreg free
  2346                           
  2347                           ;RutinaModIO15.c: 261: MIOSegCont=0;
  2348  000AE4  0E00               	movlw	0
  2349  000AE6  0100               	movlb	0	; () banked
  2350  000AE8  6F93               	movwf	(_MIOSegCont+1)& (0+255),b
  2351  000AEA  0E00               	movlw	0
  2352  000AEC  6F92               	movwf	_MIOSegCont& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;RutinaModIO15.c: 263: MIOAdcAnt[0]=MIOAdcAct[0];
  2356  000AEE  C033  F060         	movff	_MIOAdcAct,_MIOAdcAnt
  2357  000AF2  C034  F061         	movff	_MIOAdcAct+1,_MIOAdcAnt+1
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;RutinaModIO15.c: 264: MIOAdcAnt[1]=MIOAdcAct[1];
  2361  000AF6  C035  F062         	movff	_MIOAdcAct+2,_MIOAdcAnt+2
  2362  000AFA  C036  F063         	movff	_MIOAdcAct+3,_MIOAdcAnt+3
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;RutinaModIO15.c: 265: MIOAdcAnt[2]=MIOAdcAct[2];
  2366  000AFE  C037  F064         	movff	_MIOAdcAct+4,_MIOAdcAnt+4
  2367  000B02  C038  F065         	movff	_MIOAdcAct+5,_MIOAdcAnt+5
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;RutinaModIO15.c: 266: MIOAdcAnt[3]=MIOAdcAct[3];
  2371  000B06  C039  F066         	movff	_MIOAdcAct+6,_MIOAdcAnt+6
  2372  000B0A  C03A  F067         	movff	_MIOAdcAct+7,_MIOAdcAnt+7
  2373  000B0E  0012               	return		;funcret
  2374  000B10                     __end_of_MioCiclo:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _abs *****************
  2389 ;; Defined at:
  2390 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\abs.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  a               2   24[COMRAM] int 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  2   24[COMRAM] int 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2404 ;;      Params:         2       0       0       0       0       0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2406 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2407 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2408 ;;Total ram usage:        4 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    5
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_MioCiclo
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text11
  2419  0024EC                     __ptext11:
  2420                           	opt stack 0
  2421  0024EC                     _abs:
  2422                           	opt stack 22
  2423                           
  2424                           ;incstack = 0
  2425  0024EC  AE1A               	btfss	abs@a+1,7,c
  2426  0024EE  D00D               	goto	l666
  2427  0024F0  C019  F01B         	movff	abs@a,??_abs
  2428  0024F4  C01A  F01C         	movff	abs@a+1,??_abs+1
  2429  0024F8  1E1B               	comf	??_abs,f,c
  2430  0024FA  1E1C               	comf	??_abs+1,f,c
  2431  0024FC  4A1B               	infsnz	??_abs,f,c
  2432  0024FE  2A1C               	incf	??_abs+1,f,c
  2433  002500  C01B  F019         	movff	??_abs,?_abs
  2434  002504  C01C  F01A         	movff	??_abs+1,?_abs+1
  2435  002508  0012               	return	
  2436  00250A                     l666:
  2437  00250A  C019  F019         	movff	abs@a,?_abs
  2438  00250E  C01A  F01A         	movff	abs@a+1,?_abs+1
  2439  002512  0012               	return		;funcret
  2440  002514                     __end_of_abs:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           postdec1	equ	0xFE5
  2449                           fsr1l	equ	0xFE1
  2450                           postinc2	equ	0xFDE
  2451                           postdec2	equ	0xFDD
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _MioPreparaReg *****************
  2455 ;; Defined at:
  2456 ;;		line 163 in file "RutinaModIO15.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2472 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2473 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2474 ;;Total ram usage:        3 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    5
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_MioCiclo
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text12
  2485  0017B6                     __ptext12:
  2486                           	opt stack 0
  2487  0017B6                     _MioPreparaReg:
  2488                           	opt stack 22
  2489                           
  2490                           ;RutinaModIO15.c: 165: MrReg[2] = (MIOAdcAct[0] >> 4);
  2491                           
  2492                           ;incstack = 0
  2493  0017B6  C033  F019         	movff	_MIOAdcAct,??_MioPreparaReg
  2494  0017BA  C034  F01A         	movff	_MIOAdcAct+1,??_MioPreparaReg+1
  2495  0017BE  0E04               	movlw	4
  2496  0017C0  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2497  0017C2                     u2085:
  2498  0017C2  341A               	rlcf	??_MioPreparaReg+1,w,c
  2499  0017C4  321A               	rrcf	??_MioPreparaReg+1,f,c
  2500  0017C6  3219               	rrcf	??_MioPreparaReg,f,c
  2501  0017C8  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2502  0017CA  D7FB               	goto	u2085
  2503  0017CC  5019               	movf	??_MioPreparaReg,w,c
  2504  0017CE  0100               	movlb	0	; () banked
  2505  0017D0  6FD3               	movwf	(_MrReg+2)& (0+255),b
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;RutinaModIO15.c: 166: MrReg[3] = (MIOAdcAct[1] >> 4);
  2509  0017D2  EE20  F035         	lfsr	2,_MIOAdcAct+2
  2510  0017D6  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2511  0017DA  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2512  0017DE  0E04               	movlw	4
  2513  0017E0  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2514  0017E2                     u2095:
  2515  0017E2  341A               	rlcf	??_MioPreparaReg+1,w,c
  2516  0017E4  321A               	rrcf	??_MioPreparaReg+1,f,c
  2517  0017E6  3219               	rrcf	??_MioPreparaReg,f,c
  2518  0017E8  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2519  0017EA  D7FB               	goto	u2095
  2520  0017EC  5019               	movf	??_MioPreparaReg,w,c
  2521  0017EE  0100               	movlb	0	; () banked
  2522  0017F0  6FD4               	movwf	(_MrReg+3)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;RutinaModIO15.c: 167: MrReg[4] = MIOAdcAct[2] >> 4;
  2526  0017F2  EE20  F037         	lfsr	2,_MIOAdcAct+4
  2527  0017F6  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2528  0017FA  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2529  0017FE  0E04               	movlw	4
  2530  001800  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2531  001802                     u2105:
  2532  001802  341A               	rlcf	??_MioPreparaReg+1,w,c
  2533  001804  321A               	rrcf	??_MioPreparaReg+1,f,c
  2534  001806  3219               	rrcf	??_MioPreparaReg,f,c
  2535  001808  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2536  00180A  D7FB               	goto	u2105
  2537  00180C  5019               	movf	??_MioPreparaReg,w,c
  2538  00180E  0100               	movlb	0	; () banked
  2539  001810  6FD5               	movwf	(_MrReg+4)& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;RutinaModIO15.c: 168: MrReg[5] = MIOAdcAct[3] >> 4;
  2543  001812  EE20  F039         	lfsr	2,_MIOAdcAct+6
  2544  001816  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2545  00181A  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2546  00181E  0E04               	movlw	4
  2547  001820  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2548  001822                     u2115:
  2549  001822  341A               	rlcf	??_MioPreparaReg+1,w,c
  2550  001824  321A               	rrcf	??_MioPreparaReg+1,f,c
  2551  001826  3219               	rrcf	??_MioPreparaReg,f,c
  2552  001828  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2553  00182A  D7FB               	goto	u2115
  2554  00182C  5019               	movf	??_MioPreparaReg,w,c
  2555  00182E  0100               	movlb	0	; () banked
  2556  001830  6FD6               	movwf	(_MrReg+5)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;RutinaModIO15.c: 170: MrReg[6] = ( ((MIOAdcAct[0] & 0xF) << 4) +
  2560                           ;RutinaModIO15.c: 171: ((MIOAdcAct[1] & 0xF) ) ) & 0xFF;
  2561  001832  C035  F019         	movff	_MIOAdcAct+2,??_MioPreparaReg
  2562  001836  0E0F               	movlw	15
  2563  001838  1619               	andwf	??_MioPreparaReg,f,c
  2564  00183A  C033  F01A         	movff	_MIOAdcAct,??_MioPreparaReg+1
  2565  00183E  0E0F               	movlw	15
  2566  001840  161A               	andwf	??_MioPreparaReg+1,f,c
  2567  001842  381A               	swapf	??_MioPreparaReg+1,w,c
  2568  001844  0BF0               	andlw	240
  2569  001846  2419               	addwf	??_MioPreparaReg,w,c
  2570  001848  0100               	movlb	0	; () banked
  2571  00184A  6FD7               	movwf	(_MrReg+6)& (0+255),b
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;RutinaModIO15.c: 172: MrReg[7] = ( ((MIOAdcAct[2] & 0xF) << 4) +
  2575                           ;RutinaModIO15.c: 173: ((MIOAdcAct[3] & 0xF) ) ) & 0xFF;
  2576  00184C  C039  F019         	movff	_MIOAdcAct+6,??_MioPreparaReg
  2577  001850  0E0F               	movlw	15
  2578  001852  1619               	andwf	??_MioPreparaReg,f,c
  2579  001854  C037  F01A         	movff	_MIOAdcAct+4,??_MioPreparaReg+1
  2580  001858  0E0F               	movlw	15
  2581  00185A  161A               	andwf	??_MioPreparaReg+1,f,c
  2582  00185C  381A               	swapf	??_MioPreparaReg+1,w,c
  2583  00185E  0BF0               	andlw	240
  2584  001860  2419               	addwf	??_MioPreparaReg,w,c
  2585  001862  0100               	movlb	0	; () banked
  2586  001864  6FD8               	movwf	(_MrReg+7)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589  001866  0012               	return		;funcret
  2590  001868                     __end_of_MioPreparaReg:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _MIOAdcAjuste2_5 *****************
  2605 ;; Defined at:
  2606 ;;		line 123 in file "RutinaModIO15.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  k1              4    0[BANK1 ] long 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0
  2621 ;;      Locals:         0       0       4       0       0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2623 ;;      Totals:         0       0       4       0       0       0       0       0       0
  2624 ;;Total ram usage:        4 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    6
  2627 ;; This function calls:
  2628 ;;		_MIOAdcLeido2Act
  2629 ;;		___aldiv
  2630 ;;		___lmul
  2631 ;; This function is called by:
  2632 ;;		_MioCiclo
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text13
  2637  0007BA                     __ptext13:
  2638                           	opt stack 0
  2639  0007BA                     _MIOAdcAjuste2_5:
  2640                           	opt stack 21
  2641                           
  2642                           ;RutinaModIO15.c: 125: long k1=3931;
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;incstack = 0
  2646  0007BA  0E5B               	movlw	91
  2647  0007BC  0101               	movlb	1	; () banked
  2648  0007BE  6F79               	movwf	MIOAdcAjuste2_5@k1& (0+255),b
  2649  0007C0  0E0F               	movlw	15
  2650  0007C2  6F7A               	movwf	(MIOAdcAjuste2_5@k1+1)& (0+255),b
  2651  0007C4  0E00               	movlw	0
  2652  0007C6  6F7B               	movwf	(MIOAdcAjuste2_5@k1+2)& (0+255),b
  2653  0007C8  0E00               	movlw	0
  2654  0007CA  6F7C               	movwf	(MIOAdcAjuste2_5@k1+3)& (0+255),b
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;RutinaModIO15.c: 127: MIOAdcLeido2Act();
  2658  0007CC  ECC5  F012         	call	_MIOAdcLeido2Act	;wreg free
  2659                           
  2660                           ;RutinaModIO15.c: 129: MIOAdcAct[0] = (MIOAdcAct[0]*k1)/1000;
  2661  0007D0  C033  F019         	movff	_MIOAdcAct,___lmul@multiplier
  2662  0007D4  C034  F01A         	movff	_MIOAdcAct+1,___lmul@multiplier+1
  2663  0007D8  0E00               	movlw	0
  2664  0007DA  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2665  0007DC  0EFF               	movlw	-1
  2666  0007DE  6E1B               	movwf	___lmul@multiplier+2,c
  2667  0007E0  6E1C               	movwf	___lmul@multiplier+3,c
  2668  0007E2  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2669  0007E6  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2670  0007EA  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2671  0007EE  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2672  0007F2  ECB5  F00F         	call	___lmul	;wreg free
  2673  0007F6  C019  F025         	movff	?___lmul,___aldiv@dividend
  2674  0007FA  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2675  0007FE  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2676  000802  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2677  000806  0EE8               	movlw	232
  2678  000808  6E29               	movwf	___aldiv@divisor,c
  2679  00080A  0E03               	movlw	3
  2680  00080C  6E2A               	movwf	___aldiv@divisor+1,c
  2681  00080E  0E00               	movlw	0
  2682  000810  6E2B               	movwf	___aldiv@divisor+2,c
  2683  000812  0E00               	movlw	0
  2684  000814  6E2C               	movwf	___aldiv@divisor+3,c
  2685  000816  EC3E  F00A         	call	___aldiv	;wreg free
  2686  00081A  C025  F033         	movff	?___aldiv,_MIOAdcAct
  2687  00081E  C026  F034         	movff	?___aldiv+1,_MIOAdcAct+1
  2688                           
  2689                           ;RutinaModIO15.c: 130: MIOAdcAct[1] = (MIOAdcAct[1]*k1)/1000;
  2690  000822  EE20  F035         	lfsr	2,_MIOAdcAct+2
  2691  000826  CFDE F019          	movff	postinc2,___lmul@multiplier
  2692  00082A  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2693  00082E  0E00               	movlw	0
  2694  000830  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2695  000832  0EFF               	movlw	-1
  2696  000834  6E1B               	movwf	___lmul@multiplier+2,c
  2697  000836  6E1C               	movwf	___lmul@multiplier+3,c
  2698  000838  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2699  00083C  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2700  000840  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2701  000844  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2702  000848  ECB5  F00F         	call	___lmul	;wreg free
  2703  00084C  C019  F025         	movff	?___lmul,___aldiv@dividend
  2704  000850  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2705  000854  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2706  000858  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2707  00085C  0EE8               	movlw	232
  2708  00085E  6E29               	movwf	___aldiv@divisor,c
  2709  000860  0E03               	movlw	3
  2710  000862  6E2A               	movwf	___aldiv@divisor+1,c
  2711  000864  0E00               	movlw	0
  2712  000866  6E2B               	movwf	___aldiv@divisor+2,c
  2713  000868  0E00               	movlw	0
  2714  00086A  6E2C               	movwf	___aldiv@divisor+3,c
  2715  00086C  EC3E  F00A         	call	___aldiv	;wreg free
  2716  000870  C025  F035         	movff	?___aldiv,_MIOAdcAct+2
  2717  000874  C026  F036         	movff	?___aldiv+1,_MIOAdcAct+3
  2718                           
  2719                           ;RutinaModIO15.c: 131: MIOAdcAct[2] = (MIOAdcAct[2]*k1)/1000;
  2720  000878  EE20  F037         	lfsr	2,_MIOAdcAct+4
  2721  00087C  CFDE F019          	movff	postinc2,___lmul@multiplier
  2722  000880  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2723  000884  0E00               	movlw	0
  2724  000886  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2725  000888  0EFF               	movlw	-1
  2726  00088A  6E1B               	movwf	___lmul@multiplier+2,c
  2727  00088C  6E1C               	movwf	___lmul@multiplier+3,c
  2728  00088E  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2729  000892  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2730  000896  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2731  00089A  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2732  00089E  ECB5  F00F         	call	___lmul	;wreg free
  2733  0008A2  C019  F025         	movff	?___lmul,___aldiv@dividend
  2734  0008A6  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2735  0008AA  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2736  0008AE  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2737  0008B2  0EE8               	movlw	232
  2738  0008B4  6E29               	movwf	___aldiv@divisor,c
  2739  0008B6  0E03               	movlw	3
  2740  0008B8  6E2A               	movwf	___aldiv@divisor+1,c
  2741  0008BA  0E00               	movlw	0
  2742  0008BC  6E2B               	movwf	___aldiv@divisor+2,c
  2743  0008BE  0E00               	movlw	0
  2744  0008C0  6E2C               	movwf	___aldiv@divisor+3,c
  2745  0008C2  EC3E  F00A         	call	___aldiv	;wreg free
  2746  0008C6  C025  F037         	movff	?___aldiv,_MIOAdcAct+4
  2747  0008CA  C026  F038         	movff	?___aldiv+1,_MIOAdcAct+5
  2748                           
  2749                           ;RutinaModIO15.c: 132: MIOAdcAct[3] = (MIOAdcAct[3]*k1)/1000;
  2750  0008CE  EE20  F039         	lfsr	2,_MIOAdcAct+6
  2751  0008D2  CFDE F019          	movff	postinc2,___lmul@multiplier
  2752  0008D6  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2753  0008DA  0E00               	movlw	0
  2754  0008DC  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2755  0008DE  0EFF               	movlw	-1
  2756  0008E0  6E1B               	movwf	___lmul@multiplier+2,c
  2757  0008E2  6E1C               	movwf	___lmul@multiplier+3,c
  2758  0008E4  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2759  0008E8  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2760  0008EC  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2761  0008F0  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2762  0008F4  ECB5  F00F         	call	___lmul	;wreg free
  2763  0008F8  C019  F025         	movff	?___lmul,___aldiv@dividend
  2764  0008FC  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2765  000900  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2766  000904  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2767  000908  0EE8               	movlw	232
  2768  00090A  6E29               	movwf	___aldiv@divisor,c
  2769  00090C  0E03               	movlw	3
  2770  00090E  6E2A               	movwf	___aldiv@divisor+1,c
  2771  000910  0E00               	movlw	0
  2772  000912  6E2B               	movwf	___aldiv@divisor+2,c
  2773  000914  0E00               	movlw	0
  2774  000916  6E2C               	movwf	___aldiv@divisor+3,c
  2775  000918  EC3E  F00A         	call	___aldiv	;wreg free
  2776  00091C  C025  F039         	movff	?___aldiv,_MIOAdcAct+6
  2777  000920  C026  F03A         	movff	?___aldiv+1,_MIOAdcAct+7
  2778                           
  2779                           ;RutinaModIO15.c: 134: if (MIOAdcAct[0]>4095){MIOAdcAct[0]=4095;}
  2780  000924  BE34               	btfsc	_MIOAdcAct+1,7,c
  2781  000926  D007               	goto	l5002
  2782  000928  0E10               	movlw	16
  2783  00092A  5C34               	subwf	_MIOAdcAct+1,w,c
  2784  00092C  A0D8               	btfss	status,0,c
  2785  00092E  D003               	goto	l5002
  2786  000930  0E0F               	movlw	15
  2787  000932  6E34               	movwf	_MIOAdcAct+1,c
  2788  000934  6833               	setf	_MIOAdcAct,c
  2789  000936                     l5002:
  2790                           
  2791                           ;RutinaModIO15.c: 135: if (MIOAdcAct[1]>4095){MIOAdcAct[1]=4095;}
  2792  000936  BE36               	btfsc	_MIOAdcAct+3,7,c
  2793  000938  D007               	goto	l5006
  2794  00093A  0E10               	movlw	16
  2795  00093C  5C36               	subwf	_MIOAdcAct+3,w,c
  2796  00093E  A0D8               	btfss	status,0,c
  2797  000940  D003               	goto	l5006
  2798  000942  0E0F               	movlw	15
  2799  000944  6E36               	movwf	_MIOAdcAct+3,c
  2800  000946  6835               	setf	_MIOAdcAct+2,c
  2801  000948                     l5006:
  2802                           
  2803                           ;RutinaModIO15.c: 136: if (MIOAdcAct[2]>4095){MIOAdcAct[2]=4095;}
  2804  000948  BE38               	btfsc	_MIOAdcAct+5,7,c
  2805  00094A  D007               	goto	l5010
  2806  00094C  0E10               	movlw	16
  2807  00094E  5C38               	subwf	_MIOAdcAct+5,w,c
  2808  000950  A0D8               	btfss	status,0,c
  2809  000952  D003               	goto	l5010
  2810  000954  0E0F               	movlw	15
  2811  000956  6E38               	movwf	_MIOAdcAct+5,c
  2812  000958  6837               	setf	_MIOAdcAct+4,c
  2813  00095A                     l5010:
  2814                           
  2815                           ;RutinaModIO15.c: 137: if (MIOAdcAct[3]>4095){MIOAdcAct[3]=4095;}
  2816  00095A  BE3A               	btfsc	_MIOAdcAct+7,7,c
  2817  00095C  0012               	return	
  2818  00095E  0E10               	movlw	16
  2819  000960  5C3A               	subwf	_MIOAdcAct+7,w,c
  2820  000962  A0D8               	btfss	status,0,c
  2821  000964  0012               	return	
  2822  000966  0E0F               	movlw	15
  2823  000968  6E3A               	movwf	_MIOAdcAct+7,c
  2824  00096A  6839               	setf	_MIOAdcAct+6,c
  2825  00096C  0012               	return	
  2826  00096E                     __end_of_MIOAdcAjuste2_5:
  2827                           	opt stack 0
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           postdec1	equ	0xFE5
  2835                           fsr1l	equ	0xFE1
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           status	equ	0xFD8
  2839                           
  2840 ;; *************** function ___lmul *****************
  2841 ;; Defined at:
  2842 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  multiplier      4   24[COMRAM] unsigned long 
  2845 ;;  multiplicand    4   28[COMRAM] unsigned long 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  product         4   32[COMRAM] unsigned long 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  4   24[COMRAM] unsigned long 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2857 ;;      Params:         8       0       0       0       0       0       0       0       0
  2858 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2860 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2861 ;;Total ram usage:       12 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    5
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_MIOAdcAjuste2_5
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text14
  2872  001F6A                     __ptext14:
  2873                           	opt stack 0
  2874  001F6A                     ___lmul:
  2875                           	opt stack 21
  2876                           
  2877                           ;incstack = 0
  2878  001F6A  0E00               	movlw	0
  2879  001F6C  6E21               	movwf	___lmul@product,c
  2880  001F6E  0E00               	movlw	0
  2881  001F70  6E22               	movwf	___lmul@product+1,c
  2882  001F72  0E00               	movlw	0
  2883  001F74  6E23               	movwf	___lmul@product+2,c
  2884  001F76  0E00               	movlw	0
  2885  001F78  6E24               	movwf	___lmul@product+3,c
  2886  001F7A                     l4762:
  2887  001F7A  A019               	btfss	___lmul@multiplier,0,c
  2888  001F7C  D008               	goto	l4766
  2889  001F7E  501D               	movf	___lmul@multiplicand,w,c
  2890  001F80  2621               	addwf	___lmul@product,f,c
  2891  001F82  501E               	movf	___lmul@multiplicand+1,w,c
  2892  001F84  2222               	addwfc	___lmul@product+1,f,c
  2893  001F86  501F               	movf	___lmul@multiplicand+2,w,c
  2894  001F88  2223               	addwfc	___lmul@product+2,f,c
  2895  001F8A  5020               	movf	___lmul@multiplicand+3,w,c
  2896  001F8C  2224               	addwfc	___lmul@product+3,f,c
  2897  001F8E                     l4766:
  2898  001F8E  90D8               	bcf	status,0,c
  2899  001F90  361D               	rlcf	___lmul@multiplicand,f,c
  2900  001F92  361E               	rlcf	___lmul@multiplicand+1,f,c
  2901  001F94  361F               	rlcf	___lmul@multiplicand+2,f,c
  2902  001F96  3620               	rlcf	___lmul@multiplicand+3,f,c
  2903  001F98  90D8               	bcf	status,0,c
  2904  001F9A  321C               	rrcf	___lmul@multiplier+3,f,c
  2905  001F9C  321B               	rrcf	___lmul@multiplier+2,f,c
  2906  001F9E  321A               	rrcf	___lmul@multiplier+1,f,c
  2907  001FA0  3219               	rrcf	___lmul@multiplier,f,c
  2908  001FA2  5019               	movf	___lmul@multiplier,w,c
  2909  001FA4  101A               	iorwf	___lmul@multiplier+1,w,c
  2910  001FA6  101B               	iorwf	___lmul@multiplier+2,w,c
  2911  001FA8  101C               	iorwf	___lmul@multiplier+3,w,c
  2912  001FAA  A4D8               	btfss	status,2,c
  2913  001FAC  D7E6               	goto	l4762
  2914  001FAE  C021  F019         	movff	___lmul@product,?___lmul
  2915  001FB2  C022  F01A         	movff	___lmul@product+1,?___lmul+1
  2916  001FB6  C023  F01B         	movff	___lmul@product+2,?___lmul+2
  2917  001FBA  C024  F01C         	movff	___lmul@product+3,?___lmul+3
  2918  001FBE  0012               	return		;funcret
  2919  001FC0                     __end_of___lmul:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1l	equ	0xFE1
  2929                           postinc2	equ	0xFDE
  2930                           postdec2	equ	0xFDD
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function ___aldiv *****************
  2934 ;; Defined at:
  2935 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  dividend        4   36[COMRAM] long 
  2938 ;;  divisor         4   40[COMRAM] long 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  quotient        4    2[BANK0 ] long 
  2941 ;;  sign            1    1[BANK0 ] unsigned char 
  2942 ;;  counter         1    0[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  4   36[COMRAM] long 
  2945 ;; Registers used:
  2946 ;;		wreg, status,2, status,0
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2952 ;;      Params:         8       0       0       0       0       0       0       0       0
  2953 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2955 ;;      Totals:         8       6       0       0       0       0       0       0       0
  2956 ;;Total ram usage:       14 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    5
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_MIOAdcAjuste2_5
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text15
  2967  00147C                     __ptext15:
  2968                           	opt stack 0
  2969  00147C                     ___aldiv:
  2970                           	opt stack 21
  2971                           
  2972                           ;incstack = 0
  2973  00147C  0E00               	movlw	0
  2974  00147E  0100               	movlb	0	; () banked
  2975  001480  6FF6               	movwf	___aldiv@sign& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978  001482  AE2C               	btfss	___aldiv@divisor+3,7,c
  2979  001484  D00B               	goto	l4778
  2980                           
  2981                           ; BSR set to: 0
  2982  001486  1E2C               	comf	___aldiv@divisor+3,f,c
  2983  001488  1E2B               	comf	___aldiv@divisor+2,f,c
  2984  00148A  1E2A               	comf	___aldiv@divisor+1,f,c
  2985  00148C  6C29               	negf	___aldiv@divisor,c
  2986  00148E  0E00               	movlw	0
  2987  001490  222A               	addwfc	___aldiv@divisor+1,f,c
  2988  001492  222B               	addwfc	___aldiv@divisor+2,f,c
  2989  001494  222C               	addwfc	___aldiv@divisor+3,f,c
  2990                           
  2991                           ; BSR set to: 0
  2992  001496  0E01               	movlw	1
  2993  001498  0100               	movlb	0	; () banked
  2994  00149A  6FF6               	movwf	___aldiv@sign& (0+255),b
  2995  00149C                     l4778:
  2996                           
  2997                           ; BSR set to: 0
  2998  00149C  AE28               	btfss	___aldiv@dividend+3,7,c
  2999  00149E  D00B               	goto	l4784
  3000                           
  3001                           ; BSR set to: 0
  3002  0014A0  1E28               	comf	___aldiv@dividend+3,f,c
  3003  0014A2  1E27               	comf	___aldiv@dividend+2,f,c
  3004  0014A4  1E26               	comf	___aldiv@dividend+1,f,c
  3005  0014A6  6C25               	negf	___aldiv@dividend,c
  3006  0014A8  0E00               	movlw	0
  3007  0014AA  2226               	addwfc	___aldiv@dividend+1,f,c
  3008  0014AC  2227               	addwfc	___aldiv@dividend+2,f,c
  3009  0014AE  2228               	addwfc	___aldiv@dividend+3,f,c
  3010                           
  3011                           ; BSR set to: 0
  3012  0014B0  0E01               	movlw	1
  3013  0014B2  0100               	movlb	0	; () banked
  3014  0014B4  1BF6               	xorwf	___aldiv@sign& (0+255),f,b
  3015  0014B6                     l4784:
  3016                           
  3017                           ; BSR set to: 0
  3018  0014B6  0E00               	movlw	0
  3019  0014B8  0100               	movlb	0	; () banked
  3020  0014BA  6FF7               	movwf	___aldiv@quotient& (0+255),b
  3021  0014BC  0E00               	movlw	0
  3022  0014BE  6FF8               	movwf	(___aldiv@quotient+1)& (0+255),b
  3023  0014C0  0E00               	movlw	0
  3024  0014C2  6FF9               	movwf	(___aldiv@quotient+2)& (0+255),b
  3025  0014C4  0E00               	movlw	0
  3026  0014C6  6FFA               	movwf	(___aldiv@quotient+3)& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029  0014C8  5029               	movf	___aldiv@divisor,w,c
  3030  0014CA  102A               	iorwf	___aldiv@divisor+1,w,c
  3031  0014CC  102B               	iorwf	___aldiv@divisor+2,w,c
  3032  0014CE  102C               	iorwf	___aldiv@divisor+3,w,c
  3033  0014D0  B4D8               	btfsc	status,2,c
  3034  0014D2  D02F               	goto	l4806
  3035                           
  3036                           ; BSR set to: 0
  3037  0014D4  0E01               	movlw	1
  3038  0014D6  0100               	movlb	0	; () banked
  3039  0014D8  6FF5               	movwf	___aldiv@counter& (0+255),b
  3040  0014DA  D007               	goto	l4792
  3041  0014DC                     l4790:
  3042                           
  3043                           ; BSR set to: 0
  3044  0014DC  90D8               	bcf	status,0,c
  3045  0014DE  3629               	rlcf	___aldiv@divisor,f,c
  3046  0014E0  362A               	rlcf	___aldiv@divisor+1,f,c
  3047  0014E2  362B               	rlcf	___aldiv@divisor+2,f,c
  3048  0014E4  362C               	rlcf	___aldiv@divisor+3,f,c
  3049  0014E6  0100               	movlb	0	; () banked
  3050  0014E8  2BF5               	incf	___aldiv@counter& (0+255),f,b
  3051  0014EA                     l4792:
  3052                           
  3053                           ; BSR set to: 0
  3054  0014EA  AE2C               	btfss	___aldiv@divisor+3,7,c
  3055  0014EC  D7F7               	goto	l4790
  3056  0014EE                     l4794:
  3057                           
  3058                           ; BSR set to: 0
  3059  0014EE  0100               	movlb	0	; () banked
  3060  0014F0  90D8               	bcf	status,0,c
  3061  0014F2  37F7               	rlcf	___aldiv@quotient& (0+255),f,b
  3062  0014F4  37F8               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3063  0014F6  37F9               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3064  0014F8  37FA               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3065                           
  3066                           ; BSR set to: 0
  3067  0014FA  5029               	movf	___aldiv@divisor,w,c
  3068  0014FC  5C25               	subwf	___aldiv@dividend,w,c
  3069  0014FE  502A               	movf	___aldiv@divisor+1,w,c
  3070  001500  5826               	subwfb	___aldiv@dividend+1,w,c
  3071  001502  502B               	movf	___aldiv@divisor+2,w,c
  3072  001504  5827               	subwfb	___aldiv@dividend+2,w,c
  3073  001506  502C               	movf	___aldiv@divisor+3,w,c
  3074  001508  5828               	subwfb	___aldiv@dividend+3,w,c
  3075  00150A  A0D8               	btfss	status,0,c
  3076  00150C  D00A               	goto	l4802
  3077                           
  3078                           ; BSR set to: 0
  3079  00150E  5029               	movf	___aldiv@divisor,w,c
  3080  001510  5E25               	subwf	___aldiv@dividend,f,c
  3081  001512  502A               	movf	___aldiv@divisor+1,w,c
  3082  001514  5A26               	subwfb	___aldiv@dividend+1,f,c
  3083  001516  502B               	movf	___aldiv@divisor+2,w,c
  3084  001518  5A27               	subwfb	___aldiv@dividend+2,f,c
  3085  00151A  502C               	movf	___aldiv@divisor+3,w,c
  3086  00151C  5A28               	subwfb	___aldiv@dividend+3,f,c
  3087                           
  3088                           ; BSR set to: 0
  3089  00151E  0100               	movlb	0	; () banked
  3090  001520  81F7               	bsf	___aldiv@quotient& (0+255),0,b
  3091  001522                     l4802:
  3092                           
  3093                           ; BSR set to: 0
  3094  001522  90D8               	bcf	status,0,c
  3095  001524  322C               	rrcf	___aldiv@divisor+3,f,c
  3096  001526  322B               	rrcf	___aldiv@divisor+2,f,c
  3097  001528  322A               	rrcf	___aldiv@divisor+1,f,c
  3098  00152A  3229               	rrcf	___aldiv@divisor,f,c
  3099                           
  3100                           ; BSR set to: 0
  3101  00152C  0100               	movlb	0	; () banked
  3102  00152E  2FF5               	decfsz	___aldiv@counter& (0+255),f,b
  3103  001530  D7DE               	goto	l4794
  3104  001532                     l4806:
  3105                           
  3106                           ; BSR set to: 0
  3107  001532  0100               	movlb	0	; () banked
  3108  001534  51F6               	movf	___aldiv@sign& (0+255),w,b
  3109  001536  0100               	movlb	0	; () banked
  3110  001538  B4D8               	btfsc	status,2,c
  3111  00153A  D009               	goto	l4810
  3112                           
  3113                           ; BSR set to: 0
  3114  00153C  0100               	movlb	0	; () banked
  3115  00153E  1FFA               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3116  001540  1FF9               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3117  001542  1FF8               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3118  001544  6DF7               	negf	___aldiv@quotient& (0+255),b
  3119  001546  0E00               	movlw	0
  3120  001548  23F8               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3121  00154A  23F9               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3122  00154C  23FA               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3123  00154E                     l4810:
  3124                           
  3125                           ; BSR set to: 0
  3126  00154E  C0F7  F025         	movff	___aldiv@quotient,?___aldiv
  3127  001552  C0F8  F026         	movff	___aldiv@quotient+1,?___aldiv+1
  3128  001556  C0F9  F027         	movff	___aldiv@quotient+2,?___aldiv+2
  3129  00155A  C0FA  F028         	movff	___aldiv@quotient+3,?___aldiv+3
  3130  00155E  0012               	return	
  3131  001560                     __end_of___aldiv:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           tblptrl	equ	0xFF6
  3136                           tablat	equ	0xFF5
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1l	equ	0xFE1
  3141                           postinc2	equ	0xFDE
  3142                           postdec2	equ	0xFDD
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _MIOAdcLeido2Act *****************
  3146 ;; Defined at:
  3147 ;;		line 109 in file "RutinaModIO15.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		None
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3164 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3165 ;;Total ram usage:        0 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    5
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_MIOAdcAjuste2_5
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text16
  3176  00258A                     __ptext16:
  3177                           	opt stack 0
  3178  00258A                     _MIOAdcLeido2Act:
  3179                           	opt stack 21
  3180                           
  3181                           ;RutinaModIO15.c: 110: GIE = 0;
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;incstack = 0
  3185  00258A  9EF2               	bcf	intcon,7,c	;volatile
  3186                           
  3187                           ;RutinaModIO15.c: 112: MIOAdcAct[0] = MIOAdcLeido[0];
  3188  00258C  C0DE  F033         	movff	_MIOAdcLeido,_MIOAdcAct
  3189  002590  C0DF  F034         	movff	_MIOAdcLeido+1,_MIOAdcAct+1
  3190                           
  3191                           ;RutinaModIO15.c: 113: MIOAdcAct[1] = MIOAdcLeido[1];
  3192  002594  C0E0  F035         	movff	_MIOAdcLeido+2,_MIOAdcAct+2
  3193  002598  C0E1  F036         	movff	_MIOAdcLeido+3,_MIOAdcAct+3
  3194                           
  3195                           ;RutinaModIO15.c: 114: MIOAdcAct[2] = MIOAdcLeido[2];
  3196  00259C  C0E2  F037         	movff	_MIOAdcLeido+4,_MIOAdcAct+4
  3197  0025A0  C0E3  F038         	movff	_MIOAdcLeido+5,_MIOAdcAct+5
  3198                           
  3199                           ;RutinaModIO15.c: 115: MIOAdcAct[3] = MIOAdcLeido[3];
  3200  0025A4  C0E4  F039         	movff	_MIOAdcLeido+6,_MIOAdcAct+6
  3201  0025A8  C0E5  F03A         	movff	_MIOAdcLeido+7,_MIOAdcAct+7
  3202                           
  3203                           ;RutinaModIO15.c: 118: GIE = 1;
  3204  0025AC  8EF2               	bsf	intcon,7,c	;volatile
  3205  0025AE  0012               	return		;funcret
  3206  0025B0                     __end_of_MIOAdcLeido2Act:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _MstInit *****************
  3222 ;; Defined at:
  3223 ;;		line 40 in file "Maestro21.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0
  3238 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3240 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3241 ;;Total ram usage:        0 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    7
  3244 ;; This function calls:
  3245 ;;		_Delay_ms
  3246 ;;		_LedAmarilloInit
  3247 ;;		_LedParpadea
  3248 ;;		_RsInit
  3249 ;; This function is called by:
  3250 ;;		_MstMain
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text17
  3255  002106                     __ptext17:
  3256                           	opt stack 0
  3257  002106                     _MstInit:
  3258                           	opt stack 22
  3259                           
  3260                           ;Maestro21.c: 41: PORTB = 0;
  3261                           
  3262                           ;incstack = 0
  3263  002106  0E00               	movlw	0
  3264  002108  6E81               	movwf	3969,c	;volatile
  3265                           
  3266                           ;Maestro21.c: 42: TRISB = 0;
  3267  00210A  0E00               	movlw	0
  3268  00210C  6E93               	movwf	3987,c	;volatile
  3269                           
  3270                           ;Maestro21.c: 45: ANSELA = 0;
  3271  00210E  0E00               	movlw	0
  3272  002110  010F               	movlb	15	; () banked
  3273  002112  6F5B               	movwf	91,b	;volatile
  3274                           
  3275                           ;Maestro21.c: 46: ANSELB = 0;
  3276  002114  0E00               	movlw	0
  3277  002116  010F               	movlb	15	; () banked
  3278  002118  6F5C               	movwf	92,b	;volatile
  3279                           
  3280                           ;Maestro21.c: 47: ANSELC = 0;
  3281  00211A  0E00               	movlw	0
  3282  00211C  010F               	movlb	15	; () banked
  3283  00211E  6F5D               	movwf	93,b	;volatile
  3284                           
  3285                           ;Maestro21.c: 49: OSCCON = 0x62;
  3286  002120  0E62               	movlw	98
  3287  002122  6ED3               	movwf	4051,c	;volatile
  3288                           
  3289                           ;Maestro21.c: 50: PR2 = 124;
  3290  002124  0E7C               	movlw	124
  3291  002126  6EBB               	movwf	4027,c	;volatile
  3292                           
  3293                           ;Maestro21.c: 51: T2CON = 6;
  3294  002128  0E06               	movlw	6
  3295  00212A  6EBA               	movwf	4026,c	;volatile
  3296                           
  3297                           ; BSR set to: 15
  3298                           ;Maestro21.c: 53: TMR2IE = 1;
  3299  00212C  829D               	bsf	3997,1,c	;volatile
  3300                           
  3301                           ;Maestro21.c: 54: INTCON = 0xC0;
  3302  00212E  0EC0               	movlw	192
  3303  002130  6EF2               	movwf	intcon,c	;volatile
  3304                           
  3305                           ; BSR set to: 15
  3306                           ;Maestro21.c: 55: LedAmarilloInit ();
  3307  002132  EC4B  F013         	call	_LedAmarilloInit	;wreg free
  3308                           
  3309                           ;Maestro21.c: 56: RsInit(9600);
  3310  002136  0E80               	movlw	128
  3311  002138  6E1D               	movwf	RsInit@Baudrate,c
  3312  00213A  0E25               	movlw	37
  3313  00213C  6E1E               	movwf	RsInit@Baudrate+1,c
  3314  00213E  0E00               	movlw	0
  3315  002140  6E1F               	movwf	RsInit@Baudrate+2,c
  3316  002142  0E00               	movlw	0
  3317  002144  6E20               	movwf	RsInit@Baudrate+3,c
  3318  002146  EC66  F011         	call	_RsInit	;wreg free
  3319                           
  3320                           ;Maestro21.c: 62: if(0){
  3321  00214A  0012               	return	
  3322  00214C                     __end_of_MstInit:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           intcon	equ	0xFF2
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           fsr1l	equ	0xFE1
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           status	equ	0xFD8
  3336                           
  3337 ;; *************** function _RsInit *****************
  3338 ;; Defined at:
  3339 ;;		line 67 in file "RedSerie13.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  Baudrate        4   28[COMRAM] long 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3353 ;;      Params:         4       0       0       0       0       0       0       0       0
  3354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3356 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3357 ;;Total ram usage:        4 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    6
  3360 ;; This function calls:
  3361 ;;		_PsInit
  3362 ;; This function is called by:
  3363 ;;		_MstInit
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text18
  3368  0022CC                     __ptext18:
  3369                           	opt stack 0
  3370  0022CC                     _RsInit:
  3371                           	opt stack 22
  3372                           
  3373                           ;RedSerie13.c: 68: PsInit(Baudrate);
  3374                           
  3375                           ;incstack = 0
  3376  0022CC  C01D  F019         	movff	RsInit@Baudrate,PsInit@Baudrate
  3377  0022D0  C01E  F01A         	movff	RsInit@Baudrate+1,PsInit@Baudrate+1
  3378  0022D4  C01F  F01B         	movff	RsInit@Baudrate+2,PsInit@Baudrate+2
  3379  0022D8  C020  F01C         	movff	RsInit@Baudrate+3,PsInit@Baudrate+3
  3380  0022DC  EC1F  F012         	call	_PsInit	;wreg free
  3381                           
  3382                           ;RedSerie13.c: 69: RsRxCarDobleF = 0;
  3383  0022E0  0E00               	movlw	0
  3384  0022E2  0100               	movlb	0	; () banked
  3385  0022E4  6FAB               	movwf	(_RsRxCarDobleF+1)& (0+255),b
  3386  0022E6  0E00               	movlw	0
  3387  0022E8  6FAA               	movwf	_RsRxCarDobleF& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;RedSerie13.c: 70: RsTxCarDobleF = 0;
  3391  0022EA  0E00               	movlw	0
  3392  0022EC  0100               	movlb	0	; () banked
  3393  0022EE  6FB3               	movwf	(_RsTxCarDobleF+1)& (0+255),b
  3394  0022F0  0E00               	movlw	0
  3395  0022F2  6FB2               	movwf	_RsTxCarDobleF& (0+255),b
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;RedSerie13.c: 71: RsRxRecibioMsgF = 0;
  3399  0022F4  0E00               	movlw	0
  3400  0022F6  0100               	movlb	0	; () banked
  3401  0022F8  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  3402  0022FA  0E00               	movlw	0
  3403  0022FC  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;RedSerie13.c: 72: RsRxIndex = -1;
  3407  0022FE  0100               	movlb	0	; () banked
  3408  002300  69AC               	setf	_RsRxIndex& (0+255),b
  3409  002302  69AD               	setf	(_RsRxIndex+1)& (0+255),b
  3410                           
  3411                           ; BSR set to: 0
  3412  002304  0012               	return		;funcret
  3413  002306                     __end_of_RsInit:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           postdec1	equ	0xFE5
  3423                           fsr1l	equ	0xFE1
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _PsInit *****************
  3429 ;; Defined at:
  3430 ;;		line 56 in file "RedSerie13.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  Baudrate        4   24[COMRAM] long 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3444 ;;      Params:         4       0       0       0       0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3447 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3448 ;;Total ram usage:        4 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    5
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_RsInit
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text19
  3459  00243E                     __ptext19:
  3460                           	opt stack 0
  3461  00243E                     _PsInit:
  3462                           	opt stack 22
  3463                           
  3464                           ;RedSerie13.c: 57: SPBRG = 207;
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;incstack = 0
  3468  00243E  0ECF               	movlw	207
  3469  002440  6EAF               	movwf	4015,c	;volatile
  3470                           
  3471                           ;RedSerie13.c: 58: SPBRGH = 0;
  3472  002442  0E00               	movlw	0
  3473  002444  6EB0               	movwf	4016,c	;volatile
  3474                           
  3475                           ;RedSerie13.c: 59: if (Baudrate == 115200) {SPBRG = 16;}
  3476  002446  0EC2               	movlw	194
  3477  002448  181A               	xorwf	PsInit@Baudrate+1,w,c
  3478  00244A  E107               	bnz	l191
  3479  00244C  041B               	decf	PsInit@Baudrate+2,w,c
  3480  00244E  1019               	iorwf	PsInit@Baudrate,w,c
  3481  002450  101C               	iorwf	PsInit@Baudrate+3,w,c
  3482  002452  A4D8               	btfss	status,2,c
  3483  002454  D002               	goto	l191
  3484  002456  0E10               	movlw	16
  3485  002458  6EAF               	movwf	4015,c	;volatile
  3486  00245A                     l191:
  3487                           
  3488                           ;RedSerie13.c: 60: BAUDCON = 0x0A;
  3489  00245A  0E0A               	movlw	10
  3490  00245C  6EB8               	movwf	4024,c	;volatile
  3491                           
  3492                           ;RedSerie13.c: 61: RCSTA = 0x90;
  3493  00245E  0E90               	movlw	144
  3494  002460  6EAB               	movwf	4011,c	;volatile
  3495                           
  3496                           ;RedSerie13.c: 62: TXSTA = 0x24;
  3497  002462  0E24               	movlw	36
  3498  002464  6EAC               	movwf	4012,c	;volatile
  3499                           
  3500                           ;RedSerie13.c: 63: RCIF = 0;
  3501  002466  9A9E               	bcf	3998,5,c	;volatile
  3502                           
  3503                           ;RedSerie13.c: 64: TXIF = 1;
  3504  002468  889E               	bsf	3998,4,c	;volatile
  3505  00246A  0012               	return		;funcret
  3506  00246C                     __end_of_PsInit:
  3507                           	opt stack 0
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           intcon	equ	0xFF2
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           postinc2	equ	0xFDE
  3518                           postdec2	equ	0xFDD
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _LedParpadea *****************
  3522 ;; Defined at:
  3523 ;;		line 39 in file "PruebaLed20.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  Nveces          2   29[COMRAM] int 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  I               2   32[COMRAM] int 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3537 ;;      Params:         2       0       0       0       0       0       0       0       0
  3538 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3539 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3540 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3541 ;;Total ram usage:        5 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    6
  3544 ;; This function calls:
  3545 ;;		_Delay_ms
  3546 ;; This function is called by:
  3547 ;;		_MstInit
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text20
  3552  001E5A                     __ptext20:
  3553                           	opt stack 0
  3554  001E5A                     _LedParpadea:
  3555                           	opt stack 22
  3556                           
  3557                           ;PruebaLed20.c: 40: int I;
  3558                           ;PruebaLed20.c: 41: INTCON &= 0x7F;;
  3559                           
  3560                           ;incstack = 0
  3561  001E5A  9EF2               	bcf	intcon,7,c	;volatile
  3562                           
  3563                           ;PruebaLed20.c: 42: PORTCbits.RC0 = 0;
  3564  001E5C  9082               	bcf	3970,0,c	;volatile
  3565                           
  3566                           ;PruebaLed20.c: 43: Delay_ms (1000);
  3567  001E5E  0E03               	movlw	3
  3568  001E60  6E1A               	movwf	Delay_ms@delay+1,c
  3569  001E62  0EE8               	movlw	232
  3570  001E64  6E19               	movwf	Delay_ms@delay,c
  3571  001E66  ECD4  F011         	call	_Delay_ms	;wreg free
  3572  001E6A                     l3620:
  3573                           
  3574                           ;PruebaLed20.c: 45: for (I=1; I<=Nveces; I++) {
  3575  001E6A  0E00               	movlw	0
  3576  001E6C  6E22               	movwf	LedParpadea@I+1,c
  3577  001E6E  0E01               	movlw	1
  3578  001E70  6E21               	movwf	LedParpadea@I,c
  3579  001E72  D010               	goto	l3628
  3580  001E74                     l116:
  3581                           
  3582                           ;PruebaLed20.c: 46: PORTCbits.RC0 = 1;
  3583  001E74  8082               	bsf	3970,0,c	;volatile
  3584                           
  3585                           ;PruebaLed20.c: 47: Delay_ms (400);
  3586  001E76  0E01               	movlw	1
  3587  001E78  6E1A               	movwf	Delay_ms@delay+1,c
  3588  001E7A  0E90               	movlw	144
  3589  001E7C  6E19               	movwf	Delay_ms@delay,c
  3590  001E7E  ECD4  F011         	call	_Delay_ms	;wreg free
  3591                           
  3592                           ;PruebaLed20.c: 48: PORTCbits.RC0 = 0;
  3593  001E82  9082               	bcf	3970,0,c	;volatile
  3594                           
  3595                           ;PruebaLed20.c: 49: Delay_ms (400);
  3596  001E84  0E01               	movlw	1
  3597  001E86  6E1A               	movwf	Delay_ms@delay+1,c
  3598  001E88  0E90               	movlw	144
  3599  001E8A  6E19               	movwf	Delay_ms@delay,c
  3600  001E8C  ECD4  F011         	call	_Delay_ms	;wreg free
  3601  001E90  4A21               	infsnz	LedParpadea@I,f,c
  3602  001E92  2A22               	incf	LedParpadea@I+1,f,c
  3603  001E94                     l3628:
  3604  001E94  5021               	movf	LedParpadea@I,w,c
  3605  001E96  5C1E               	subwf	LedParpadea@Nveces,w,c
  3606  001E98  501F               	movf	LedParpadea@Nveces+1,w,c
  3607  001E9A  0A80               	xorlw	128
  3608  001E9C  6E20               	movwf	??_LedParpadea& (0+255),c
  3609  001E9E  5022               	movf	LedParpadea@I+1,w,c
  3610  001EA0  0A80               	xorlw	128
  3611  001EA2  5820               	subwfb	??_LedParpadea& (0+255),w,c
  3612  001EA4  B0D8               	btfsc	status,0,c
  3613  001EA6  D7E6               	goto	l116
  3614                           
  3615                           ;PruebaLed20.c: 50: }
  3616                           ;PruebaLed20.c: 51: Delay_ms (500);
  3617  001EA8  0E01               	movlw	1
  3618  001EAA  6E1A               	movwf	Delay_ms@delay+1,c
  3619  001EAC  0EF4               	movlw	244
  3620  001EAE  6E19               	movwf	Delay_ms@delay,c
  3621  001EB0  ECD4  F011         	call	_Delay_ms	;wreg free
  3622  001EB4  D7DA               	goto	l3620
  3623  001EB6                     __end_of_LedParpadea:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           intcon	equ	0xFF2
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           postdec1	equ	0xFE5
  3633                           fsr1l	equ	0xFE1
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function _Delay_ms *****************
  3639 ;; Defined at:
  3640 ;;		line 56 in file "PruebaLed20.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  delay           2   24[COMRAM] int 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  I               2   27[COMRAM] int 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3654 ;;      Params:         2       0       0       0       0       0       0       0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3656 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3657 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3658 ;;Total ram usage:        5 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    5
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_LedParpadea
  3665 ;;		_MstInit
  3666 ;;		_Ppal_Init
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text21
  3671  0023A8                     __ptext21:
  3672                           	opt stack 0
  3673  0023A8                     _Delay_ms:
  3674                           	opt stack 23
  3675                           
  3676                           ;PruebaLed20.c: 57: int I;
  3677                           ;PruebaLed20.c: 58: for (I=1; I<=delay; I++) { _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); }
  3678                           
  3679                           ;incstack = 0
  3680  0023A8  0E00               	movlw	0
  3681  0023AA  6E1D               	movwf	Delay_ms@I+1,c
  3682  0023AC  0E01               	movlw	1
  3683  0023AE  6E1C               	movwf	Delay_ms@I,c
  3684  0023B0  D009               	goto	l123
  3685  0023B2                     l3376:
  3686  0023B2  0E03               	movlw	3
  3687  0023B4  6E1B               	movwf	??_Delay_ms& (0+255),c
  3688  0023B6  0E98               	movlw	152
  3689  0023B8                     u3617:
  3690  0023B8  2EE8               	decfsz	wreg,f,c
  3691  0023BA  D7FE               	bra	u3617
  3692  0023BC  2E1B               	decfsz	??_Delay_ms& (0+255),f,c
  3693  0023BE  D7FC               	bra	u3617
  3694  0023C0  4A1C               	infsnz	Delay_ms@I,f,c
  3695  0023C2  2A1D               	incf	Delay_ms@I+1,f,c
  3696  0023C4                     l123:
  3697  0023C4  501C               	movf	Delay_ms@I,w,c
  3698  0023C6  5C19               	subwf	Delay_ms@delay,w,c
  3699  0023C8  501A               	movf	Delay_ms@delay+1,w,c
  3700  0023CA  0A80               	xorlw	128
  3701  0023CC  6E1B               	movwf	??_Delay_ms& (0+255),c
  3702  0023CE  501D               	movf	Delay_ms@I+1,w,c
  3703  0023D0  0A80               	xorlw	128
  3704  0023D2  581B               	subwfb	??_Delay_ms& (0+255),w,c
  3705  0023D4  A0D8               	btfss	status,0,c
  3706  0023D6  0012               	return	
  3707  0023D8  D7EC               	goto	l3376
  3708  0023DA                     __end_of_Delay_ms:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           intcon	equ	0xFF2
  3715                           postinc0	equ	0xFEE
  3716                           wreg	equ	0xFE8
  3717                           postdec1	equ	0xFE5
  3718                           fsr1l	equ	0xFE1
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _LedAmarilloInit *****************
  3724 ;; Defined at:
  3725 ;;		line 18 in file "PruebaLed20.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3739 ;;      Params:         0       0       0       0       0       0       0       0       0
  3740 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3742 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3743 ;;Total ram usage:        0 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    5
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_MstInit
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text22
  3754  002696                     __ptext22:
  3755                           	opt stack 0
  3756  002696                     _LedAmarilloInit:
  3757                           	opt stack 23
  3758                           
  3759                           ;PruebaLed20.c: 19: TRISCbits.RC0 = 0;
  3760                           
  3761                           ;incstack = 0
  3762  002696  9094               	bcf	3988,0,c	;volatile
  3763                           
  3764                           ;PruebaLed20.c: 20: LedContMs = 1;
  3765  002698  0E00               	movlw	0
  3766  00269A  0101               	movlb	1	; () banked
  3767  00269C  6F92               	movwf	(_LedContMs+1)& (0+255),b
  3768  00269E  0E01               	movlw	1
  3769  0026A0  6F91               	movwf	_LedContMs& (0+255),b
  3770                           
  3771                           ; BSR set to: 1
  3772  0026A2  0012               	return		;funcret
  3773  0026A4                     __end_of_LedAmarilloInit:
  3774                           	opt stack 0
  3775                           tblptru	equ	0xFF8
  3776                           tblptrh	equ	0xFF7
  3777                           tblptrl	equ	0xFF6
  3778                           tablat	equ	0xFF5
  3779                           intcon	equ	0xFF2
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           fsr1l	equ	0xFE1
  3784                           postinc2	equ	0xFDE
  3785                           postdec2	equ	0xFDD
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _MstCiclo *****************
  3789 ;; Defined at:
  3790 ;;		line 68 in file "Maestro21.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3807 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:   12
  3811 ;; This function calls:
  3812 ;;		_MstRsComando
  3813 ;; This function is called by:
  3814 ;;		_MstMain
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text23
  3819  002684                     __ptext23:
  3820                           	opt stack 0
  3821  002684                     _MstCiclo:
  3822                           	opt stack 17
  3823                           
  3824                           ;Maestro21.c: 75: if (RsRxRecibioMsgF) {MstRsComando();}
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;incstack = 0
  3828  002684  0100               	movlb	0	; () banked
  3829  002686  51AE               	movf	_RsRxRecibioMsgF& (0+255),w,b
  3830  002688  0100               	movlb	0	; () banked
  3831  00268A  11AF               	iorwf	(_RsRxRecibioMsgF+1)& (0+255),w,b
  3832  00268C  B4D8               	btfsc	status,2,c
  3833  00268E  0012               	return	
  3834                           
  3835                           ; BSR set to: 0
  3836  002690  EC9D  F007         	call	_MstRsComando	;wreg free
  3837  002694  0012               	return	
  3838  002696                     __end_of_MstCiclo:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           intcon	equ	0xFF2
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           postdec1	equ	0xFE5
  3848                           fsr1l	equ	0xFE1
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           status	equ	0xFD8
  3852                           
  3853 ;; *************** function _MstRsComando *****************
  3854 ;; Defined at:
  3855 ;;		line 26 in file "RsComando14.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;  Ind             2   17[BANK1 ] unsigned short 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3869 ;;      Params:         0       0       0       0       0       0       0       0       0
  3870 ;;      Locals:         0       0       2       0       0       0       0       0       0
  3871 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3872 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3873 ;;Total ram usage:        5 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:   11
  3876 ;; This function calls:
  3877 ;;		_EscRAM
  3878 ;;		_LeeRAM
  3879 ;;		_Ppal_RsComando
  3880 ;;		_RsTxEnviaMsg
  3881 ;; This function is called by:
  3882 ;;		_MstCiclo
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text24
  3887  000F3A                     __ptext24:
  3888                           	opt stack 0
  3889  000F3A                     _MstRsComando:
  3890                           	opt stack 17
  3891                           
  3892                           ;RsComando14.c: 28: unsigned short Ind;
  3893                           ;RsComando14.c: 29: MonRsCMD = RsRxBuffer [1];
  3894                           
  3895                           ;incstack = 0
  3896  000F3A  C131  F098         	movff	_RsRxBuffer+1,_MonRsCMD
  3897  000F3E  0100               	movlb	0	; () banked
  3898  000F40  6B99               	clrf	(_MonRsCMD+1)& (0+255),b
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;RsComando14.c: 30: RsTxBuffer[0] = 0x02 + 0x80;
  3902  000F42  0E82               	movlw	130
  3903  000F44  0101               	movlb	1	; () banked
  3904  000F46  6F4E               	movwf	_RsTxBuffer& (0+255),b
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;RsComando14.c: 31: RsTxBuffer[1] = MonRsCMD;
  3908  000F48  C098  F14F         	movff	_MonRsCMD,_RsTxBuffer+1
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;RsComando14.c: 33: if ((MonRsCMD >= 0x80)) {
  3912  000F4C  0100               	movlb	0	; () banked
  3913  000F4E  5199               	movf	(_MonRsCMD+1)& (0+255),w,b
  3914  000F50  E105               	bnz	u3370
  3915  000F52  0E80               	movlw	128
  3916  000F54  0100               	movlb	0	; () banked
  3917  000F56  5D98               	subwf	_MonRsCMD& (0+255),w,b
  3918  000F58  A0D8               	btfss	status,0,c
  3919  000F5A  D088               	goto	l5056
  3920  000F5C                     u3370:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;RsComando14.c: 34: MonDir = ((RsRxBuffer[2] * 256) + (RsRxBuffer[3]));
  3924  000F5C  0101               	movlb	1	; () banked
  3925  000F5E  5132               	movf	(_RsRxBuffer+2)& (0+255),w,b
  3926  000F60  0101               	movlb	1	; () banked
  3927  000F62  6F88               	movwf	(??_MstRsComando+1)& (0+255),b
  3928  000F64  6B87               	clrf	??_MstRsComando& (0+255),b
  3929  000F66  0101               	movlb	1	; () banked
  3930  000F68  5133               	movf	(_RsRxBuffer+3)& (0+255),w,b
  3931  000F6A  0101               	movlb	1	; () banked
  3932  000F6C  2587               	addwf	??_MstRsComando& (0+255),w,b
  3933  000F6E  0100               	movlb	0	; () banked
  3934  000F70  6F96               	movwf	_MonDir& (0+255),b
  3935  000F72  0101               	movlb	1	; () banked
  3936  000F74  0E00               	movlw	0
  3937  000F76  0101               	movlb	1	; () banked
  3938  000F78  2188               	addwfc	(??_MstRsComando+1)& (0+255),w,b
  3939  000F7A  0100               	movlb	0	; () banked
  3940  000F7C  6F97               	movwf	(_MonDir+1)& (0+255),b
  3941                           
  3942                           ;RsComando14.c: 35: switch (MonRsCMD) {
  3943  000F7E  D064               	goto	l5054
  3944  000F80                     l5024:
  3945                           
  3946                           ;RsComando14.c: 37: for (Ind = 0; Ind < 8; Ind++) {
  3947  000F80  0E00               	movlw	0
  3948  000F82  0101               	movlb	1	; () banked
  3949  000F84  6F8B               	movwf	(MstRsComando@Ind+1)& (0+255),b
  3950  000F86  0E00               	movlw	0
  3951  000F88  6F8A               	movwf	MstRsComando@Ind& (0+255),b
  3952  000F8A                     l5026:
  3953                           
  3954                           ; BSR set to: 1
  3955  000F8A  0101               	movlb	1	; () banked
  3956  000F8C  518B               	movf	(MstRsComando@Ind+1)& (0+255),w,b
  3957  000F8E  E12B               	bnz	l5036
  3958  000F90  0E08               	movlw	8
  3959  000F92  0101               	movlb	1	; () banked
  3960  000F94  5D8A               	subwf	MstRsComando@Ind& (0+255),w,b
  3961  000F96  B0D8               	btfsc	status,0,c
  3962  000F98  D026               	goto	l5036
  3963                           
  3964                           ; BSR set to: 1
  3965                           ;RsComando14.c: 38: RsTxBuffer[2 + Ind] = LeeRAM(MonDir + Ind);
  3966                           
  3967                           ; BSR set to: 1
  3968                           
  3969                           ; BSR set to: 1
  3970  000F9A  0101               	movlb	1	; () banked
  3971  000F9C  518A               	movf	MstRsComando@Ind& (0+255),w,b
  3972  000F9E  0100               	movlb	0	; () banked
  3973  000FA0  2596               	addwf	_MonDir& (0+255),w,b
  3974  000FA2  6E23               	movwf	LeeRAM@Dir,c
  3975  000FA4  0101               	movlb	1	; () banked
  3976  000FA6  518B               	movf	(MstRsComando@Ind+1)& (0+255),w,b
  3977  000FA8  0100               	movlb	0	; () banked
  3978  000FAA  2197               	addwfc	(_MonDir+1)& (0+255),w,b
  3979  000FAC  6E24               	movwf	LeeRAM@Dir+1,c
  3980  000FAE  EC9E  F012         	call	_LeeRAM	;wreg free
  3981  000FB2  0101               	movlb	1	; () banked
  3982  000FB4  6F87               	movwf	??_MstRsComando& (0+255),b
  3983  000FB6  0E02               	movlw	2
  3984  000FB8  0101               	movlb	1	; () banked
  3985  000FBA  258A               	addwf	MstRsComando@Ind& (0+255),w,b
  3986  000FBC  0101               	movlb	1	; () banked
  3987  000FBE  6F88               	movwf	(??_MstRsComando+1)& (0+255),b
  3988  000FC0  0E00               	movlw	0
  3989  000FC2  0101               	movlb	1	; () banked
  3990  000FC4  218B               	addwfc	(MstRsComando@Ind+1)& (0+255),w,b
  3991  000FC6  0101               	movlb	1	; () banked
  3992  000FC8  6F89               	movwf	(??_MstRsComando+2)& (0+255),b
  3993  000FCA  0E4E               	movlw	low _RsTxBuffer
  3994  000FCC  0101               	movlb	1	; () banked
  3995  000FCE  2588               	addwf	(??_MstRsComando+1)& (0+255),w,b
  3996  000FD0  6ED9               	movwf	fsr2l,c
  3997  000FD2  0E01               	movlw	high _RsTxBuffer
  3998  000FD4  0101               	movlb	1	; () banked
  3999  000FD6  2189               	addwfc	(??_MstRsComando+2)& (0+255),w,b
  4000  000FD8  6EDA               	movwf	fsr2h,c
  4001  000FDA  C187  FFDF         	movff	??_MstRsComando,indf2
  4002                           
  4003                           ; BSR set to: 1
  4004  000FDE  0101               	movlb	1	; () banked
  4005  000FE0  4B8A               	infsnz	MstRsComando@Ind& (0+255),f,b
  4006  000FE2  2B8B               	incf	(MstRsComando@Ind+1)& (0+255),f,b
  4007  000FE4  D7D2               	goto	l5026
  4008  000FE6                     l5036:
  4009                           
  4010                           ; BSR set to: 1
  4011                           ;RsComando14.c: 39: }
  4012                           ;RsComando14.c: 41: RsTxEnviaMsg(10);
  4013  000FE6  0E00               	movlw	0
  4014  000FE8  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4015  000FEA  0E0A               	movlw	10
  4016  000FEC  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4017  000FEE  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4018                           
  4019                           ;RsComando14.c: 42: RsRxRecibioMsgF = 0;
  4020  000FF2  0E00               	movlw	0
  4021  000FF4  0100               	movlb	0	; () banked
  4022  000FF6  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4023  000FF8  0E00               	movlw	0
  4024  000FFA  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  4025                           
  4026                           ;RsComando14.c: 43: break;
  4027  000FFC  0012               	return	
  4028  000FFE                     l5040:
  4029                           
  4030                           ;RsComando14.c: 46: EscRAM(MonDir, &RsRxBuffer[4]);
  4031  000FFE  C096  F023         	movff	_MonDir,EscRAM@Dir
  4032  001002  C097  F024         	movff	_MonDir+1,EscRAM@Dir+1
  4033  001006  0E34               	movlw	low (_RsRxBuffer+4)
  4034  001008  6E25               	movwf	EscRAM@Car2P,c
  4035  00100A  0E01               	movlw	high (_RsRxBuffer+4)
  4036  00100C  6E26               	movwf	EscRAM@Car2P+1,c
  4037  00100E  ECD8  F012         	call	_EscRAM	;wreg free
  4038                           
  4039                           ;RsComando14.c: 47: RsTxEnviaMsg(2);
  4040  001012  0E00               	movlw	0
  4041  001014  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4042  001016  0E02               	movlw	2
  4043  001018  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4044  00101A  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4045                           
  4046                           ;RsComando14.c: 48: RsRxRecibioMsgF = 0;
  4047  00101E  0E00               	movlw	0
  4048  001020  0100               	movlb	0	; () banked
  4049  001022  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4050  001024  0E00               	movlw	0
  4051  001026  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  4052                           
  4053                           ;RsComando14.c: 49: break;
  4054  001028  0012               	return	
  4055  00102A                     l5046:
  4056                           
  4057                           ;RsComando14.c: 111: RsTxBuffer[2] = 0xE0;
  4058  00102A  0EE0               	movlw	224
  4059  00102C  0101               	movlb	1	; () banked
  4060  00102E  6F50               	movwf	(_RsTxBuffer+2)& (0+255),b
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;RsComando14.c: 112: RsTxEnviaMsg(3);
  4064  001030  0E00               	movlw	0
  4065  001032  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4066  001034  0E03               	movlw	3
  4067  001036  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4068  001038  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4069                           
  4070                           ;RsComando14.c: 113: RsRxRecibioMsgF = 0;
  4071  00103C  0E00               	movlw	0
  4072  00103E  0100               	movlb	0	; () banked
  4073  001040  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4074  001042  0E00               	movlw	0
  4075  001044  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;RsComando14.c: 115: }
  4079                           
  4080                           ;RsComando14.c: 114: break;
  4081  001046  0012               	return	
  4082  001048                     l5054:
  4083                           
  4084                           ; BSR set to: 0
  4085  001048  C098  F187         	movff	_MonRsCMD,??_MstRsComando
  4086  00104C  C099  F188         	movff	_MonRsCMD+1,??_MstRsComando+1
  4087                           
  4088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4089                           ; Switch size 1, requested type "space"
  4090                           ; Number of cases is 1, Range of values is 0 to 0
  4091                           ; switch strategies available:
  4092                           ; Name         Instructions Cycles
  4093                           ; simple_byte            4     3 (average)
  4094                           ;	Chosen strategy is simple_byte
  4095  001050  0101               	movlb	1	; () banked
  4096  001052  5188               	movf	(??_MstRsComando+1)& (0+255),w,b
  4097  001054  0A00               	xorlw	0	; case 0
  4098  001056  A4D8               	btfss	status,2,c
  4099  001058  D7E8               	goto	l5046
  4100                           
  4101                           ; BSR set to: 1
  4102                           ; Switch size 1, requested type "space"
  4103                           ; Number of cases is 2, Range of values is 128 to 129
  4104                           ; switch strategies available:
  4105                           ; Name         Instructions Cycles
  4106                           ; simple_byte            7     4 (average)
  4107                           ;	Chosen strategy is simple_byte
  4108  00105A  0101               	movlb	1	; () banked
  4109  00105C  5187               	movf	??_MstRsComando& (0+255),w,b
  4110  00105E  0A80               	xorlw	128	; case 128
  4111  001060  B4D8               	btfsc	status,2,c
  4112  001062  D78E               	goto	l5024
  4113  001064  0A01               	xorlw	1	; case 129
  4114  001066  B4D8               	btfsc	status,2,c
  4115  001068  D7CA               	goto	l5040
  4116  00106A  D7DF               	goto	l5046
  4117  00106C                     l5056:
  4118                           
  4119                           ;RsComando14.c: 117: else {
  4120                           ;RsComando14.c: 118: Ppal_RsComando();
  4121  00106C  EC4C  F000         	call	_Ppal_RsComando	;wreg free
  4122  001070  0012               	return	
  4123  001072                     __end_of_MstRsComando:
  4124                           	opt stack 0
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           intcon	equ	0xFF2
  4130                           postinc0	equ	0xFEE
  4131                           wreg	equ	0xFE8
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _Ppal_RsComando *****************
  4142 ;; Defined at:
  4143 ;;		line 176 in file "ModIO24.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  ind             2   12[BANK1 ] unsigned short 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0
  4158 ;;      Locals:         0       0       2       0       0       0       0       0       0
  4159 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4160 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4161 ;;Total ram usage:        4 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:   10
  4164 ;; This function calls:
  4165 ;;		_MrAgregaReg
  4166 ;;		_MrAnt
  4167 ;;		_MrFormat
  4168 ;;		_MrInit
  4169 ;;		_MrLeeReg
  4170 ;;		_MrSgte
  4171 ;;		_MrUlt
  4172 ;;		_MseEsc
  4173 ;;		_MseLee
  4174 ;;		_RsTxEnviaMsg
  4175 ;;		_RtcEsc
  4176 ;;		_RtcLee
  4177 ;;		_memcpy
  4178 ;; This function is called by:
  4179 ;;		_MstRsComando
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text25
  4184  000098                     __ptext25:
  4185                           	opt stack 0
  4186  000098                     _Ppal_RsComando:
  4187                           	opt stack 17
  4188                           
  4189                           ;ModIO24.c: 178: PpalRsCMD = RsRxBuffer [1];
  4190                           
  4191                           ;incstack = 0
  4192  000098  C131  F0A4         	movff	_RsRxBuffer+1,_PpalRsCMD
  4193  00009C  0100               	movlb	0	; () banked
  4194  00009E  6BA5               	clrf	(_PpalRsCMD+1)& (0+255),b
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;ModIO24.c: 179: RsRxRecibioMsgF = 0;
  4198  0000A0  0E00               	movlw	0
  4199  0000A2  0100               	movlb	0	; () banked
  4200  0000A4  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4201  0000A6  0E00               	movlw	0
  4202  0000A8  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;ModIO24.c: 181: MonDir = ((RsRxBuffer[2] * 256) + (RsRxBuffer[3]));
  4206  0000AA  0101               	movlb	1	; () banked
  4207  0000AC  5132               	movf	(_RsRxBuffer+2)& (0+255),w,b
  4208  0000AE  0101               	movlb	1	; () banked
  4209  0000B0  6F84               	movwf	(??_Ppal_RsComando+1)& (0+255),b
  4210  0000B2  6B83               	clrf	??_Ppal_RsComando& (0+255),b
  4211  0000B4  0101               	movlb	1	; () banked
  4212  0000B6  5133               	movf	(_RsRxBuffer+3)& (0+255),w,b
  4213  0000B8  0101               	movlb	1	; () banked
  4214  0000BA  2583               	addwf	??_Ppal_RsComando& (0+255),w,b
  4215  0000BC  0100               	movlb	0	; () banked
  4216  0000BE  6F96               	movwf	_MonDir& (0+255),b
  4217  0000C0  0101               	movlb	1	; () banked
  4218  0000C2  0E00               	movlw	0
  4219  0000C4  0101               	movlb	1	; () banked
  4220  0000C6  2184               	addwfc	(??_Ppal_RsComando+1)& (0+255),w,b
  4221  0000C8  0100               	movlb	0	; () banked
  4222  0000CA  6F97               	movwf	(_MonDir+1)& (0+255),b
  4223                           
  4224                           ;ModIO24.c: 182: switch (MonRsCMD) {
  4225  0000CC  D32E               	goto	l4978
  4226  0000CE                     l4834:
  4227                           
  4228                           ;ModIO24.c: 184: RsTxBuffer [2] = ((0x0824 >> 8) & (0xFF));
  4229  0000CE  0E08               	movlw	8
  4230  0000D0  0101               	movlb	1	; () banked
  4231  0000D2  6F50               	movwf	(_RsTxBuffer+2)& (0+255),b
  4232                           
  4233                           ;ModIO24.c: 185: unsigned short ind = (0x0824 & (0x00FF));
  4234  0000D4  0E00               	movlw	0
  4235  0000D6  0101               	movlb	1	; () banked
  4236  0000D8  6F86               	movwf	(Ppal_RsComando@ind+1)& (0+255),b
  4237  0000DA  0E24               	movlw	36
  4238  0000DC  6F85               	movwf	Ppal_RsComando@ind& (0+255),b
  4239                           
  4240                           ; BSR set to: 1
  4241                           ;ModIO24.c: 186: RsTxBuffer [3] = ind;
  4242  0000DE  C185  F151         	movff	Ppal_RsComando@ind,_RsTxBuffer+3
  4243                           
  4244                           ; BSR set to: 1
  4245                           ;ModIO24.c: 188: RsTxEnviaMsg(4);
  4246  0000E2  0E00               	movlw	0
  4247  0000E4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4248  0000E6  0E04               	movlw	4
  4249  0000E8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4250  0000EA  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4251                           
  4252                           ;ModIO24.c: 189: break;
  4253  0000EE  0012               	return	
  4254  0000F0                     l588:
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;ModIO24.c: 192: GIE = 0;;
  4258  0000F0  9EF2               	bcf	intcon,7,c	;volatile
  4259                           
  4260                           ; BSR set to: 1
  4261                           ;ModIO24.c: 193: memcpy (&(RsTxBuffer [2]), &(MIOAdcLeido[0]), 2);
  4262  0000F2  0E50               	movlw	low (_RsTxBuffer+2)
  4263  0000F4  6E19               	movwf	memcpy@d1,c
  4264  0000F6  0E01               	movlw	high (_RsTxBuffer+2)
  4265  0000F8  6E1A               	movwf	memcpy@d1+1,c
  4266  0000FA  0EDE               	movlw	low _MIOAdcLeido
  4267  0000FC  6E1B               	movwf	memcpy@s1,c
  4268  0000FE  0E00               	movlw	high _MIOAdcLeido
  4269  000100  6E1C               	movwf	memcpy@s1+1,c
  4270  000102  0E00               	movlw	0
  4271  000104  6E1E               	movwf	memcpy@n+1,c
  4272  000106  0E02               	movlw	2
  4273  000108  6E1D               	movwf	memcpy@n,c
  4274  00010A  ECE9  F010         	call	_memcpy	;wreg free
  4275                           
  4276                           ;ModIO24.c: 194: memcpy (&(RsTxBuffer [4]), &(MIOAdcLeido[1]), 2);
  4277  00010E  0E52               	movlw	low (_RsTxBuffer+4)
  4278  000110  6E19               	movwf	memcpy@d1,c
  4279  000112  0E01               	movlw	high (_RsTxBuffer+4)
  4280  000114  6E1A               	movwf	memcpy@d1+1,c
  4281  000116  0EE0               	movlw	low (_MIOAdcLeido+2)
  4282  000118  6E1B               	movwf	memcpy@s1,c
  4283  00011A  0E00               	movlw	high (_MIOAdcLeido+2)
  4284  00011C  6E1C               	movwf	memcpy@s1+1,c
  4285  00011E  0E00               	movlw	0
  4286  000120  6E1E               	movwf	memcpy@n+1,c
  4287  000122  0E02               	movlw	2
  4288  000124  6E1D               	movwf	memcpy@n,c
  4289  000126  ECE9  F010         	call	_memcpy	;wreg free
  4290                           
  4291                           ;ModIO24.c: 195: memcpy (&(RsTxBuffer [6]), &(MIOAdcLeido[2]), 2);
  4292  00012A  0E54               	movlw	low (_RsTxBuffer+6)
  4293  00012C  6E19               	movwf	memcpy@d1,c
  4294  00012E  0E01               	movlw	high (_RsTxBuffer+6)
  4295  000130  6E1A               	movwf	memcpy@d1+1,c
  4296  000132  0EE2               	movlw	low (_MIOAdcLeido+4)
  4297  000134  6E1B               	movwf	memcpy@s1,c
  4298  000136  0E00               	movlw	high (_MIOAdcLeido+4)
  4299  000138  6E1C               	movwf	memcpy@s1+1,c
  4300  00013A  0E00               	movlw	0
  4301  00013C  6E1E               	movwf	memcpy@n+1,c
  4302  00013E  0E02               	movlw	2
  4303  000140  6E1D               	movwf	memcpy@n,c
  4304  000142  ECE9  F010         	call	_memcpy	;wreg free
  4305                           
  4306                           ;ModIO24.c: 196: memcpy (&(RsTxBuffer [8]), &(MIOAdcLeido[3]), 2);
  4307  000146  0E56               	movlw	low (_RsTxBuffer+8)
  4308  000148  6E19               	movwf	memcpy@d1,c
  4309  00014A  0E01               	movlw	high (_RsTxBuffer+8)
  4310  00014C  6E1A               	movwf	memcpy@d1+1,c
  4311  00014E  0EE4               	movlw	low (_MIOAdcLeido+6)
  4312  000150  6E1B               	movwf	memcpy@s1,c
  4313  000152  0E00               	movlw	high (_MIOAdcLeido+6)
  4314  000154  6E1C               	movwf	memcpy@s1+1,c
  4315  000156  0E00               	movlw	0
  4316  000158  6E1E               	movwf	memcpy@n+1,c
  4317  00015A  0E02               	movlw	2
  4318  00015C  6E1D               	movwf	memcpy@n,c
  4319  00015E  ECE9  F010         	call	_memcpy	;wreg free
  4320                           
  4321                           ;ModIO24.c: 198: GIE = 1;;
  4322  000162  8EF2               	bsf	intcon,7,c	;volatile
  4323                           
  4324                           ;ModIO24.c: 199: RsTxEnviaMsg(10);
  4325  000164  0E00               	movlw	0
  4326  000166  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4327  000168  0E0A               	movlw	10
  4328  00016A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4329  00016C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4330                           
  4331                           ;ModIO24.c: 201: break;
  4332  000170  0012               	return	
  4333  000172                     l4846:
  4334                           
  4335                           ;ModIO24.c: 223: RtcLee ();
  4336  000172  ECB0  F00A         	call	_RtcLee	;wreg free
  4337                           
  4338                           ;ModIO24.c: 224: memcpy(&RsTxBuffer[2],RtcFechaHora, 7);
  4339  000176  0E50               	movlw	low (_RsTxBuffer+2)
  4340  000178  6E19               	movwf	memcpy@d1,c
  4341  00017A  0E01               	movlw	high (_RsTxBuffer+2)
  4342  00017C  6E1A               	movwf	memcpy@d1+1,c
  4343  00017E  0EE8               	movlw	low _RtcFechaHora
  4344  000180  6E1B               	movwf	memcpy@s1,c
  4345  000182  0E00               	movlw	high _RtcFechaHora
  4346  000184  6E1C               	movwf	memcpy@s1+1,c
  4347  000186  0E00               	movlw	0
  4348  000188  6E1E               	movwf	memcpy@n+1,c
  4349  00018A  0E07               	movlw	7
  4350  00018C  6E1D               	movwf	memcpy@n,c
  4351  00018E  ECE9  F010         	call	_memcpy	;wreg free
  4352                           
  4353                           ;ModIO24.c: 226: RsTxEnviaMsg(9);
  4354  000192  0E00               	movlw	0
  4355  000194  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4356  000196  0E09               	movlw	9
  4357  000198  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4358  00019A  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4359                           
  4360                           ;ModIO24.c: 227: break;
  4361  00019E  0012               	return	
  4362  0001A0                     l4852:
  4363                           
  4364                           ;ModIO24.c: 229: memcpy(RtcFechaHora, &RsRxBuffer[2], 7);
  4365  0001A0  0EE8               	movlw	low _RtcFechaHora
  4366  0001A2  6E19               	movwf	memcpy@d1,c
  4367  0001A4  0E00               	movlw	high _RtcFechaHora
  4368  0001A6  6E1A               	movwf	memcpy@d1+1,c
  4369  0001A8  0E32               	movlw	low (_RsRxBuffer+2)
  4370  0001AA  6E1B               	movwf	memcpy@s1,c
  4371  0001AC  0E01               	movlw	high (_RsRxBuffer+2)
  4372  0001AE  6E1C               	movwf	memcpy@s1+1,c
  4373  0001B0  0E00               	movlw	0
  4374  0001B2  6E1E               	movwf	memcpy@n+1,c
  4375  0001B4  0E07               	movlw	7
  4376  0001B6  6E1D               	movwf	memcpy@n,c
  4377  0001B8  ECE9  F010         	call	_memcpy	;wreg free
  4378                           
  4379                           ;ModIO24.c: 230: RtcEsc ();
  4380  0001BC  EC7C  F00B         	call	_RtcEsc	;wreg free
  4381                           
  4382                           ;ModIO24.c: 231: RsTxEnviaMsg(2);
  4383  0001C0  0E00               	movlw	0
  4384  0001C2  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4385  0001C4  0E02               	movlw	2
  4386  0001C6  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4387  0001C8  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4388                           
  4389                           ;ModIO24.c: 232: break;
  4390  0001CC  0012               	return	
  4391  0001CE                     l4858:
  4392                           
  4393                           ;ModIO24.c: 235: MrFormat();
  4394  0001CE  EC34  F00C         	call	_MrFormat	;wreg free
  4395                           
  4396                           ;ModIO24.c: 236: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4397  0001D2  0E50               	movlw	low (_RsTxBuffer+2)
  4398  0001D4  6E19               	movwf	memcpy@d1,c
  4399  0001D6  0E01               	movlw	high (_RsTxBuffer+2)
  4400  0001D8  6E1A               	movwf	memcpy@d1+1,c
  4401  0001DA  0E41               	movlw	low _MrDirV
  4402  0001DC  6E1B               	movwf	memcpy@s1,c
  4403  0001DE  0E00               	movlw	high _MrDirV
  4404  0001E0  6E1C               	movwf	memcpy@s1+1,c
  4405  0001E2  0E00               	movlw	0
  4406  0001E4  6E1E               	movwf	memcpy@n+1,c
  4407  0001E6  0E02               	movlw	2
  4408  0001E8  6E1D               	movwf	memcpy@n,c
  4409  0001EA  ECE9  F010         	call	_memcpy	;wreg free
  4410                           
  4411                           ;ModIO24.c: 237: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4412  0001EE  0E52               	movlw	low (_RsTxBuffer+4)
  4413  0001F0  6E19               	movwf	memcpy@d1,c
  4414  0001F2  0E01               	movlw	high (_RsTxBuffer+4)
  4415  0001F4  6E1A               	movwf	memcpy@d1+1,c
  4416  0001F6  0E43               	movlw	low _MrUltV
  4417  0001F8  6E1B               	movwf	memcpy@s1,c
  4418  0001FA  0E00               	movlw	high _MrUltV
  4419  0001FC  6E1C               	movwf	memcpy@s1+1,c
  4420  0001FE  0E00               	movlw	0
  4421  000200  6E1E               	movwf	memcpy@n+1,c
  4422  000202  0E02               	movlw	2
  4423  000204  6E1D               	movwf	memcpy@n,c
  4424  000206  ECE9  F010         	call	_memcpy	;wreg free
  4425                           
  4426                           ;ModIO24.c: 238: RsTxEnviaMsg(6);
  4427  00020A  0E00               	movlw	0
  4428  00020C  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4429  00020E  0E06               	movlw	6
  4430  000210  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4431  000212  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4432                           
  4433                           ;ModIO24.c: 239: break;
  4434  000216  0012               	return	
  4435  000218                     l4866:
  4436                           
  4437                           ;ModIO24.c: 241: MrInit();
  4438  000218  ECF9  F006         	call	_MrInit	;wreg free
  4439                           
  4440                           ;ModIO24.c: 242: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4441  00021C  0E50               	movlw	low (_RsTxBuffer+2)
  4442  00021E  6E19               	movwf	memcpy@d1,c
  4443  000220  0E01               	movlw	high (_RsTxBuffer+2)
  4444  000222  6E1A               	movwf	memcpy@d1+1,c
  4445  000224  0E41               	movlw	low _MrDirV
  4446  000226  6E1B               	movwf	memcpy@s1,c
  4447  000228  0E00               	movlw	high _MrDirV
  4448  00022A  6E1C               	movwf	memcpy@s1+1,c
  4449  00022C  0E00               	movlw	0
  4450  00022E  6E1E               	movwf	memcpy@n+1,c
  4451  000230  0E02               	movlw	2
  4452  000232  6E1D               	movwf	memcpy@n,c
  4453  000234  ECE9  F010         	call	_memcpy	;wreg free
  4454                           
  4455                           ;ModIO24.c: 243: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4456  000238  0E52               	movlw	low (_RsTxBuffer+4)
  4457  00023A  6E19               	movwf	memcpy@d1,c
  4458  00023C  0E01               	movlw	high (_RsTxBuffer+4)
  4459  00023E  6E1A               	movwf	memcpy@d1+1,c
  4460  000240  0E43               	movlw	low _MrUltV
  4461  000242  6E1B               	movwf	memcpy@s1,c
  4462  000244  0E00               	movlw	high _MrUltV
  4463  000246  6E1C               	movwf	memcpy@s1+1,c
  4464  000248  0E00               	movlw	0
  4465  00024A  6E1E               	movwf	memcpy@n+1,c
  4466  00024C  0E02               	movlw	2
  4467  00024E  6E1D               	movwf	memcpy@n,c
  4468  000250  ECE9  F010         	call	_memcpy	;wreg free
  4469                           
  4470                           ;ModIO24.c: 244: RsTxEnviaMsg(6);
  4471  000254  0E00               	movlw	0
  4472  000256  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4473  000258  0E06               	movlw	6
  4474  00025A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4475  00025C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4476                           
  4477                           ;ModIO24.c: 245: break;
  4478  000260  0012               	return	
  4479  000262                     l4870:
  4480                           
  4481                           ;ModIO24.c: 247: memcpy(&MrReg[2], &RsRxBuffer[2], 8 - 2);
  4482  000262  0ED3               	movlw	low (_MrReg+2)
  4483  000264  6E19               	movwf	memcpy@d1,c
  4484  000266  0E00               	movlw	high (_MrReg+2)
  4485  000268  6E1A               	movwf	memcpy@d1+1,c
  4486  00026A  0E32               	movlw	low (_RsRxBuffer+2)
  4487  00026C  6E1B               	movwf	memcpy@s1,c
  4488  00026E  0E01               	movlw	high (_RsRxBuffer+2)
  4489  000270  6E1C               	movwf	memcpy@s1+1,c
  4490  000272  0E00               	movlw	0
  4491  000274  6E1E               	movwf	memcpy@n+1,c
  4492  000276  0E06               	movlw	6
  4493  000278  6E1D               	movwf	memcpy@n,c
  4494  00027A  ECE9  F010         	call	_memcpy	;wreg free
  4495                           
  4496                           ;ModIO24.c: 248: MrAgregaReg();
  4497  00027E  EC47  F006         	call	_MrAgregaReg	;wreg free
  4498                           
  4499                           ;ModIO24.c: 249: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4500  000282  0E50               	movlw	low (_RsTxBuffer+2)
  4501  000284  6E19               	movwf	memcpy@d1,c
  4502  000286  0E01               	movlw	high (_RsTxBuffer+2)
  4503  000288  6E1A               	movwf	memcpy@d1+1,c
  4504  00028A  0ED1               	movlw	low _MrReg
  4505  00028C  6E1B               	movwf	memcpy@s1,c
  4506  00028E  0E00               	movlw	high _MrReg
  4507  000290  6E1C               	movwf	memcpy@s1+1,c
  4508  000292  0E00               	movlw	0
  4509  000294  6E1E               	movwf	memcpy@n+1,c
  4510  000296  0E08               	movlw	8
  4511  000298  6E1D               	movwf	memcpy@n,c
  4512  00029A  ECE9  F010         	call	_memcpy	;wreg free
  4513                           
  4514                           ;ModIO24.c: 250: memcpy(&RsTxBuffer[2+8], &RtcFechaHora[0], 6);
  4515  00029E  0E58               	movlw	low (_RsTxBuffer+10)
  4516  0002A0  6E19               	movwf	memcpy@d1,c
  4517  0002A2  0E01               	movlw	high (_RsTxBuffer+10)
  4518  0002A4  6E1A               	movwf	memcpy@d1+1,c
  4519  0002A6  0EE8               	movlw	low _RtcFechaHora
  4520  0002A8  6E1B               	movwf	memcpy@s1,c
  4521  0002AA  0E00               	movlw	high _RtcFechaHora
  4522  0002AC  6E1C               	movwf	memcpy@s1+1,c
  4523  0002AE  0E00               	movlw	0
  4524  0002B0  6E1E               	movwf	memcpy@n+1,c
  4525  0002B2  0E06               	movlw	6
  4526  0002B4  6E1D               	movwf	memcpy@n,c
  4527  0002B6  ECE9  F010         	call	_memcpy	;wreg free
  4528                           
  4529                           ;ModIO24.c: 251: memcpy(&RsTxBuffer[8+8], &MrDirV, 2);
  4530  0002BA  0E5E               	movlw	low (_RsTxBuffer+16)
  4531  0002BC  6E19               	movwf	memcpy@d1,c
  4532  0002BE  0E01               	movlw	high (_RsTxBuffer+16)
  4533  0002C0  6E1A               	movwf	memcpy@d1+1,c
  4534  0002C2  0E41               	movlw	low _MrDirV
  4535  0002C4  6E1B               	movwf	memcpy@s1,c
  4536  0002C6  0E00               	movlw	high _MrDirV
  4537  0002C8  6E1C               	movwf	memcpy@s1+1,c
  4538  0002CA  0E00               	movlw	0
  4539  0002CC  6E1E               	movwf	memcpy@n+1,c
  4540  0002CE  0E02               	movlw	2
  4541  0002D0  6E1D               	movwf	memcpy@n,c
  4542  0002D2  ECE9  F010         	call	_memcpy	;wreg free
  4543                           
  4544                           ;ModIO24.c: 252: memcpy(&RsTxBuffer[10+8], &MrUltV, 2);
  4545  0002D6  0E60               	movlw	low (_RsTxBuffer+18)
  4546  0002D8  6E19               	movwf	memcpy@d1,c
  4547  0002DA  0E01               	movlw	high (_RsTxBuffer+18)
  4548  0002DC  6E1A               	movwf	memcpy@d1+1,c
  4549  0002DE  0E43               	movlw	low _MrUltV
  4550  0002E0  6E1B               	movwf	memcpy@s1,c
  4551  0002E2  0E00               	movlw	high _MrUltV
  4552  0002E4  6E1C               	movwf	memcpy@s1+1,c
  4553  0002E6  0E00               	movlw	0
  4554  0002E8  6E1E               	movwf	memcpy@n+1,c
  4555  0002EA  0E02               	movlw	2
  4556  0002EC  6E1D               	movwf	memcpy@n,c
  4557  0002EE  ECE9  F010         	call	_memcpy	;wreg free
  4558                           
  4559                           ;ModIO24.c: 253: RsTxEnviaMsg(12 + 8);
  4560  0002F2  0E00               	movlw	0
  4561  0002F4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4562  0002F6  0E14               	movlw	20
  4563  0002F8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4564  0002FA  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4565                           
  4566                           ;ModIO24.c: 254: break;
  4567  0002FE  0012               	return	
  4568  000300                     l4884:
  4569                           
  4570                           ;ModIO24.c: 256: MrLeeReg();
  4571  000300  ECFD  F012         	call	_MrLeeReg	;wreg free
  4572                           
  4573                           ;ModIO24.c: 257: MrAnt();
  4574  000304  EC38  F013         	call	_MrAnt	;wreg free
  4575                           
  4576                           ;ModIO24.c: 258: MrSgte();
  4577  000308  EC2D  F013         	call	_MrSgte	;wreg free
  4578                           
  4579                           ;ModIO24.c: 259: MrLeeReg();
  4580  00030C  ECFD  F012         	call	_MrLeeReg	;wreg free
  4581                           
  4582                           ;ModIO24.c: 260: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4583  000310  0E50               	movlw	low (_RsTxBuffer+2)
  4584  000312  6E19               	movwf	memcpy@d1,c
  4585  000314  0E01               	movlw	high (_RsTxBuffer+2)
  4586  000316  6E1A               	movwf	memcpy@d1+1,c
  4587  000318  0ED1               	movlw	low _MrReg
  4588  00031A  6E1B               	movwf	memcpy@s1,c
  4589  00031C  0E00               	movlw	high _MrReg
  4590  00031E  6E1C               	movwf	memcpy@s1+1,c
  4591  000320  0E00               	movlw	0
  4592  000322  6E1E               	movwf	memcpy@n+1,c
  4593  000324  0E08               	movlw	8
  4594  000326  6E1D               	movwf	memcpy@n,c
  4595  000328  ECE9  F010         	call	_memcpy	;wreg free
  4596                           
  4597                           ;ModIO24.c: 261: memcpy(&RsTxBuffer[2+8], &MrDirV, 2);
  4598  00032C  0E58               	movlw	low (_RsTxBuffer+10)
  4599  00032E  6E19               	movwf	memcpy@d1,c
  4600  000330  0E01               	movlw	high (_RsTxBuffer+10)
  4601  000332  6E1A               	movwf	memcpy@d1+1,c
  4602  000334  0E41               	movlw	low _MrDirV
  4603  000336  6E1B               	movwf	memcpy@s1,c
  4604  000338  0E00               	movlw	high _MrDirV
  4605  00033A  6E1C               	movwf	memcpy@s1+1,c
  4606  00033C  0E00               	movlw	0
  4607  00033E  6E1E               	movwf	memcpy@n+1,c
  4608  000340  0E02               	movlw	2
  4609  000342  6E1D               	movwf	memcpy@n,c
  4610  000344  ECE9  F010         	call	_memcpy	;wreg free
  4611                           
  4612                           ;ModIO24.c: 262: memcpy(&RsTxBuffer[4+8], &MrUltV, 2);
  4613  000348  0E5A               	movlw	low (_RsTxBuffer+12)
  4614  00034A  6E19               	movwf	memcpy@d1,c
  4615  00034C  0E01               	movlw	high (_RsTxBuffer+12)
  4616  00034E  6E1A               	movwf	memcpy@d1+1,c
  4617  000350  0E43               	movlw	low _MrUltV
  4618  000352  6E1B               	movwf	memcpy@s1,c
  4619  000354  0E00               	movlw	high _MrUltV
  4620  000356  6E1C               	movwf	memcpy@s1+1,c
  4621  000358  0E00               	movlw	0
  4622  00035A  6E1E               	movwf	memcpy@n+1,c
  4623  00035C  0E02               	movlw	2
  4624  00035E  6E1D               	movwf	memcpy@n,c
  4625  000360  ECE9  F010         	call	_memcpy	;wreg free
  4626                           
  4627                           ;ModIO24.c: 263: RsTxEnviaMsg(6 + 8);
  4628  000364  0E00               	movlw	0
  4629  000366  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4630  000368  0E0E               	movlw	14
  4631  00036A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4632  00036C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4633                           
  4634                           ;ModIO24.c: 264: break;
  4635  000370  0012               	return	
  4636  000372                     l4898:
  4637                           
  4638                           ;ModIO24.c: 266: MrUlt();
  4639  000372  EC59  F013         	call	_MrUlt	;wreg free
  4640                           
  4641                           ;ModIO24.c: 267: memcpy(&RsTxBuffer[2], &MrFecha12Ult, 3);
  4642  000376  0E50               	movlw	low (_RsTxBuffer+2)
  4643  000378  6E19               	movwf	memcpy@d1,c
  4644  00037A  0E01               	movlw	high (_RsTxBuffer+2)
  4645  00037C  6E1A               	movwf	memcpy@d1+1,c
  4646  00037E  0EEF               	movlw	low _MrFecha12Ult
  4647  000380  6E1B               	movwf	memcpy@s1,c
  4648  000382  0E00               	movlw	high _MrFecha12Ult
  4649  000384  6E1C               	movwf	memcpy@s1+1,c
  4650  000386  0E00               	movlw	0
  4651  000388  6E1E               	movwf	memcpy@n+1,c
  4652  00038A  0E03               	movlw	3
  4653  00038C  6E1D               	movwf	memcpy@n,c
  4654  00038E  ECE9  F010         	call	_memcpy	;wreg free
  4655                           
  4656                           ;ModIO24.c: 268: memcpy(&RsTxBuffer[5], &MrDirV, 2);
  4657  000392  0E53               	movlw	low (_RsTxBuffer+5)
  4658  000394  6E19               	movwf	memcpy@d1,c
  4659  000396  0E01               	movlw	high (_RsTxBuffer+5)
  4660  000398  6E1A               	movwf	memcpy@d1+1,c
  4661  00039A  0E41               	movlw	low _MrDirV
  4662  00039C  6E1B               	movwf	memcpy@s1,c
  4663  00039E  0E00               	movlw	high _MrDirV
  4664  0003A0  6E1C               	movwf	memcpy@s1+1,c
  4665  0003A2  0E00               	movlw	0
  4666  0003A4  6E1E               	movwf	memcpy@n+1,c
  4667  0003A6  0E02               	movlw	2
  4668  0003A8  6E1D               	movwf	memcpy@n,c
  4669  0003AA  ECE9  F010         	call	_memcpy	;wreg free
  4670                           
  4671                           ;ModIO24.c: 269: memcpy(&RsTxBuffer[7], &MrUltV, 2);
  4672  0003AE  0E55               	movlw	low (_RsTxBuffer+7)
  4673  0003B0  6E19               	movwf	memcpy@d1,c
  4674  0003B2  0E01               	movlw	high (_RsTxBuffer+7)
  4675  0003B4  6E1A               	movwf	memcpy@d1+1,c
  4676  0003B6  0E43               	movlw	low _MrUltV
  4677  0003B8  6E1B               	movwf	memcpy@s1,c
  4678  0003BA  0E00               	movlw	high _MrUltV
  4679  0003BC  6E1C               	movwf	memcpy@s1+1,c
  4680  0003BE  0E00               	movlw	0
  4681  0003C0  6E1E               	movwf	memcpy@n+1,c
  4682  0003C2  0E02               	movlw	2
  4683  0003C4  6E1D               	movwf	memcpy@n,c
  4684  0003C6  ECE9  F010         	call	_memcpy	;wreg free
  4685                           
  4686                           ;ModIO24.c: 270: RsTxEnviaMsg(9);
  4687  0003CA  0E00               	movlw	0
  4688  0003CC  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4689  0003CE  0E09               	movlw	9
  4690  0003D0  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4691  0003D2  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4692                           
  4693                           ;ModIO24.c: 271: break;
  4694  0003D6  0012               	return	
  4695  0003D8                     l4908:
  4696                           
  4697                           ;ModIO24.c: 273: MrSgte();
  4698  0003D8  EC2D  F013         	call	_MrSgte	;wreg free
  4699                           
  4700                           ;ModIO24.c: 274: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4701  0003DC  0E50               	movlw	low (_RsTxBuffer+2)
  4702  0003DE  6E19               	movwf	memcpy@d1,c
  4703  0003E0  0E01               	movlw	high (_RsTxBuffer+2)
  4704  0003E2  6E1A               	movwf	memcpy@d1+1,c
  4705  0003E4  0E41               	movlw	low _MrDirV
  4706  0003E6  6E1B               	movwf	memcpy@s1,c
  4707  0003E8  0E00               	movlw	high _MrDirV
  4708  0003EA  6E1C               	movwf	memcpy@s1+1,c
  4709  0003EC  0E00               	movlw	0
  4710  0003EE  6E1E               	movwf	memcpy@n+1,c
  4711  0003F0  0E02               	movlw	2
  4712  0003F2  6E1D               	movwf	memcpy@n,c
  4713  0003F4  ECE9  F010         	call	_memcpy	;wreg free
  4714                           
  4715                           ;ModIO24.c: 275: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4716  0003F8  0E52               	movlw	low (_RsTxBuffer+4)
  4717  0003FA  6E19               	movwf	memcpy@d1,c
  4718  0003FC  0E01               	movlw	high (_RsTxBuffer+4)
  4719  0003FE  6E1A               	movwf	memcpy@d1+1,c
  4720  000400  0E43               	movlw	low _MrUltV
  4721  000402  6E1B               	movwf	memcpy@s1,c
  4722  000404  0E00               	movlw	high _MrUltV
  4723  000406  6E1C               	movwf	memcpy@s1+1,c
  4724  000408  0E00               	movlw	0
  4725  00040A  6E1E               	movwf	memcpy@n+1,c
  4726  00040C  0E02               	movlw	2
  4727  00040E  6E1D               	movwf	memcpy@n,c
  4728  000410  ECE9  F010         	call	_memcpy	;wreg free
  4729                           
  4730                           ;ModIO24.c: 276: RsTxEnviaMsg(6);
  4731  000414  0E00               	movlw	0
  4732  000416  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4733  000418  0E06               	movlw	6
  4734  00041A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4735  00041C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4736                           
  4737                           ;ModIO24.c: 277: break;
  4738  000420  0012               	return	
  4739  000422                     l4916:
  4740                           
  4741                           ;ModIO24.c: 279: MrAnt();
  4742  000422  EC38  F013         	call	_MrAnt	;wreg free
  4743                           
  4744                           ;ModIO24.c: 280: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4745  000426  0E50               	movlw	low (_RsTxBuffer+2)
  4746  000428  6E19               	movwf	memcpy@d1,c
  4747  00042A  0E01               	movlw	high (_RsTxBuffer+2)
  4748  00042C  6E1A               	movwf	memcpy@d1+1,c
  4749  00042E  0E41               	movlw	low _MrDirV
  4750  000430  6E1B               	movwf	memcpy@s1,c
  4751  000432  0E00               	movlw	high _MrDirV
  4752  000434  6E1C               	movwf	memcpy@s1+1,c
  4753  000436  0E00               	movlw	0
  4754  000438  6E1E               	movwf	memcpy@n+1,c
  4755  00043A  0E02               	movlw	2
  4756  00043C  6E1D               	movwf	memcpy@n,c
  4757  00043E  ECE9  F010         	call	_memcpy	;wreg free
  4758                           
  4759                           ;ModIO24.c: 281: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4760  000442  0E52               	movlw	low (_RsTxBuffer+4)
  4761  000444  6E19               	movwf	memcpy@d1,c
  4762  000446  0E01               	movlw	high (_RsTxBuffer+4)
  4763  000448  6E1A               	movwf	memcpy@d1+1,c
  4764  00044A  0E43               	movlw	low _MrUltV
  4765  00044C  6E1B               	movwf	memcpy@s1,c
  4766  00044E  0E00               	movlw	high _MrUltV
  4767  000450  6E1C               	movwf	memcpy@s1+1,c
  4768  000452  0E00               	movlw	0
  4769  000454  6E1E               	movwf	memcpy@n+1,c
  4770  000456  0E02               	movlw	2
  4771  000458  6E1D               	movwf	memcpy@n,c
  4772  00045A  ECE9  F010         	call	_memcpy	;wreg free
  4773                           
  4774                           ;ModIO24.c: 282: RsTxEnviaMsg(6);
  4775  00045E  0E00               	movlw	0
  4776  000460  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4777  000462  0E06               	movlw	6
  4778  000464  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4779  000466  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4780                           
  4781                           ;ModIO24.c: 283: break;
  4782  00046A  0012               	return	
  4783  00046C                     l4924:
  4784                           
  4785                           ;ModIO24.c: 285: memcpy(&MrDirV, &RsRxBuffer[2], 2);
  4786  00046C  0E41               	movlw	low _MrDirV
  4787  00046E  6E19               	movwf	memcpy@d1,c
  4788  000470  0E00               	movlw	high _MrDirV
  4789  000472  6E1A               	movwf	memcpy@d1+1,c
  4790  000474  0E32               	movlw	low (_RsRxBuffer+2)
  4791  000476  6E1B               	movwf	memcpy@s1,c
  4792  000478  0E01               	movlw	high (_RsRxBuffer+2)
  4793  00047A  6E1C               	movwf	memcpy@s1+1,c
  4794  00047C  0E00               	movlw	0
  4795  00047E  6E1E               	movwf	memcpy@n+1,c
  4796  000480  0E02               	movlw	2
  4797  000482  6E1D               	movwf	memcpy@n,c
  4798  000484  ECE9  F010         	call	_memcpy	;wreg free
  4799                           
  4800                           ;ModIO24.c: 286: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4801  000488  0E50               	movlw	low (_RsTxBuffer+2)
  4802  00048A  6E19               	movwf	memcpy@d1,c
  4803  00048C  0E01               	movlw	high (_RsTxBuffer+2)
  4804  00048E  6E1A               	movwf	memcpy@d1+1,c
  4805  000490  0E41               	movlw	low _MrDirV
  4806  000492  6E1B               	movwf	memcpy@s1,c
  4807  000494  0E00               	movlw	high _MrDirV
  4808  000496  6E1C               	movwf	memcpy@s1+1,c
  4809  000498  0E00               	movlw	0
  4810  00049A  6E1E               	movwf	memcpy@n+1,c
  4811  00049C  0E02               	movlw	2
  4812  00049E  6E1D               	movwf	memcpy@n,c
  4813  0004A0  ECE9  F010         	call	_memcpy	;wreg free
  4814                           
  4815                           ;ModIO24.c: 287: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4816  0004A4  0E52               	movlw	low (_RsTxBuffer+4)
  4817  0004A6  6E19               	movwf	memcpy@d1,c
  4818  0004A8  0E01               	movlw	high (_RsTxBuffer+4)
  4819  0004AA  6E1A               	movwf	memcpy@d1+1,c
  4820  0004AC  0E43               	movlw	low _MrUltV
  4821  0004AE  6E1B               	movwf	memcpy@s1,c
  4822  0004B0  0E00               	movlw	high _MrUltV
  4823  0004B2  6E1C               	movwf	memcpy@s1+1,c
  4824  0004B4  0E00               	movlw	0
  4825  0004B6  6E1E               	movwf	memcpy@n+1,c
  4826  0004B8  0E02               	movlw	2
  4827  0004BA  6E1D               	movwf	memcpy@n,c
  4828  0004BC  ECE9  F010         	call	_memcpy	;wreg free
  4829                           
  4830                           ;ModIO24.c: 288: RsTxEnviaMsg(6);
  4831  0004C0  0E00               	movlw	0
  4832  0004C2  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4833  0004C4  0E06               	movlw	6
  4834  0004C6  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4835  0004C8  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4836                           
  4837                           ;ModIO24.c: 289: break;
  4838  0004CC  0012               	return	
  4839  0004CE                     l4928:
  4840                           
  4841                           ;ModIO24.c: 291: MrAnt();
  4842  0004CE  EC38  F013         	call	_MrAnt	;wreg free
  4843                           
  4844                           ;ModIO24.c: 292: MrLeeReg();
  4845  0004D2  ECFD  F012         	call	_MrLeeReg	;wreg free
  4846                           
  4847                           ;ModIO24.c: 293: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4848  0004D6  0E50               	movlw	low (_RsTxBuffer+2)
  4849  0004D8  6E19               	movwf	memcpy@d1,c
  4850  0004DA  0E01               	movlw	high (_RsTxBuffer+2)
  4851  0004DC  6E1A               	movwf	memcpy@d1+1,c
  4852  0004DE  0ED1               	movlw	low _MrReg
  4853  0004E0  6E1B               	movwf	memcpy@s1,c
  4854  0004E2  0E00               	movlw	high _MrReg
  4855  0004E4  6E1C               	movwf	memcpy@s1+1,c
  4856  0004E6  0E00               	movlw	0
  4857  0004E8  6E1E               	movwf	memcpy@n+1,c
  4858  0004EA  0E08               	movlw	8
  4859  0004EC  6E1D               	movwf	memcpy@n,c
  4860  0004EE  ECE9  F010         	call	_memcpy	;wreg free
  4861                           
  4862                           ;ModIO24.c: 294: memcpy(&RsTxBuffer[2+8], &MrDirV, 2);
  4863  0004F2  0E58               	movlw	low (_RsTxBuffer+10)
  4864  0004F4  6E19               	movwf	memcpy@d1,c
  4865  0004F6  0E01               	movlw	high (_RsTxBuffer+10)
  4866  0004F8  6E1A               	movwf	memcpy@d1+1,c
  4867  0004FA  0E41               	movlw	low _MrDirV
  4868  0004FC  6E1B               	movwf	memcpy@s1,c
  4869  0004FE  0E00               	movlw	high _MrDirV
  4870  000500  6E1C               	movwf	memcpy@s1+1,c
  4871  000502  0E00               	movlw	0
  4872  000504  6E1E               	movwf	memcpy@n+1,c
  4873  000506  0E02               	movlw	2
  4874  000508  6E1D               	movwf	memcpy@n,c
  4875  00050A  ECE9  F010         	call	_memcpy	;wreg free
  4876                           
  4877                           ;ModIO24.c: 295: memcpy(&RsTxBuffer[4+8], &MrUltV, 2);
  4878  00050E  0E5A               	movlw	low (_RsTxBuffer+12)
  4879  000510  6E19               	movwf	memcpy@d1,c
  4880  000512  0E01               	movlw	high (_RsTxBuffer+12)
  4881  000514  6E1A               	movwf	memcpy@d1+1,c
  4882  000516  0E43               	movlw	low _MrUltV
  4883  000518  6E1B               	movwf	memcpy@s1,c
  4884  00051A  0E00               	movlw	high _MrUltV
  4885  00051C  6E1C               	movwf	memcpy@s1+1,c
  4886  00051E  0E00               	movlw	0
  4887  000520  6E1E               	movwf	memcpy@n+1,c
  4888  000522  0E02               	movlw	2
  4889  000524  6E1D               	movwf	memcpy@n,c
  4890  000526  ECE9  F010         	call	_memcpy	;wreg free
  4891                           
  4892                           ;ModIO24.c: 296: RsTxEnviaMsg(6 + 8);
  4893  00052A  0E00               	movlw	0
  4894  00052C  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4895  00052E  0E0E               	movlw	14
  4896  000530  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4897  000532  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4898                           
  4899                           ;ModIO24.c: 297: break;
  4900  000536  0012               	return	
  4901  000538                     l4940:
  4902                           
  4903                           ;ModIO24.c: 300: MseLee (MonDir, &RsTxBuffer[2], 8);
  4904  000538  C096  F029         	movff	_MonDir,MseLee@Dir
  4905  00053C  C097  F02A         	movff	_MonDir+1,MseLee@Dir+1
  4906  000540  0E50               	movlw	low (_RsTxBuffer+2)
  4907  000542  6E2B               	movwf	MseLee@Datos,c
  4908  000544  0E01               	movlw	high (_RsTxBuffer+2)
  4909  000546  6E2C               	movwf	MseLee@Datos+1,c
  4910  000548  0E00               	movlw	0
  4911  00054A  6E2E               	movwf	MseLee@NBytes+1,c
  4912  00054C  0E08               	movlw	8
  4913  00054E  6E2D               	movwf	MseLee@NBytes,c
  4914  000550  EC88  F005         	call	_MseLee	;wreg free
  4915                           
  4916                           ;ModIO24.c: 301: RsTxEnviaMsg(10);
  4917  000554  0E00               	movlw	0
  4918  000556  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4919  000558  0E0A               	movlw	10
  4920  00055A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4921  00055C  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4922                           
  4923                           ;ModIO24.c: 302: break;
  4924  000560  0012               	return	
  4925  000562                     l4942:
  4926                           
  4927                           ;ModIO24.c: 305: MseEsc(MonDir, &RsRxBuffer[4], 1);
  4928  000562  C096  F029         	movff	_MonDir,MseEsc@Dir
  4929  000566  C097  F02A         	movff	_MonDir+1,MseEsc@Dir+1
  4930  00056A  0E34               	movlw	low (_RsRxBuffer+4)
  4931  00056C  6E2B               	movwf	MseEsc@Datos,c
  4932  00056E  0E01               	movlw	high (_RsRxBuffer+4)
  4933  000570  6E2C               	movwf	MseEsc@Datos+1,c
  4934  000572  0E00               	movlw	0
  4935  000574  6E2E               	movwf	MseEsc@NBytes+1,c
  4936  000576  0E01               	movlw	1
  4937  000578  6E2D               	movwf	MseEsc@NBytes,c
  4938  00057A  EC39  F008         	call	_MseEsc	;wreg free
  4939                           
  4940                           ;ModIO24.c: 306: RsTxEnviaMsg(2);
  4941  00057E  0E00               	movlw	0
  4942  000580  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4943  000582  0E02               	movlw	2
  4944  000584  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4945  000586  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4946                           
  4947                           ;ModIO24.c: 307: break;
  4948  00058A  0012               	return	
  4949  00058C                     l4944:
  4950                           
  4951                           ;ModIO24.c: 316: MioCicloHabilitado=0;
  4952  00058C  0E00               	movlw	0
  4953  00058E  0100               	movlb	0	; () banked
  4954  000590  6F95               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  4955  000592  0E00               	movlw	0
  4956  000594  6F94               	movwf	_MioCicloHabilitado& (0+255),b
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;ModIO24.c: 318: memcpy(&RsTxBuffer[2],RtcFechaHora, 7);
  4960  000596  0E50               	movlw	low (_RsTxBuffer+2)
  4961  000598  6E19               	movwf	memcpy@d1,c
  4962  00059A  0E01               	movlw	high (_RsTxBuffer+2)
  4963  00059C  6E1A               	movwf	memcpy@d1+1,c
  4964  00059E  0EE8               	movlw	low _RtcFechaHora
  4965  0005A0  6E1B               	movwf	memcpy@s1,c
  4966  0005A2  0E00               	movlw	high _RtcFechaHora
  4967  0005A4  6E1C               	movwf	memcpy@s1+1,c
  4968  0005A6  0E00               	movlw	0
  4969  0005A8  6E1E               	movwf	memcpy@n+1,c
  4970  0005AA  0E07               	movlw	7
  4971  0005AC  6E1D               	movwf	memcpy@n,c
  4972  0005AE  ECE9  F010         	call	_memcpy	;wreg free
  4973                           
  4974                           ;ModIO24.c: 319: RsTxEnviaMsg(9);
  4975  0005B2  0E00               	movlw	0
  4976  0005B4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4977  0005B6  0E09               	movlw	9
  4978  0005B8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4979  0005BA  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  4980                           
  4981                           ;ModIO24.c: 320: break;
  4982  0005BE  0012               	return	
  4983  0005C0                     l4950:
  4984                           
  4985                           ;ModIO24.c: 324: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4986  0005C0  0E50               	movlw	low (_RsTxBuffer+2)
  4987  0005C2  6E19               	movwf	memcpy@d1,c
  4988  0005C4  0E01               	movlw	high (_RsTxBuffer+2)
  4989  0005C6  6E1A               	movwf	memcpy@d1+1,c
  4990  0005C8  0ED1               	movlw	low _MrReg
  4991  0005CA  6E1B               	movwf	memcpy@s1,c
  4992  0005CC  0E00               	movlw	high _MrReg
  4993  0005CE  6E1C               	movwf	memcpy@s1+1,c
  4994  0005D0  0E00               	movlw	0
  4995  0005D2  6E1E               	movwf	memcpy@n+1,c
  4996  0005D4  0E08               	movlw	8
  4997  0005D6  6E1D               	movwf	memcpy@n,c
  4998  0005D8  ECE9  F010         	call	_memcpy	;wreg free
  4999                           
  5000                           ;ModIO24.c: 325: memcpy(&RsTxBuffer[2+8], &RtcFechaHora[0], 6);
  5001  0005DC  0E58               	movlw	low (_RsTxBuffer+10)
  5002  0005DE  6E19               	movwf	memcpy@d1,c
  5003  0005E0  0E01               	movlw	high (_RsTxBuffer+10)
  5004  0005E2  6E1A               	movwf	memcpy@d1+1,c
  5005  0005E4  0EE8               	movlw	low _RtcFechaHora
  5006  0005E6  6E1B               	movwf	memcpy@s1,c
  5007  0005E8  0E00               	movlw	high _RtcFechaHora
  5008  0005EA  6E1C               	movwf	memcpy@s1+1,c
  5009  0005EC  0E00               	movlw	0
  5010  0005EE  6E1E               	movwf	memcpy@n+1,c
  5011  0005F0  0E06               	movlw	6
  5012  0005F2  6E1D               	movwf	memcpy@n,c
  5013  0005F4  ECE9  F010         	call	_memcpy	;wreg free
  5014                           
  5015                           ;ModIO24.c: 326: memcpy(&RsTxBuffer[8+8], &MrDirV, 2);
  5016  0005F8  0E5E               	movlw	low (_RsTxBuffer+16)
  5017  0005FA  6E19               	movwf	memcpy@d1,c
  5018  0005FC  0E01               	movlw	high (_RsTxBuffer+16)
  5019  0005FE  6E1A               	movwf	memcpy@d1+1,c
  5020  000600  0E41               	movlw	low _MrDirV
  5021  000602  6E1B               	movwf	memcpy@s1,c
  5022  000604  0E00               	movlw	high _MrDirV
  5023  000606  6E1C               	movwf	memcpy@s1+1,c
  5024  000608  0E00               	movlw	0
  5025  00060A  6E1E               	movwf	memcpy@n+1,c
  5026  00060C  0E02               	movlw	2
  5027  00060E  6E1D               	movwf	memcpy@n,c
  5028  000610  ECE9  F010         	call	_memcpy	;wreg free
  5029                           
  5030                           ;ModIO24.c: 327: memcpy(&RsTxBuffer[10+8], &MrUltV, 2);
  5031  000614  0E60               	movlw	low (_RsTxBuffer+18)
  5032  000616  6E19               	movwf	memcpy@d1,c
  5033  000618  0E01               	movlw	high (_RsTxBuffer+18)
  5034  00061A  6E1A               	movwf	memcpy@d1+1,c
  5035  00061C  0E43               	movlw	low _MrUltV
  5036  00061E  6E1B               	movwf	memcpy@s1,c
  5037  000620  0E00               	movlw	high _MrUltV
  5038  000622  6E1C               	movwf	memcpy@s1+1,c
  5039  000624  0E00               	movlw	0
  5040  000626  6E1E               	movwf	memcpy@n+1,c
  5041  000628  0E02               	movlw	2
  5042  00062A  6E1D               	movwf	memcpy@n,c
  5043  00062C  ECE9  F010         	call	_memcpy	;wreg free
  5044                           
  5045                           ;ModIO24.c: 328: RsTxEnviaMsg(12 + 8);
  5046  000630  0E00               	movlw	0
  5047  000632  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5048  000634  0E14               	movlw	20
  5049  000636  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5050  000638  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  5051                           
  5052                           ;ModIO24.c: 329: break;
  5053  00063C  0012               	return	
  5054  00063E                     l4954:
  5055                           
  5056                           ;ModIO24.c: 337: MioCicloHabilitado=1;
  5057  00063E  0E00               	movlw	0
  5058  000640  0100               	movlb	0	; () banked
  5059  000642  6F95               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  5060  000644  0E01               	movlw	1
  5061  000646  6F94               	movwf	_MioCicloHabilitado& (0+255),b
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;ModIO24.c: 338: RsTxEnviaMsg(2);
  5065  000648  0E00               	movlw	0
  5066  00064A  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5067  00064C  0E02               	movlw	2
  5068  00064E  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5069  000650  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  5070                           
  5071                           ;ModIO24.c: 339: break;
  5072  000654  0012               	return	
  5073  000656                     l4958:
  5074                           
  5075                           ;ModIO24.c: 347: MseUltDirLeido += 8;
  5076  000656  0E08               	movlw	8
  5077  000658  0100               	movlb	0	; () banked
  5078  00065A  27A0               	addwf	_MseUltDirLeido& (0+255),f,b
  5079  00065C  0E00               	movlw	0
  5080  00065E  23A1               	addwfc	(_MseUltDirLeido+1)& (0+255),f,b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;ModIO24.c: 348: MseLee (MseUltDirLeido, &RsTxBuffer[2], 8);
  5084  000660  C0A0  F029         	movff	_MseUltDirLeido,MseLee@Dir
  5085  000664  C0A1  F02A         	movff	_MseUltDirLeido+1,MseLee@Dir+1
  5086  000668  0E50               	movlw	low (_RsTxBuffer+2)
  5087  00066A  6E2B               	movwf	MseLee@Datos,c
  5088  00066C  0E01               	movlw	high (_RsTxBuffer+2)
  5089  00066E  6E2C               	movwf	MseLee@Datos+1,c
  5090  000670  0E00               	movlw	0
  5091  000672  6E2E               	movwf	MseLee@NBytes+1,c
  5092  000674  0E08               	movlw	8
  5093  000676  6E2D               	movwf	MseLee@NBytes,c
  5094  000678  EC88  F005         	call	_MseLee	;wreg free
  5095                           
  5096                           ;ModIO24.c: 349: RsTxEnviaMsg(10);
  5097  00067C  0E00               	movlw	0
  5098  00067E  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5099  000680  0E0A               	movlw	10
  5100  000682  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5101  000684  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  5102                           
  5103                           ;ModIO24.c: 350: break;
  5104  000688  0012               	return	
  5105  00068A                     l4964:
  5106                           
  5107                           ;ModIO24.c: 354: RsTxBuffer[2] = 0xE1;
  5108  00068A  0EE1               	movlw	225
  5109  00068C  0101               	movlb	1	; () banked
  5110  00068E  6F50               	movwf	(_RsTxBuffer+2)& (0+255),b
  5111                           
  5112                           ; BSR set to: 1
  5113                           ;ModIO24.c: 355: RsTxEnviaMsg(3);
  5114  000690  0E00               	movlw	0
  5115  000692  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5116  000694  0E03               	movlw	3
  5117  000696  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5118  000698  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  5119                           
  5120                           ;ModIO24.c: 356: RsRxRecibioMsgF = 0;
  5121  00069C  0E00               	movlw	0
  5122  00069E  0100               	movlb	0	; () banked
  5123  0006A0  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  5124  0006A2  0E00               	movlw	0
  5125  0006A4  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
  5126                           
  5127                           ;ModIO24.c: 357: break;
  5128  0006A6  0012               	return	
  5129  0006A8                     l607:
  5130                           
  5131                           ; BSR set to: 1
  5132                           ;ModIO24.c: 360: GIE = 0;;
  5133  0006A8  9EF2               	bcf	intcon,7,c	;volatile
  5134                           
  5135                           ; BSR set to: 1
  5136                           ;ModIO24.c: 361: memcpy (&(RsTxBuffer [2]), &(MIOAdcAct[0]), 2);
  5137  0006AA  0E50               	movlw	low (_RsTxBuffer+2)
  5138  0006AC  6E19               	movwf	memcpy@d1,c
  5139  0006AE  0E01               	movlw	high (_RsTxBuffer+2)
  5140  0006B0  6E1A               	movwf	memcpy@d1+1,c
  5141  0006B2  0E33               	movlw	low _MIOAdcAct
  5142  0006B4  6E1B               	movwf	memcpy@s1,c
  5143  0006B6  0E00               	movlw	high _MIOAdcAct
  5144  0006B8  6E1C               	movwf	memcpy@s1+1,c
  5145  0006BA  0E00               	movlw	0
  5146  0006BC  6E1E               	movwf	memcpy@n+1,c
  5147  0006BE  0E02               	movlw	2
  5148  0006C0  6E1D               	movwf	memcpy@n,c
  5149  0006C2  ECE9  F010         	call	_memcpy	;wreg free
  5150                           
  5151                           ;ModIO24.c: 362: memcpy (&(RsTxBuffer [4]), &(MIOAdcAct[1]), 2);
  5152  0006C6  0E52               	movlw	low (_RsTxBuffer+4)
  5153  0006C8  6E19               	movwf	memcpy@d1,c
  5154  0006CA  0E01               	movlw	high (_RsTxBuffer+4)
  5155  0006CC  6E1A               	movwf	memcpy@d1+1,c
  5156  0006CE  0E35               	movlw	low (_MIOAdcAct+2)
  5157  0006D0  6E1B               	movwf	memcpy@s1,c
  5158  0006D2  0E00               	movlw	high (_MIOAdcAct+2)
  5159  0006D4  6E1C               	movwf	memcpy@s1+1,c
  5160  0006D6  0E00               	movlw	0
  5161  0006D8  6E1E               	movwf	memcpy@n+1,c
  5162  0006DA  0E02               	movlw	2
  5163  0006DC  6E1D               	movwf	memcpy@n,c
  5164  0006DE  ECE9  F010         	call	_memcpy	;wreg free
  5165                           
  5166                           ;ModIO24.c: 363: memcpy (&(RsTxBuffer [6]), &(MIOAdcAct[2]), 2);
  5167  0006E2  0E54               	movlw	low (_RsTxBuffer+6)
  5168  0006E4  6E19               	movwf	memcpy@d1,c
  5169  0006E6  0E01               	movlw	high (_RsTxBuffer+6)
  5170  0006E8  6E1A               	movwf	memcpy@d1+1,c
  5171  0006EA  0E37               	movlw	low (_MIOAdcAct+4)
  5172  0006EC  6E1B               	movwf	memcpy@s1,c
  5173  0006EE  0E00               	movlw	high (_MIOAdcAct+4)
  5174  0006F0  6E1C               	movwf	memcpy@s1+1,c
  5175  0006F2  0E00               	movlw	0
  5176  0006F4  6E1E               	movwf	memcpy@n+1,c
  5177  0006F6  0E02               	movlw	2
  5178  0006F8  6E1D               	movwf	memcpy@n,c
  5179  0006FA  ECE9  F010         	call	_memcpy	;wreg free
  5180                           
  5181                           ;ModIO24.c: 364: memcpy (&(RsTxBuffer [8]), &(MIOAdcAct[3]), 2);
  5182  0006FE  0E56               	movlw	low (_RsTxBuffer+8)
  5183  000700  6E19               	movwf	memcpy@d1,c
  5184  000702  0E01               	movlw	high (_RsTxBuffer+8)
  5185  000704  6E1A               	movwf	memcpy@d1+1,c
  5186  000706  0E39               	movlw	low (_MIOAdcAct+6)
  5187  000708  6E1B               	movwf	memcpy@s1,c
  5188  00070A  0E00               	movlw	high (_MIOAdcAct+6)
  5189  00070C  6E1C               	movwf	memcpy@s1+1,c
  5190  00070E  0E00               	movlw	0
  5191  000710  6E1E               	movwf	memcpy@n+1,c
  5192  000712  0E02               	movlw	2
  5193  000714  6E1D               	movwf	memcpy@n,c
  5194  000716  ECE9  F010         	call	_memcpy	;wreg free
  5195                           
  5196                           ;ModIO24.c: 366: GIE = 1;;
  5197  00071A  8EF2               	bsf	intcon,7,c	;volatile
  5198                           
  5199                           ;ModIO24.c: 367: RsTxEnviaMsg(10);
  5200  00071C  0E00               	movlw	0
  5201  00071E  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5202  000720  0E0A               	movlw	10
  5203  000722  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5204  000724  EC89  F00F         	call	_RsTxEnviaMsg	;wreg free
  5205                           
  5206                           ;ModIO24.c: 373: }
  5207                           
  5208                           ;ModIO24.c: 369: break;
  5209  000728  0012               	return	
  5210  00072A                     l4978:
  5211  00072A  C098  F183         	movff	_MonRsCMD,??_Ppal_RsComando
  5212  00072E  C099  F184         	movff	_MonRsCMD+1,??_Ppal_RsComando+1
  5213                           
  5214                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5215                           ; Switch size 1, requested type "space"
  5216                           ; Number of cases is 1, Range of values is 0 to 0
  5217                           ; switch strategies available:
  5218                           ; Name         Instructions Cycles
  5219                           ; simple_byte            4     3 (average)
  5220                           ;	Chosen strategy is simple_byte
  5221  000732  0101               	movlb	1	; () banked
  5222  000734  5184               	movf	(??_Ppal_RsComando+1)& (0+255),w,b
  5223  000736  0A00               	xorlw	0	; case 0
  5224  000738  A4D8               	btfss	status,2,c
  5225  00073A  D7A7               	goto	l4964
  5226                           
  5227                           ; BSR set to: 1
  5228                           ; Switch size 1, requested type "space"
  5229                           ; Number of cases is 20, Range of values is 0 to 34
  5230                           ; switch strategies available:
  5231                           ; Name         Instructions Cycles
  5232                           ; simple_byte           61    31 (average)
  5233                           ;	Chosen strategy is simple_byte
  5234  00073C  0101               	movlb	1	; () banked
  5235  00073E  5183               	movf	??_Ppal_RsComando& (0+255),w,b
  5236  000740  0A00               	xorlw	0	; case 0
  5237  000742  B4D8               	btfsc	status,2,c
  5238  000744  D4C4               	goto	l4834
  5239  000746  0A01               	xorlw	1	; case 1
  5240  000748  B4D8               	btfsc	status,2,c
  5241  00074A  D4D2               	goto	l588
  5242  00074C  0A02               	xorlw	2	; case 3
  5243  00074E  B4D8               	btfsc	status,2,c
  5244  000750  D510               	goto	l4846
  5245  000752  0A07               	xorlw	7	; case 4
  5246  000754  B4D8               	btfsc	status,2,c
  5247  000756  D524               	goto	l4852
  5248  000758  0A01               	xorlw	1	; case 5
  5249  00075A  B4D8               	btfsc	status,2,c
  5250  00075C  D538               	goto	l4858
  5251  00075E  0A03               	xorlw	3	; case 6
  5252  000760  B4D8               	btfsc	status,2,c
  5253  000762  D55A               	goto	l4866
  5254  000764  0A01               	xorlw	1	; case 7
  5255  000766  B4D8               	btfsc	status,2,c
  5256  000768  D57C               	goto	l4870
  5257  00076A  0A0F               	xorlw	15	; case 8
  5258  00076C  B4D8               	btfsc	status,2,c
  5259  00076E  D5C8               	goto	l4884
  5260  000770  0A01               	xorlw	1	; case 9
  5261  000772  B4D8               	btfsc	status,2,c
  5262  000774  D5FE               	goto	l4898
  5263  000776  0A03               	xorlw	3	; case 10
  5264  000778  B4D8               	btfsc	status,2,c
  5265  00077A  D62E               	goto	l4908
  5266  00077C  0A01               	xorlw	1	; case 11
  5267  00077E  B4D8               	btfsc	status,2,c
  5268  000780  D650               	goto	l4916
  5269  000782  0A07               	xorlw	7	; case 12
  5270  000784  B4D8               	btfsc	status,2,c
  5271  000786  D672               	goto	l4924
  5272  000788  0A01               	xorlw	1	; case 13
  5273  00078A  B4D8               	btfsc	status,2,c
  5274  00078C  D6A0               	goto	l4928
  5275  00078E  0A03               	xorlw	3	; case 14
  5276  000790  B4D8               	btfsc	status,2,c
  5277  000792  D6D2               	goto	l4940
  5278  000794  0A01               	xorlw	1	; case 15
  5279  000796  B4D8               	btfsc	status,2,c
  5280  000798  D6E4               	goto	l4942
  5281  00079A  0A1F               	xorlw	31	; case 16
  5282  00079C  B4D8               	btfsc	status,2,c
  5283  00079E  D6F6               	goto	l4944
  5284  0007A0  0A01               	xorlw	1	; case 17
  5285  0007A2  B4D8               	btfsc	status,2,c
  5286  0007A4  D70D               	goto	l4950
  5287  0007A6  0A02               	xorlw	2	; case 19
  5288  0007A8  B4D8               	btfsc	status,2,c
  5289  0007AA  D749               	goto	l4954
  5290  0007AC  0A32               	xorlw	50	; case 33
  5291  0007AE  B4D8               	btfsc	status,2,c
  5292  0007B0  D752               	goto	l4958
  5293  0007B2  0A03               	xorlw	3	; case 34
  5294  0007B4  B4D8               	btfsc	status,2,c
  5295  0007B6  D778               	goto	l607
  5296  0007B8  D768               	goto	l4964
  5297  0007BA                     __end_of_Ppal_RsComando:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           intcon	equ	0xFF2
  5304                           postinc0	equ	0xFEE
  5305                           wreg	equ	0xFE8
  5306                           postdec1	equ	0xFE5
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _RtcEsc *****************
  5316 ;; Defined at:
  5317 ;;		line 40 in file "RTC21.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5331 ;;      Params:         0       0       0       0       0       0       0       0       0
  5332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5333 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5334 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5335 ;;Total ram usage:        1 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    7
  5338 ;; This function calls:
  5339 ;;		_Hex2Bcd
  5340 ;;		_I2CEscByte
  5341 ;;		_I2CStart
  5342 ;;		_I2CStop
  5343 ;; This function is called by:
  5344 ;;		_RtcInit
  5345 ;;		_Ppal_RsComando
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text26
  5350  0016F8                     __ptext26:
  5351                           	opt stack 0
  5352  0016F8                     _RtcEsc:
  5353                           	opt stack 20
  5354                           
  5355                           ;RTC21.c: 41: I2CStart();
  5356                           
  5357                           ;incstack = 0
  5358  0016F8  ECED  F011         	call	_I2CStart	;wreg free
  5359                           
  5360                           ;RTC21.c: 42: I2CEscByte(0xD0);
  5361  0016FC  0E00               	movlw	0
  5362  0016FE  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5363  001700  0ED0               	movlw	208
  5364  001702  6E25               	movwf	I2CEscByte@I2CByte,c
  5365  001704  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5366                           
  5367                           ;RTC21.c: 43: I2CEscByte(0);
  5368  001708  0E00               	movlw	0
  5369  00170A  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5370  00170C  0E00               	movlw	0
  5371  00170E  6E25               	movwf	I2CEscByte@I2CByte,c
  5372  001710  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5373                           
  5374                           ;RTC21.c: 44: I2CEscByte(Hex2Bcd(RtcFechaHora[5]) & 0x7F);
  5375  001714  0100               	movlb	0	; () banked
  5376  001716  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  5377  001718  EC83  F011         	call	_Hex2Bcd
  5378  00171C  6E29               	movwf	??_RtcEsc& (0+255),c
  5379  00171E  0E7F               	movlw	127
  5380  001720  1629               	andwf	??_RtcEsc,f,c
  5381  001722  5029               	movf	??_RtcEsc,w,c
  5382  001724  6E25               	movwf	I2CEscByte@I2CByte,c
  5383  001726  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5384  001728  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5385                           
  5386                           ;RTC21.c: 45: I2CEscByte(Hex2Bcd(RtcFechaHora[4]));
  5387  00172C  0100               	movlb	0	; () banked
  5388  00172E  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  5389  001730  EC83  F011         	call	_Hex2Bcd
  5390  001734  6E29               	movwf	??_RtcEsc& (0+255),c
  5391  001736  5029               	movf	??_RtcEsc,w,c
  5392  001738  6E25               	movwf	I2CEscByte@I2CByte,c
  5393  00173A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5394  00173C  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5395                           
  5396                           ;RTC21.c: 46: I2CEscByte(Hex2Bcd(RtcFechaHora[3]));
  5397  001740  0100               	movlb	0	; () banked
  5398  001742  51EB               	movf	(_RtcFechaHora+3)& (0+255),w,b
  5399  001744  EC83  F011         	call	_Hex2Bcd
  5400  001748  6E29               	movwf	??_RtcEsc& (0+255),c
  5401  00174A  5029               	movf	??_RtcEsc,w,c
  5402  00174C  6E25               	movwf	I2CEscByte@I2CByte,c
  5403  00174E  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5404  001750  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5405                           
  5406                           ;RTC21.c: 47: I2CEscByte(Hex2Bcd(RtcFechaHora[6]));
  5407  001754  0100               	movlb	0	; () banked
  5408  001756  51EE               	movf	(_RtcFechaHora+6)& (0+255),w,b
  5409  001758  EC83  F011         	call	_Hex2Bcd
  5410  00175C  6E29               	movwf	??_RtcEsc& (0+255),c
  5411  00175E  5029               	movf	??_RtcEsc,w,c
  5412  001760  6E25               	movwf	I2CEscByte@I2CByte,c
  5413  001762  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5414  001764  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5415                           
  5416                           ;RTC21.c: 48: I2CEscByte(Hex2Bcd(RtcFechaHora[2]));
  5417  001768  0100               	movlb	0	; () banked
  5418  00176A  51EA               	movf	(_RtcFechaHora+2)& (0+255),w,b
  5419  00176C  EC83  F011         	call	_Hex2Bcd
  5420  001770  6E29               	movwf	??_RtcEsc& (0+255),c
  5421  001772  5029               	movf	??_RtcEsc,w,c
  5422  001774  6E25               	movwf	I2CEscByte@I2CByte,c
  5423  001776  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5424  001778  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5425                           
  5426                           ;RTC21.c: 49: I2CEscByte(Hex2Bcd(RtcFechaHora[1]));
  5427  00177C  0100               	movlb	0	; () banked
  5428  00177E  51E9               	movf	(_RtcFechaHora+1)& (0+255),w,b
  5429  001780  EC83  F011         	call	_Hex2Bcd
  5430  001784  6E29               	movwf	??_RtcEsc& (0+255),c
  5431  001786  5029               	movf	??_RtcEsc,w,c
  5432  001788  6E25               	movwf	I2CEscByte@I2CByte,c
  5433  00178A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5434  00178C  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5435                           
  5436                           ;RTC21.c: 50: I2CEscByte(Hex2Bcd(RtcFechaHora[0]));
  5437  001790  0100               	movlb	0	; () banked
  5438  001792  51E8               	movf	_RtcFechaHora& (0+255),w,b
  5439  001794  EC83  F011         	call	_Hex2Bcd
  5440  001798  6E29               	movwf	??_RtcEsc& (0+255),c
  5441  00179A  5029               	movf	??_RtcEsc,w,c
  5442  00179C  6E25               	movwf	I2CEscByte@I2CByte,c
  5443  00179E  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5444  0017A0  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5445                           
  5446                           ;RTC21.c: 51: I2CEscByte(0);
  5447  0017A4  0E00               	movlw	0
  5448  0017A6  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5449  0017A8  0E00               	movlw	0
  5450  0017AA  6E25               	movwf	I2CEscByte@I2CByte,c
  5451  0017AC  ECE6  F00C         	call	_I2CEscByte	;wreg free
  5452                           
  5453                           ;RTC21.c: 52: I2CStop();
  5454  0017B0  EC8A  F012         	call	_I2CStop	;wreg free
  5455  0017B4  0012               	return		;funcret
  5456  0017B6                     __end_of_RtcEsc:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           intcon	equ	0xFF2
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           postdec1	equ	0xFE5
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _Hex2Bcd *****************
  5475 ;; Defined at:
  5476 ;;		line 13 in file "RTC21.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  Hex1            1    wreg     unsigned char 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  Hex1            1   35[COMRAM] unsigned char 
  5481 ;;  Bcd1            1   34[COMRAM] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2, status,0, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0
  5492 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5493 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5494 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5495 ;;Total ram usage:        4 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    6
  5498 ;; This function calls:
  5499 ;;		___awdiv
  5500 ;;		___awmod
  5501 ;; This function is called by:
  5502 ;;		_RtcEsc
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text27
  5507  002306                     __ptext27:
  5508                           	opt stack 0
  5509  002306                     _Hex2Bcd:
  5510                           	opt stack 20
  5511                           
  5512                           ;incstack = 0
  5513                           ;Hex2Bcd@Hex1 stored from wreg
  5514  002306  6E24               	movwf	Hex2Bcd@Hex1,c
  5515                           
  5516                           ;RTC21.c: 14: char Bcd1;
  5517                           ;RTC21.c: 15: Bcd1 = ((Hex1/10)<< 4) +(Hex1 % 10);
  5518  002308  C024  F019         	movff	Hex2Bcd@Hex1,___awmod@dividend
  5519  00230C  6A1A               	clrf	___awmod@dividend+1,c
  5520  00230E  0E00               	movlw	0
  5521  002310  6E1C               	movwf	___awmod@divisor+1,c
  5522  002312  0E0A               	movlw	10
  5523  002314  6E1B               	movwf	___awmod@divisor,c
  5524  002316  ECF5  F00D         	call	___awmod	;wreg free
  5525  00231A  C019  F021         	movff	?___awmod,??_Hex2Bcd
  5526  00231E  C01A  F022         	movff	?___awmod+1,??_Hex2Bcd+1
  5527  002322  C024  F019         	movff	Hex2Bcd@Hex1,___awdiv@dividend
  5528  002326  6A1A               	clrf	___awdiv@dividend+1,c
  5529  002328  0E00               	movlw	0
  5530  00232A  6E1C               	movwf	___awdiv@divisor+1,c
  5531  00232C  0E0A               	movlw	10
  5532  00232E  6E1B               	movwf	___awdiv@divisor,c
  5533  002330  EC36  F00D         	call	___awdiv	;wreg free
  5534  002334  3819               	swapf	?___awdiv,w,c
  5535  002336  0BF0               	andlw	240
  5536  002338  2421               	addwf	??_Hex2Bcd,w,c
  5537  00233A  6E23               	movwf	Hex2Bcd@Bcd1,c
  5538                           
  5539                           ;RTC21.c: 16: return (Bcd1);
  5540  00233C  5023               	movf	Hex2Bcd@Bcd1,w,c
  5541  00233E  0012               	return	
  5542  002340                     __end_of_Hex2Bcd:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           intcon	equ	0xFF2
  5549                           postinc0	equ	0xFEE
  5550                           wreg	equ	0xFE8
  5551                           postdec1	equ	0xFE5
  5552                           fsr1l	equ	0xFE1
  5553                           indf2	equ	0xFDF
  5554                           postinc2	equ	0xFDE
  5555                           postdec2	equ	0xFDD
  5556                           fsr2h	equ	0xFDA
  5557                           fsr2l	equ	0xFD9
  5558                           status	equ	0xFD8
  5559                           
  5560 ;; *************** function ___awmod *****************
  5561 ;; Defined at:
  5562 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;  dividend        2   24[COMRAM] int 
  5565 ;;  divisor         2   26[COMRAM] int 
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  sign            1   29[COMRAM] unsigned char 
  5568 ;;  counter         1   28[COMRAM] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2   24[COMRAM] int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5578 ;;      Params:         4       0       0       0       0       0       0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5581 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    5
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_Hex2Bcd
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text28
  5593  001BEA                     __ptext28:
  5594                           	opt stack 0
  5595  001BEA                     ___awmod:
  5596                           	opt stack 20
  5597                           
  5598                           ;incstack = 0
  5599  001BEA  0E00               	movlw	0
  5600  001BEC  6E1E               	movwf	___awmod@sign,c
  5601  001BEE  AE1A               	btfss	___awmod@dividend+1,7,c
  5602  001BF0  D006               	goto	l4404
  5603  001BF2  6C19               	negf	___awmod@dividend,c
  5604  001BF4  1E1A               	comf	___awmod@dividend+1,f,c
  5605  001BF6  B0D8               	btfsc	status,0,c
  5606  001BF8  2A1A               	incf	___awmod@dividend+1,f,c
  5607  001BFA  0E01               	movlw	1
  5608  001BFC  6E1E               	movwf	___awmod@sign,c
  5609  001BFE                     l4404:
  5610  001BFE  AE1C               	btfss	___awmod@divisor+1,7,c
  5611  001C00  D004               	goto	l4408
  5612  001C02  6C1B               	negf	___awmod@divisor,c
  5613  001C04  1E1C               	comf	___awmod@divisor+1,f,c
  5614  001C06  B0D8               	btfsc	status,0,c
  5615  001C08  2A1C               	incf	___awmod@divisor+1,f,c
  5616  001C0A                     l4408:
  5617  001C0A  501B               	movf	___awmod@divisor,w,c
  5618  001C0C  101C               	iorwf	___awmod@divisor+1,w,c
  5619  001C0E  B4D8               	btfsc	status,2,c
  5620  001C10  D018               	goto	l4424
  5621  001C12  0E01               	movlw	1
  5622  001C14  6E1D               	movwf	___awmod@counter,c
  5623  001C16  D004               	goto	l4414
  5624  001C18                     l4412:
  5625  001C18  90D8               	bcf	status,0,c
  5626  001C1A  361B               	rlcf	___awmod@divisor,f,c
  5627  001C1C  361C               	rlcf	___awmod@divisor+1,f,c
  5628  001C1E  2A1D               	incf	___awmod@counter,f,c
  5629  001C20                     l4414:
  5630  001C20  AE1C               	btfss	___awmod@divisor+1,7,c
  5631  001C22  D7FA               	goto	l4412
  5632  001C24                     l4416:
  5633  001C24  501B               	movf	___awmod@divisor,w,c
  5634  001C26  5C19               	subwf	___awmod@dividend,w,c
  5635  001C28  501C               	movf	___awmod@divisor+1,w,c
  5636  001C2A  581A               	subwfb	___awmod@dividend+1,w,c
  5637  001C2C  A0D8               	btfss	status,0,c
  5638  001C2E  D004               	goto	l4420
  5639  001C30  501B               	movf	___awmod@divisor,w,c
  5640  001C32  5E19               	subwf	___awmod@dividend,f,c
  5641  001C34  501C               	movf	___awmod@divisor+1,w,c
  5642  001C36  5A1A               	subwfb	___awmod@dividend+1,f,c
  5643  001C38                     l4420:
  5644  001C38  90D8               	bcf	status,0,c
  5645  001C3A  321C               	rrcf	___awmod@divisor+1,f,c
  5646  001C3C  321B               	rrcf	___awmod@divisor,f,c
  5647  001C3E  2E1D               	decfsz	___awmod@counter,f,c
  5648  001C40  D7F1               	goto	l4416
  5649  001C42                     l4424:
  5650  001C42  501E               	movf	___awmod@sign,w,c
  5651  001C44  B4D8               	btfsc	status,2,c
  5652  001C46  D004               	goto	l4428
  5653  001C48  6C19               	negf	___awmod@dividend,c
  5654  001C4A  1E1A               	comf	___awmod@dividend+1,f,c
  5655  001C4C  B0D8               	btfsc	status,0,c
  5656  001C4E  2A1A               	incf	___awmod@dividend+1,f,c
  5657  001C50                     l4428:
  5658  001C50  C019  F019         	movff	___awmod@dividend,?___awmod
  5659  001C54  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  5660  001C58  0012               	return	
  5661  001C5A                     __end_of___awmod:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           intcon	equ	0xFF2
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function ___awdiv *****************
  5680 ;; Defined at:
  5681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  dividend        2   24[COMRAM] int 
  5684 ;;  divisor         2   26[COMRAM] int 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  quotient        2   30[COMRAM] int 
  5687 ;;  sign            1   29[COMRAM] unsigned char 
  5688 ;;  counter         1   28[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  2   24[COMRAM] int 
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5698 ;;      Params:         4       0       0       0       0       0       0       0       0
  5699 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5701 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5702 ;;Total ram usage:        8 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    5
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_Hex2Bcd
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           	psect	text29
  5713  001A6C                     __ptext29:
  5714                           	opt stack 0
  5715  001A6C                     ___awdiv:
  5716                           	opt stack 20
  5717                           
  5718                           ;incstack = 0
  5719  001A6C  0E00               	movlw	0
  5720  001A6E  6E1E               	movwf	___awdiv@sign,c
  5721  001A70  AE1C               	btfss	___awdiv@divisor+1,7,c
  5722  001A72  D006               	goto	l4360
  5723  001A74  6C1B               	negf	___awdiv@divisor,c
  5724  001A76  1E1C               	comf	___awdiv@divisor+1,f,c
  5725  001A78  B0D8               	btfsc	status,0,c
  5726  001A7A  2A1C               	incf	___awdiv@divisor+1,f,c
  5727  001A7C  0E01               	movlw	1
  5728  001A7E  6E1E               	movwf	___awdiv@sign,c
  5729  001A80                     l4360:
  5730  001A80  AE1A               	btfss	___awdiv@dividend+1,7,c
  5731  001A82  D006               	goto	l4366
  5732  001A84  6C19               	negf	___awdiv@dividend,c
  5733  001A86  1E1A               	comf	___awdiv@dividend+1,f,c
  5734  001A88  B0D8               	btfsc	status,0,c
  5735  001A8A  2A1A               	incf	___awdiv@dividend+1,f,c
  5736  001A8C  0E01               	movlw	1
  5737  001A8E  1A1E               	xorwf	___awdiv@sign,f,c
  5738  001A90                     l4366:
  5739  001A90  0E00               	movlw	0
  5740  001A92  6E20               	movwf	___awdiv@quotient+1,c
  5741  001A94  0E00               	movlw	0
  5742  001A96  6E1F               	movwf	___awdiv@quotient,c
  5743  001A98  501B               	movf	___awdiv@divisor,w,c
  5744  001A9A  101C               	iorwf	___awdiv@divisor+1,w,c
  5745  001A9C  B4D8               	btfsc	status,2,c
  5746  001A9E  D01C               	goto	l4388
  5747  001AA0  0E01               	movlw	1
  5748  001AA2  6E1D               	movwf	___awdiv@counter,c
  5749  001AA4  D004               	goto	l4374
  5750  001AA6                     l4372:
  5751  001AA6  90D8               	bcf	status,0,c
  5752  001AA8  361B               	rlcf	___awdiv@divisor,f,c
  5753  001AAA  361C               	rlcf	___awdiv@divisor+1,f,c
  5754  001AAC  2A1D               	incf	___awdiv@counter,f,c
  5755  001AAE                     l4374:
  5756  001AAE  AE1C               	btfss	___awdiv@divisor+1,7,c
  5757  001AB0  D7FA               	goto	l4372
  5758  001AB2                     l4376:
  5759  001AB2  90D8               	bcf	status,0,c
  5760  001AB4  361F               	rlcf	___awdiv@quotient,f,c
  5761  001AB6  3620               	rlcf	___awdiv@quotient+1,f,c
  5762  001AB8  501B               	movf	___awdiv@divisor,w,c
  5763  001ABA  5C19               	subwf	___awdiv@dividend,w,c
  5764  001ABC  501C               	movf	___awdiv@divisor+1,w,c
  5765  001ABE  581A               	subwfb	___awdiv@dividend+1,w,c
  5766  001AC0  A0D8               	btfss	status,0,c
  5767  001AC2  D005               	goto	l4384
  5768  001AC4  501B               	movf	___awdiv@divisor,w,c
  5769  001AC6  5E19               	subwf	___awdiv@dividend,f,c
  5770  001AC8  501C               	movf	___awdiv@divisor+1,w,c
  5771  001ACA  5A1A               	subwfb	___awdiv@dividend+1,f,c
  5772  001ACC  801F               	bsf	___awdiv@quotient,0,c
  5773  001ACE                     l4384:
  5774  001ACE  90D8               	bcf	status,0,c
  5775  001AD0  321C               	rrcf	___awdiv@divisor+1,f,c
  5776  001AD2  321B               	rrcf	___awdiv@divisor,f,c
  5777  001AD4  2E1D               	decfsz	___awdiv@counter,f,c
  5778  001AD6  D7ED               	goto	l4376
  5779  001AD8                     l4388:
  5780  001AD8  501E               	movf	___awdiv@sign,w,c
  5781  001ADA  B4D8               	btfsc	status,2,c
  5782  001ADC  D004               	goto	l4392
  5783  001ADE  6C1F               	negf	___awdiv@quotient,c
  5784  001AE0  1E20               	comf	___awdiv@quotient+1,f,c
  5785  001AE2  B0D8               	btfsc	status,0,c
  5786  001AE4  2A20               	incf	___awdiv@quotient+1,f,c
  5787  001AE6                     l4392:
  5788  001AE6  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  5789  001AEA  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  5790  001AEE  0012               	return	
  5791  001AF0                     __end_of___awdiv:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           intcon	equ	0xFF2
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           fsr1l	equ	0xFE1
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           fsr2h	equ	0xFDA
  5806                           fsr2l	equ	0xFD9
  5807                           status	equ	0xFD8
  5808                           
  5809 ;; *************** function _RsTxEnviaMsg *****************
  5810 ;; Defined at:
  5811 ;;		line 75 in file "RedSerie13.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  RsTxLen         2   36[COMRAM] int 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;  Temp1           2   39[COMRAM] unsigned int 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5825 ;;      Params:         2       0       0       0       0       0       0       0       0
  5826 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5827 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5828 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5829 ;;Total ram usage:        5 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    6
  5832 ;; This function calls:
  5833 ;;		_RsCheckSum
  5834 ;; This function is called by:
  5835 ;;		_MstRsComando
  5836 ;;		_Ppal_Init
  5837 ;;		_Ppal_RsComando
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text30
  5842  001F12                     __ptext30:
  5843                           	opt stack 0
  5844  001F12                     _RsTxEnviaMsg:
  5845                           	opt stack 22
  5846                           
  5847                           ;RedSerie13.c: 76: if (RsTxTransmitiendoF){return;}
  5848                           
  5849                           ;incstack = 0
  5850  001F12  0100               	movlb	0	; () banked
  5851  001F14  51B8               	movf	_RsTxTransmitiendoF& (0+255),w,b
  5852  001F16  0100               	movlb	0	; () banked
  5853  001F18  11B9               	iorwf	(_RsTxTransmitiendoF+1)& (0+255),w,b
  5854  001F1A  A4D8               	btfss	status,2,c
  5855  001F1C  0012               	return	
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;RedSerie13.c: 78: unsigned int Temp1 = (unsigned int)RsTxLen;
  5859                           
  5860                           ; BSR set to: 0
  5861  001F1E  C025  F028         	movff	RsTxEnviaMsg@RsTxLen,RsTxEnviaMsg@Temp1
  5862  001F22  C026  F029         	movff	RsTxEnviaMsg@RsTxLen+1,RsTxEnviaMsg@Temp1+1
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;RedSerie13.c: 79: RsTxBuffer [Temp1] = RsCheckSum (RsTxLen,RsTxBuffer);
  5866  001F26  C025  F019         	movff	RsTxEnviaMsg@RsTxLen,RsCheckSum@RsLen
  5867  001F2A  C026  F01A         	movff	RsTxEnviaMsg@RsTxLen+1,RsCheckSum@RsLen+1
  5868  001F2E  0E4E               	movlw	low _RsTxBuffer
  5869  001F30  6E1B               	movwf	RsCheckSum@RsBuffer,c
  5870  001F32  0E01               	movlw	high _RsTxBuffer
  5871  001F34  6E1C               	movwf	RsCheckSum@RsBuffer+1,c
  5872  001F36  ECFD  F00E         	call	_RsCheckSum	;wreg free
  5873  001F3A  6E27               	movwf	??_RsTxEnviaMsg& (0+255),c
  5874  001F3C  0E4E               	movlw	low _RsTxBuffer
  5875  001F3E  2428               	addwf	RsTxEnviaMsg@Temp1,w,c
  5876  001F40  6ED9               	movwf	fsr2l,c
  5877  001F42  0E01               	movlw	high _RsTxBuffer
  5878  001F44  2029               	addwfc	RsTxEnviaMsg@Temp1+1,w,c
  5879  001F46  6EDA               	movwf	fsr2h,c
  5880  001F48  C027  FFDF         	movff	??_RsTxEnviaMsg,indf2
  5881                           
  5882                           ;RedSerie13.c: 80: RsTxIndex = -2;
  5883  001F4C  0EFF               	movlw	255
  5884  001F4E  0100               	movlb	0	; () banked
  5885  001F50  6FB5               	movwf	(_RsTxIndex+1)& (0+255),b
  5886  001F52  0EFE               	movlw	254
  5887  001F54  6FB4               	movwf	_RsTxIndex& (0+255),b
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;RedSerie13.c: 81: RsTxBufferLen = RsTxLen;
  5891  001F56  C025  F0B0         	movff	RsTxEnviaMsg@RsTxLen,_RsTxBufferLen
  5892  001F5A  C026  F0B1         	movff	RsTxEnviaMsg@RsTxLen+1,_RsTxBufferLen+1
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;RedSerie13.c: 82: RsTxTransmitiendoF = 1;
  5896  001F5E  0E00               	movlw	0
  5897  001F60  0100               	movlb	0	; () banked
  5898  001F62  6FB9               	movwf	(_RsTxTransmitiendoF+1)& (0+255),b
  5899  001F64  0E01               	movlw	1
  5900  001F66  6FB8               	movwf	_RsTxTransmitiendoF& (0+255),b
  5901                           
  5902                           ; BSR set to: 0
  5903  001F68  0012               	return		;funcret
  5904  001F6A                     __end_of_RsTxEnviaMsg:
  5905                           	opt stack 0
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           intcon	equ	0xFF2
  5911                           postinc0	equ	0xFEE
  5912                           wreg	equ	0xFE8
  5913                           postdec1	equ	0xFE5
  5914                           fsr1l	equ	0xFE1
  5915                           indf2	equ	0xFDF
  5916                           postinc2	equ	0xFDE
  5917                           postdec2	equ	0xFDD
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           
  5922 ;; *************** function _RsCheckSum *****************
  5923 ;; Defined at:
  5924 ;;		line 27 in file "RedSerie13.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  RsLen           2   24[COMRAM] int 
  5927 ;;  RsBuffer        2   26[COMRAM] PTR unsigned char 
  5928 ;;		 -> RsTxBuffer(30), 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  Car1            2   34[COMRAM] int 
  5931 ;;  Ind             2   32[COMRAM] int 
  5932 ;;  CheckSum1       2   30[COMRAM] int 
  5933 ;;  CheckSum2       1   29[COMRAM] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      unsigned char 
  5936 ;; Registers used:
  5937 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5943 ;;      Params:         4       0       0       0       0       0       0       0       0
  5944 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5945 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5946 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5947 ;;Total ram usage:       12 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    5
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_RsTxEnviaMsg
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text31
  5958  001DFA                     __ptext31:
  5959                           	opt stack 0
  5960  001DFA                     _RsCheckSum:
  5961                           	opt stack 22
  5962                           
  5963                           ;RedSerie13.c: 29: int CheckSum1,Ind,Car1;
  5964                           ;RedSerie13.c: 30: char CheckSum2;
  5965                           ;RedSerie13.c: 31: CheckSum1 = 0;
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;incstack = 0
  5969  001DFA  0E00               	movlw	0
  5970  001DFC  6E20               	movwf	RsCheckSum@CheckSum1+1,c
  5971  001DFE  0E00               	movlw	0
  5972  001E00  6E1F               	movwf	RsCheckSum@CheckSum1,c
  5973                           
  5974                           ;RedSerie13.c: 32: for(Ind = 0; Ind < RsLen; Ind ++)
  5975  001E02  0E00               	movlw	0
  5976  001E04  6E22               	movwf	RsCheckSum@Ind+1,c
  5977  001E06  0E00               	movlw	0
  5978  001E08  6E21               	movwf	RsCheckSum@Ind,c
  5979  001E0A  D017               	goto	l178
  5980  001E0C                     l4434:
  5981                           
  5982                           ;RedSerie13.c: 33: {
  5983                           ;RedSerie13.c: 34: Car1 = RsBuffer [Ind];
  5984  001E0C  5021               	movf	RsCheckSum@Ind,w,c
  5985  001E0E  241B               	addwf	RsCheckSum@RsBuffer,w,c
  5986  001E10  6ED9               	movwf	fsr2l,c
  5987  001E12  5022               	movf	RsCheckSum@Ind+1,w,c
  5988  001E14  201C               	addwfc	RsCheckSum@RsBuffer+1,w,c
  5989  001E16  6EDA               	movwf	fsr2h,c
  5990  001E18  50DF               	movf	indf2,w,c
  5991  001E1A  6E1D               	movwf	??_RsCheckSum& (0+255),c
  5992  001E1C  501D               	movf	??_RsCheckSum,w,c
  5993  001E1E  6E23               	movwf	RsCheckSum@Car1,c
  5994  001E20  6A24               	clrf	RsCheckSum@Car1+1,c
  5995                           
  5996                           ;RedSerie13.c: 36: if( (Car1 & 0x80)!= 0 ) Car1 ++;
  5997  001E22  AE23               	btfss	RsCheckSum@Car1,7,c
  5998  001E24  D002               	goto	l4440
  5999  001E26  4A23               	infsnz	RsCheckSum@Car1,f,c
  6000  001E28  2A24               	incf	RsCheckSum@Car1+1,f,c
  6001  001E2A                     l4440:
  6002                           
  6003                           ;RedSerie13.c: 37: CheckSum1 = CheckSum1 + Car1;
  6004  001E2A  5023               	movf	RsCheckSum@Car1,w,c
  6005  001E2C  241F               	addwf	RsCheckSum@CheckSum1,w,c
  6006  001E2E  6E1F               	movwf	RsCheckSum@CheckSum1,c
  6007  001E30  5024               	movf	RsCheckSum@Car1+1,w,c
  6008  001E32  2020               	addwfc	RsCheckSum@CheckSum1+1,w,c
  6009  001E34  6E20               	movwf	RsCheckSum@CheckSum1+1,c
  6010  001E36  4A21               	infsnz	RsCheckSum@Ind,f,c
  6011  001E38  2A22               	incf	RsCheckSum@Ind+1,f,c
  6012  001E3A                     l178:
  6013  001E3A  5019               	movf	RsCheckSum@RsLen,w,c
  6014  001E3C  5C21               	subwf	RsCheckSum@Ind,w,c
  6015  001E3E  5022               	movf	RsCheckSum@Ind+1,w,c
  6016  001E40  0A80               	xorlw	128
  6017  001E42  6E1D               	movwf	??_RsCheckSum& (0+255),c
  6018  001E44  501A               	movf	RsCheckSum@RsLen+1,w,c
  6019  001E46  0A80               	xorlw	128
  6020  001E48  581D               	subwfb	??_RsCheckSum& (0+255),w,c
  6021  001E4A  A0D8               	btfss	status,0,c
  6022  001E4C  D7DF               	goto	l4434
  6023                           
  6024                           ;RedSerie13.c: 38: }
  6025                           ;RedSerie13.c: 40: CheckSum2 = (char) ((0-CheckSum1) & 0x7F);
  6026  001E4E  501F               	movf	RsCheckSum@CheckSum1,w,c
  6027  001E50  0800               	sublw	0
  6028  001E52  0B7F               	andlw	127
  6029  001E54  6E1E               	movwf	RsCheckSum@CheckSum2,c
  6030                           
  6031                           ;RedSerie13.c: 41: return (CheckSum2);
  6032  001E56  501E               	movf	RsCheckSum@CheckSum2,w,c
  6033  001E58  0012               	return	
  6034  001E5A                     __end_of_RsCheckSum:
  6035                           	opt stack 0
  6036                           tblptru	equ	0xFF8
  6037                           tblptrh	equ	0xFF7
  6038                           tblptrl	equ	0xFF6
  6039                           tablat	equ	0xFF5
  6040                           intcon	equ	0xFF2
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           postdec1	equ	0xFE5
  6044                           fsr1l	equ	0xFE1
  6045                           indf2	equ	0xFDF
  6046                           postinc2	equ	0xFDE
  6047                           postdec2	equ	0xFDD
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _MrUlt *****************
  6053 ;; Defined at:
  6054 ;;		line 206 in file "MemoryRoller29.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;		None
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;		None
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		None
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0
  6069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6071 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6072 ;;Total ram usage:        0 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    5
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_Ppal_RsComando
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text32
  6083  0026B2                     __ptext32:
  6084                           	opt stack 0
  6085  0026B2                     _MrUlt:
  6086                           	opt stack 21
  6087                           
  6088                           ;MemoryRoller29.c: 208: MrDirV = MrUltV;
  6089                           
  6090                           ;incstack = 0
  6091  0026B2  C043  F041         	movff	_MrUltV,_MrDirV
  6092  0026B6  C044  F042         	movff	_MrUltV+1,_MrDirV+1
  6093  0026BA  0012               	return		;funcret
  6094  0026BC                     __end_of_MrUlt:
  6095                           	opt stack 0
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           intcon	equ	0xFF2
  6101                           postinc0	equ	0xFEE
  6102                           wreg	equ	0xFE8
  6103                           postdec1	equ	0xFE5
  6104                           fsr1l	equ	0xFE1
  6105                           indf2	equ	0xFDF
  6106                           postinc2	equ	0xFDE
  6107                           postdec2	equ	0xFDD
  6108                           fsr2h	equ	0xFDA
  6109                           fsr2l	equ	0xFD9
  6110                           status	equ	0xFD8
  6111                           
  6112 ;; *************** function _MrSgte *****************
  6113 ;; Defined at:
  6114 ;;		line 211 in file "MemoryRoller29.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;		None
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6128 ;;      Params:         0       0       0       0       0       0       0       0       0
  6129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6131 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6132 ;;Total ram usage:        0 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    6
  6135 ;; This function calls:
  6136 ;;		__MrSgte
  6137 ;; This function is called by:
  6138 ;;		_Ppal_RsComando
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text33
  6143  00265A                     __ptext33:
  6144                           	opt stack 0
  6145  00265A                     _MrSgte:
  6146                           	opt stack 20
  6147                           
  6148                           ;MemoryRoller29.c: 213: MrDirV = _MrSgte (MrDirV);
  6149                           
  6150                           ;incstack = 0
  6151  00265A  C041  F019         	movff	_MrDirV,__MrSgte@MrDirX
  6152  00265E  C042  F01A         	movff	_MrDirV+1,__MrSgte@MrDirX+1
  6153  002662  ECEB  F012         	call	__MrSgte	;wreg free
  6154  002666  C019  F041         	movff	?__MrSgte,_MrDirV
  6155  00266A  C01A  F042         	movff	?__MrSgte+1,_MrDirV+1
  6156  00266E  0012               	return		;funcret
  6157  002670                     __end_of_MrSgte:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           intcon	equ	0xFF2
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postdec1	equ	0xFE5
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function _MrInit *****************
  6176 ;; Defined at:
  6177 ;;		line 115 in file "MemoryRoller29.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    9
  6198 ;; This function calls:
  6199 ;;		_MrInicializa
  6200 ;;		_MrLeeReg
  6201 ;;		__MrEsc
  6202 ;;		__MrPreparaPor
  6203 ;;		_memcpy
  6204 ;; This function is called by:
  6205 ;;		_Ppal_Init
  6206 ;;		_Ppal_RsComando
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text34
  6211  000DF2                     __ptext34:
  6212                           	opt stack 0
  6213  000DF2                     _MrInit:
  6214                           	opt stack 19
  6215                           
  6216                           ;MemoryRoller29.c: 116: MrInicializa ();
  6217                           
  6218                           ;incstack = 0
  6219  000DF2  EC62  F00E         	call	_MrInicializa	;wreg free
  6220                           
  6221                           ;MemoryRoller29.c: 117: MrFecha12Ult = 0;
  6222  000DF6  0E00               	movlw	0
  6223  000DF8  0100               	movlb	0	; () banked
  6224  000DFA  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  6225  000DFC  0E00               	movlw	0
  6226  000DFE  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  6227  000E00  0E00               	movlw	0
  6228  000E02  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  6229  000E04  0E00               	movlw	0
  6230  000E06  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;MemoryRoller29.c: 118: MrInicializado = 1;
  6234  000E08  8046               	bsf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;MemoryRoller29.c: 119: MrRegsXGpo = 32 / 8;
  6238  000E0A  0E00               	movlw	0
  6239  000E0C  0100               	movlb	0	; () banked
  6240  000E0E  6F9F               	movwf	(_MrRegsXGpo+1)& (0+255),b
  6241  000E10  0E04               	movlw	4
  6242  000E12  6F9E               	movwf	_MrRegsXGpo& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;MemoryRoller29.c: 120: for (MrDirV = 0; MrDirV < 1000; MrDirV++) {
  6246  000E14  0E00               	movlw	0
  6247  000E16  6E42               	movwf	_MrDirV+1,c
  6248  000E18  0E00               	movlw	0
  6249  000E1A  6E41               	movwf	_MrDirV,c
  6250  000E1C                     l4646:
  6251                           
  6252                           ; BSR set to: 0
  6253  000E1C  BE42               	btfsc	_MrDirV+1,7,c
  6254  000E1E  D006               	goto	l4650
  6255  000E20  0EE8               	movlw	232
  6256  000E22  5C41               	subwf	_MrDirV,w,c
  6257  000E24  0E03               	movlw	3
  6258  000E26  5842               	subwfb	_MrDirV+1,w,c
  6259  000E28  B0D8               	btfsc	status,0,c
  6260  000E2A  D023               	goto	l4666
  6261  000E2C                     l4650:
  6262                           
  6263                           ;MemoryRoller29.c: 121: MrLeeReg ();
  6264  000E2C  ECFD  F012         	call	_MrLeeReg	;wreg free
  6265                           
  6266                           ;MemoryRoller29.c: 122: if (MrReg[0] == 255) { MrUltV = MrDirV-1; break; }
  6267  000E30  0100               	movlb	0	; () banked
  6268  000E32  29D1               	incf	_MrReg& (0+255),w,b
  6269  000E34  A4D8               	btfss	status,2,c
  6270  000E36  D007               	goto	l4658
  6271                           
  6272                           ; BSR set to: 0
  6273  000E38  0EFF               	movlw	255
  6274  000E3A  2441               	addwf	_MrDirV,w,c
  6275  000E3C  6E43               	movwf	_MrUltV,c
  6276  000E3E  0EFF               	movlw	255
  6277  000E40  2042               	addwfc	_MrDirV+1,w,c
  6278  000E42  6E44               	movwf	_MrUltV+1,c
  6279  000E44  D016               	goto	l4666
  6280  000E46                     l4658:
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;MemoryRoller29.c: 123: else if(MrReg[0]==254) {memcpy(&MrFecha12Ult,&MrReg[1],3);}
  6284  000E46  0EFE               	movlw	254
  6285  000E48  0100               	movlb	0	; () banked
  6286  000E4A  19D1               	xorwf	_MrReg& (0+255),w,b
  6287  000E4C  A4D8               	btfss	status,2,c
  6288  000E4E  D00E               	goto	l4662
  6289                           
  6290                           ; BSR set to: 0
  6291  000E50  0EEF               	movlw	low _MrFecha12Ult
  6292  000E52  6E19               	movwf	memcpy@d1,c
  6293  000E54  0E00               	movlw	high _MrFecha12Ult
  6294  000E56  6E1A               	movwf	memcpy@d1+1,c
  6295  000E58  0ED2               	movlw	low (_MrReg+1)
  6296  000E5A  6E1B               	movwf	memcpy@s1,c
  6297  000E5C  0E00               	movlw	high (_MrReg+1)
  6298  000E5E  6E1C               	movwf	memcpy@s1+1,c
  6299  000E60  0E00               	movlw	0
  6300  000E62  6E1E               	movwf	memcpy@n+1,c
  6301  000E64  0E03               	movlw	3
  6302  000E66  6E1D               	movwf	memcpy@n,c
  6303  000E68  ECE9  F010         	call	_memcpy	;wreg free
  6304  000E6C                     l4662:
  6305  000E6C  4A41               	infsnz	_MrDirV,f,c
  6306  000E6E  2A42               	incf	_MrDirV+1,f,c
  6307  000E70  D7D5               	goto	l4646
  6308  000E72                     l4666:
  6309                           
  6310                           ;MemoryRoller29.c: 124: }
  6311                           ;MemoryRoller29.c: 127: if (MrDirV == 0) {
  6312  000E72  5041               	movf	_MrDirV,w,c
  6313  000E74  1042               	iorwf	_MrDirV+1,w,c
  6314  000E76  A4D8               	btfss	status,2,c
  6315  000E78  D012               	goto	l4678
  6316                           
  6317                           ;MemoryRoller29.c: 128: MrDirV = 1000-1;
  6318  000E7A  0E03               	movlw	3
  6319  000E7C  6E42               	movwf	_MrDirV+1,c
  6320  000E7E  0EE7               	movlw	231
  6321  000E80  6E41               	movwf	_MrDirV,c
  6322                           
  6323                           ;MemoryRoller29.c: 129: MrLeeReg();
  6324  000E82  ECFD  F012         	call	_MrLeeReg	;wreg free
  6325                           
  6326                           ;MemoryRoller29.c: 130: if (MrReg[0] == 255) { MrUltV = 1000-2; }
  6327  000E86  0100               	movlb	0	; () banked
  6328  000E88  29D1               	incf	_MrReg& (0+255),w,b
  6329  000E8A  A4D8               	btfss	status,2,c
  6330  000E8C  D004               	goto	l4676
  6331                           
  6332                           ; BSR set to: 0
  6333  000E8E  0E03               	movlw	3
  6334  000E90  6E44               	movwf	_MrUltV+1,c
  6335  000E92  0EE6               	movlw	230
  6336  000E94  D003               	goto	L1
  6337  000E96                     l4676:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;MemoryRoller29.c: 131: else { MrUltV = 1000-1; }
  6341  000E96  0E03               	movlw	3
  6342  000E98  6E44               	movwf	_MrUltV+1,c
  6343  000E9A  0EE7               	movlw	231
  6344  000E9C                     L1:
  6345  000E9C  6E43               	movwf	_MrUltV,c
  6346  000E9E                     l4678:
  6347                           
  6348                           ;MemoryRoller29.c: 132: }
  6349                           ;MemoryRoller29.c: 133: if (MrDirV >= 1000) {
  6350  000E9E  BE42               	btfsc	_MrDirV+1,7,c
  6351  000EA0  D019               	goto	l4684
  6352  000EA2  0EE8               	movlw	232
  6353  000EA4  5C41               	subwf	_MrDirV,w,c
  6354  000EA6  0E03               	movlw	3
  6355  000EA8  5842               	subwfb	_MrDirV+1,w,c
  6356  000EAA  A0D8               	btfss	status,0,c
  6357  000EAC  D013               	goto	l4684
  6358                           
  6359                           ;MemoryRoller29.c: 135: _MrPreparaPor ();
  6360  000EAE  ECA0  F011         	call	__MrPreparaPor	;wreg free
  6361                           
  6362                           ;MemoryRoller29.c: 136: _MrEsc (1000-1, MrRegAux);
  6363  000EB2  0E03               	movlw	3
  6364  000EB4  0101               	movlb	1	; () banked
  6365  000EB6  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6366  000EB8  0EE7               	movlw	231
  6367  000EBA  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6368  000EBC  0E6C               	movlw	low _MrRegAux
  6369  000EBE  0101               	movlb	1	; () banked
  6370  000EC0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6371  000EC2  0E01               	movlw	high _MrRegAux
  6372  000EC4  0101               	movlb	1	; () banked
  6373  000EC6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6374  000EC8  EC61  F012         	call	__MrEsc	;wreg free
  6375                           
  6376                           ;MemoryRoller29.c: 137: MrUltV = 1000-2;
  6377  000ECC  0E03               	movlw	3
  6378  000ECE  6E44               	movwf	_MrUltV+1,c
  6379  000ED0  0EE6               	movlw	230
  6380  000ED2  6E43               	movwf	_MrUltV,c
  6381  000ED4                     l4684:
  6382                           
  6383                           ;MemoryRoller29.c: 138: }
  6384                           ;MemoryRoller29.c: 141: if (MrFecha12Ult == 0) {
  6385  000ED4  0100               	movlb	0	; () banked
  6386  000ED6  51EF               	movf	_MrFecha12Ult& (0+255),w,b
  6387  000ED8  0100               	movlb	0	; () banked
  6388  000EDA  11F0               	iorwf	(_MrFecha12Ult+1)& (0+255),w,b
  6389  000EDC  0100               	movlb	0	; () banked
  6390  000EDE  11F1               	iorwf	(_MrFecha12Ult+2)& (0+255),w,b
  6391  000EE0  0100               	movlb	0	; () banked
  6392  000EE2  11F2               	iorwf	(_MrFecha12Ult+3)& (0+255),w,b
  6393  000EE4  A4D8               	btfss	status,2,c
  6394  000EE6  D024               	goto	l421
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;MemoryRoller29.c: 142: for (MrDirV = 1000-1; MrDirV >= 0; MrDirV--) {
  6398  000EE8  0E03               	movlw	3
  6399  000EEA  6E42               	movwf	_MrDirV+1,c
  6400  000EEC  0EE7               	movlw	231
  6401  000EEE  6E41               	movwf	_MrDirV,c
  6402  000EF0                     l4688:
  6403                           
  6404                           ; BSR set to: 0
  6405  000EF0  BE42               	btfsc	_MrDirV+1,7,c
  6406  000EF2  D01E               	goto	l421
  6407                           
  6408                           ;MemoryRoller29.c: 143: MrLeeReg ();
  6409                           
  6410                           ; BSR set to: 0
  6411                           
  6412                           ; BSR set to: 0
  6413  000EF4  ECFD  F012         	call	_MrLeeReg	;wreg free
  6414                           
  6415                           ;MemoryRoller29.c: 144: if (MrReg[0] == 255) {break;}
  6416  000EF8  0100               	movlb	0	; () banked
  6417  000EFA  29D1               	incf	_MrReg& (0+255),w,b
  6418  000EFC  B4D8               	btfsc	status,2,c
  6419  000EFE  D018               	goto	l421
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;MemoryRoller29.c: 145: if (MrReg[0] == 254) {
  6423                           
  6424                           ; BSR set to: 0
  6425                           
  6426                           ; BSR set to: 0
  6427  000F00  0EFE               	movlw	254
  6428  000F02  0100               	movlb	0	; () banked
  6429  000F04  19D1               	xorwf	_MrReg& (0+255),w,b
  6430  000F06  A4D8               	btfss	status,2,c
  6431  000F08  D00F               	goto	l4702
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;MemoryRoller29.c: 146: memcpy(&MrFecha12Ult, &MrReg[1], 3);
  6435  000F0A  0EEF               	movlw	low _MrFecha12Ult
  6436  000F0C  6E19               	movwf	memcpy@d1,c
  6437  000F0E  0E00               	movlw	high _MrFecha12Ult
  6438  000F10  6E1A               	movwf	memcpy@d1+1,c
  6439  000F12  0ED2               	movlw	low (_MrReg+1)
  6440  000F14  6E1B               	movwf	memcpy@s1,c
  6441  000F16  0E00               	movlw	high (_MrReg+1)
  6442  000F18  6E1C               	movwf	memcpy@s1+1,c
  6443  000F1A  0E00               	movlw	0
  6444  000F1C  6E1E               	movwf	memcpy@n+1,c
  6445  000F1E  0E03               	movlw	3
  6446  000F20  6E1D               	movwf	memcpy@n,c
  6447  000F22  ECE9  F010         	call	_memcpy	;wreg free
  6448                           
  6449                           ;MemoryRoller29.c: 147: break;
  6450  000F26  D004               	goto	l421
  6451  000F28                     l4702:
  6452  000F28  0641               	decf	_MrDirV,f,c
  6453  000F2A  A0D8               	btfss	status,0,c
  6454  000F2C  0642               	decf	_MrDirV+1,f,c
  6455  000F2E  D7E0               	goto	l4688
  6456  000F30                     l421:
  6457                           
  6458                           ;MemoryRoller29.c: 148: }
  6459                           ;MemoryRoller29.c: 149: }
  6460                           ;MemoryRoller29.c: 150: }
  6461                           ;MemoryRoller29.c: 152: MrDirV = MrUltV;
  6462  000F30  C043  F041         	movff	_MrUltV,_MrDirV
  6463  000F34  C044  F042         	movff	_MrUltV+1,_MrDirV+1
  6464  000F38  0012               	return		;funcret
  6465  000F3A                     __end_of_MrInit:
  6466                           	opt stack 0
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           intcon	equ	0xFF2
  6472                           postinc0	equ	0xFEE
  6473                           wreg	equ	0xFE8
  6474                           postdec1	equ	0xFE5
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           fsr2h	equ	0xFDA
  6480                           fsr2l	equ	0xFD9
  6481                           status	equ	0xFD8
  6482                           
  6483 ;; *************** function _MrLeeReg *****************
  6484 ;; Defined at:
  6485 ;;		line 201 in file "MemoryRoller29.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6499 ;;      Params:         0       0       0       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    8
  6506 ;; This function calls:
  6507 ;;		__MrLee
  6508 ;; This function is called by:
  6509 ;;		_MrInit
  6510 ;;		_Ppal_RsComando
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text35
  6515  0025FA                     __ptext35:
  6516                           	opt stack 0
  6517  0025FA                     _MrLeeReg:
  6518                           	opt stack 19
  6519                           
  6520                           ;MemoryRoller29.c: 203: _MrLee (MrDirV, MrReg);
  6521                           
  6522                           ;incstack = 0
  6523  0025FA  C041  F17D         	movff	_MrDirV,__MrLee@MrNReg
  6524  0025FE  C042  F17E         	movff	_MrDirV+1,__MrLee@MrNReg+1
  6525  002602  0ED1               	movlw	low _MrReg
  6526  002604  0101               	movlb	1	; () banked
  6527  002606  6F7F               	movwf	__MrLee@MrReg1& (0+255),b
  6528  002608  0E00               	movlw	high _MrReg
  6529  00260A  0101               	movlb	1	; () banked
  6530  00260C  6F80               	movwf	(__MrLee@MrReg1+1)& (0+255),b
  6531  00260E  EC4C  F012         	call	__MrLee	;wreg free
  6532  002612  0012               	return		;funcret
  6533  002614                     __end_of_MrLeeReg:
  6534                           	opt stack 0
  6535                           tblptru	equ	0xFF8
  6536                           tblptrh	equ	0xFF7
  6537                           tblptrl	equ	0xFF6
  6538                           tablat	equ	0xFF5
  6539                           intcon	equ	0xFF2
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function __MrLee *****************
  6552 ;; Defined at:
  6553 ;;		line 301 in file "MemoryRoller29.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  MrNReg          2    4[BANK1 ] unsigned int 
  6556 ;;  MrReg1          2    6[BANK1 ] PTR unsigned char 
  6557 ;;		 -> MrReg(13), 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6569 ;;      Params:         0       0       4       0       0       0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6572 ;;      Totals:         0       0       4       0       0       0       0       0       0
  6573 ;;Total ram usage:        4 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    7
  6576 ;; This function calls:
  6577 ;;		_MseLee
  6578 ;;		__CalculaRegPos
  6579 ;; This function is called by:
  6580 ;;		_MrLeeReg
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text36
  6585  002498                     __ptext36:
  6586                           	opt stack 0
  6587  002498                     __MrLee:
  6588                           	opt stack 19
  6589                           
  6590                           ;MemoryRoller29.c: 303: _CalculaRegPos (MrNReg);
  6591                           
  6592                           ;incstack = 0
  6593  002498  C17D  F020         	movff	__MrLee@MrNReg,__CalculaRegPos@MrNReg1
  6594  00249C  C17E  F021         	movff	__MrLee@MrNReg+1,__CalculaRegPos@MrNReg1+1
  6595  0024A0  EC78  F00D         	call	__CalculaRegPos	;wreg free
  6596                           
  6597                           ;MemoryRoller29.c: 304: MseLee (MrRegPos, MrReg1, 8);
  6598  0024A4  C07E  F029         	movff	_MrRegPos,MseLee@Dir
  6599  0024A8  C07F  F02A         	movff	_MrRegPos+1,MseLee@Dir+1
  6600  0024AC  C17F  F02B         	movff	__MrLee@MrReg1,MseLee@Datos
  6601  0024B0  C180  F02C         	movff	__MrLee@MrReg1+1,MseLee@Datos+1
  6602  0024B4  0E00               	movlw	0
  6603  0024B6  6E2E               	movwf	MseLee@NBytes+1,c
  6604  0024B8  0E08               	movlw	8
  6605  0024BA  6E2D               	movwf	MseLee@NBytes,c
  6606  0024BC  EC88  F005         	call	_MseLee	;wreg free
  6607  0024C0  0012               	return		;funcret
  6608  0024C2                     __end_of__MrLee:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           intcon	equ	0xFF2
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           postdec1	equ	0xFE5
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function _MseLee *****************
  6627 ;; Defined at:
  6628 ;;		line 48 in file "Mse21.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  Dir             2   40[COMRAM] unsigned int 
  6631 ;;  Datos           2   42[COMRAM] PTR unsigned char 
  6632 ;;		 -> MrReg(13), RsTxBuffer(30), 
  6633 ;;  NBytes          2   44[COMRAM] int 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  Index           4    0[BANK1 ] long 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      void 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6645 ;;      Params:         6       0       0       0       0       0       0       0       0
  6646 ;;      Locals:         0       0       4       0       0       0       0       0       0
  6647 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6648 ;;      Totals:         6       5       4       0       0       0       0       0       0
  6649 ;;Total ram usage:       15 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    6
  6652 ;; This function calls:
  6653 ;;		_I2CEscByte
  6654 ;;		_I2CLeeByte
  6655 ;;		_I2CSendAck
  6656 ;;		_I2CSendNAck
  6657 ;;		_I2CStart
  6658 ;;		_I2CStop
  6659 ;; This function is called by:
  6660 ;;		__MrLee
  6661 ;;		_Ppal_RsComando
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text37
  6666  000B10                     __ptext37:
  6667                           	opt stack 0
  6668  000B10                     _MseLee:
  6669                           	opt stack 19
  6670                           
  6671                           ;Mse21.c: 50: long Index;
  6672                           ;Mse21.c: 52: I2CAck = 0;
  6673                           
  6674                           ;incstack = 0
  6675  000B10  0E00               	movlw	0
  6676  000B12  0100               	movlb	0	; () banked
  6677  000B14  6F8F               	movwf	(_I2CAck+1)& (0+255),b
  6678  000B16  0E00               	movlw	0
  6679  000B18  6F8E               	movwf	_I2CAck& (0+255),b
  6680                           
  6681                           ;Mse21.c: 53: for (Index = 0; (Index<100000) & (!I2CAck); Index++) {
  6682  000B1A  0E00               	movlw	0
  6683  000B1C  0101               	movlb	1	; () banked
  6684  000B1E  6F79               	movwf	MseLee@Index& (0+255),b
  6685  000B20  0E00               	movlw	0
  6686  000B22  6F7A               	movwf	(MseLee@Index+1)& (0+255),b
  6687  000B24  0E00               	movlw	0
  6688  000B26  6F7B               	movwf	(MseLee@Index+2)& (0+255),b
  6689  000B28  0E00               	movlw	0
  6690  000B2A  6F7C               	movwf	(MseLee@Index+3)& (0+255),b
  6691  000B2C  D00F               	goto	l4276
  6692  000B2E                     l4270:
  6693                           
  6694                           ;Mse21.c: 54: I2CStart();
  6695  000B2E  ECED  F011         	call	_I2CStart	;wreg free
  6696                           
  6697                           ;Mse21.c: 55: I2CEscByte(0xA0);
  6698  000B32  0E00               	movlw	0
  6699  000B34  6E26               	movwf	I2CEscByte@I2CByte+1,c
  6700  000B36  0EA0               	movlw	160
  6701  000B38  6E25               	movwf	I2CEscByte@I2CByte,c
  6702  000B3A  ECE6  F00C         	call	_I2CEscByte	;wreg free
  6703  000B3E  0E01               	movlw	1
  6704  000B40  0101               	movlb	1	; () banked
  6705  000B42  2779               	addwf	MseLee@Index& (0+255),f,b
  6706  000B44  0E00               	movlw	0
  6707  000B46  237A               	addwfc	(MseLee@Index+1)& (0+255),f,b
  6708  000B48  237B               	addwfc	(MseLee@Index+2)& (0+255),f,b
  6709  000B4A  237C               	addwfc	(MseLee@Index+3)& (0+255),f,b
  6710  000B4C                     l4276:
  6711                           
  6712                           ; BSR set to: 1
  6713  000B4C  0101               	movlb	1	; () banked
  6714  000B4E  BF7C               	btfsc	(MseLee@Index+3)& (0+255),7,b
  6715  000B50  D00E               	goto	l4278
  6716  000B52  0101               	movlb	1	; () banked
  6717  000B54  517C               	movf	(MseLee@Index+3)& (0+255),w,b
  6718  000B56  E111               	bnz	l4280
  6719  000B58  0EA0               	movlw	160
  6720  000B5A  0101               	movlb	1	; () banked
  6721  000B5C  5D79               	subwf	MseLee@Index& (0+255),w,b
  6722  000B5E  0E86               	movlw	134
  6723  000B60  0101               	movlb	1	; () banked
  6724  000B62  597A               	subwfb	(MseLee@Index+1)& (0+255),w,b
  6725  000B64  0E01               	movlw	1
  6726  000B66  0101               	movlb	1	; () banked
  6727  000B68  597B               	subwfb	(MseLee@Index+2)& (0+255),w,b
  6728  000B6A  B0D8               	btfsc	status,0,c
  6729  000B6C  D006               	goto	l4280
  6730  000B6E                     l4278:
  6731                           
  6732                           ; BSR set to: 1
  6733  000B6E  0100               	movlb	0	; () banked
  6734  000B70  518E               	movf	_I2CAck& (0+255),w,b
  6735  000B72  0100               	movlb	0	; () banked
  6736  000B74  118F               	iorwf	(_I2CAck+1)& (0+255),w,b
  6737  000B76  B4D8               	btfsc	status,2,c
  6738  000B78  D7DA               	goto	l4270
  6739  000B7A                     l4280:
  6740                           
  6741                           ;Mse21.c: 56: }
  6742                           ;Mse21.c: 57: I2CEscByte((Dir>>8) & 0xFF);
  6743  000B7A  C029  F0F5         	movff	MseLee@Dir,??_MseLee
  6744  000B7E  C02A  F0F6         	movff	MseLee@Dir+1,??_MseLee+1
  6745  000B82  C0F6  F0F5         	movff	??_MseLee+1,??_MseLee
  6746  000B86  0100               	movlb	0	; () banked
  6747  000B88  6BF6               	clrf	(??_MseLee+1)& (0+255),b
  6748  000B8A  0100               	movlb	0	; () banked
  6749  000B8C  51F5               	movf	??_MseLee& (0+255),w,b
  6750  000B8E  6E25               	movwf	I2CEscByte@I2CByte,c
  6751  000B90  6A26               	clrf	I2CEscByte@I2CByte+1,c
  6752  000B92  ECE6  F00C         	call	_I2CEscByte	;wreg free
  6753                           
  6754                           ;Mse21.c: 58: I2CEscByte(Dir & 0xFF);
  6755  000B96  5029               	movf	MseLee@Dir,w,c
  6756  000B98  6E25               	movwf	I2CEscByte@I2CByte,c
  6757  000B9A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  6758  000B9C  ECE6  F00C         	call	_I2CEscByte	;wreg free
  6759                           
  6760                           ;Mse21.c: 59: I2CStart();
  6761  000BA0  ECED  F011         	call	_I2CStart	;wreg free
  6762                           
  6763                           ;Mse21.c: 60: I2CEscByte(0xA1);
  6764  000BA4  0E00               	movlw	0
  6765  000BA6  6E26               	movwf	I2CEscByte@I2CByte+1,c
  6766  000BA8  0EA1               	movlw	161
  6767  000BAA  6E25               	movwf	I2CEscByte@I2CByte,c
  6768  000BAC  ECE6  F00C         	call	_I2CEscByte	;wreg free
  6769                           
  6770                           ;Mse21.c: 61: for (Index = 0; Index < (NBytes-1); Index++) {
  6771  000BB0  0E00               	movlw	0
  6772  000BB2  0101               	movlb	1	; () banked
  6773  000BB4  6F79               	movwf	MseLee@Index& (0+255),b
  6774  000BB6  0E00               	movlw	0
  6775  000BB8  6F7A               	movwf	(MseLee@Index+1)& (0+255),b
  6776  000BBA  0E00               	movlw	0
  6777  000BBC  6F7B               	movwf	(MseLee@Index+2)& (0+255),b
  6778  000BBE  0E00               	movlw	0
  6779  000BC0  6F7C               	movwf	(MseLee@Index+3)& (0+255),b
  6780  000BC2  D015               	goto	l4294
  6781  000BC4                     l4288:
  6782                           
  6783                           ;Mse21.c: 62: Datos[Index] = I2CLeeByte();
  6784  000BC4  0101               	movlb	1	; () banked
  6785  000BC6  5179               	movf	MseLee@Index& (0+255),w,b
  6786  000BC8  242B               	addwf	MseLee@Datos,w,c
  6787  000BCA  6ED9               	movwf	fsr2l,c
  6788  000BCC  0101               	movlb	1	; () banked
  6789  000BCE  517A               	movf	(MseLee@Index+1)& (0+255),w,b
  6790  000BD0  202C               	addwfc	MseLee@Datos+1,w,c
  6791  000BD2  6EDA               	movwf	fsr2h,c
  6792  000BD4  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  6793  000BD8  5019               	movf	?_I2CLeeByte,w,c
  6794  000BDA  6EDF               	movwf	indf2,c
  6795                           
  6796                           ;Mse21.c: 63: I2CSendAck();
  6797  000BDC  EC48  F011         	call	_I2CSendAck	;wreg free
  6798  000BE0  0E01               	movlw	1
  6799  000BE2  0101               	movlb	1	; () banked
  6800  000BE4  2779               	addwf	MseLee@Index& (0+255),f,b
  6801  000BE6  0E00               	movlw	0
  6802  000BE8  237A               	addwfc	(MseLee@Index+1)& (0+255),f,b
  6803  000BEA  237B               	addwfc	(MseLee@Index+2)& (0+255),f,b
  6804  000BEC  237C               	addwfc	(MseLee@Index+3)& (0+255),f,b
  6805  000BEE                     l4294:
  6806                           
  6807                           ; BSR set to: 1
  6808  000BEE  0EFF               	movlw	255
  6809  000BF0  242D               	addwf	MseLee@NBytes,w,c
  6810  000BF2  0100               	movlb	0	; () banked
  6811  000BF4  6FF5               	movwf	??_MseLee& (0+255),b
  6812  000BF6  0EFF               	movlw	255
  6813  000BF8  202E               	addwfc	MseLee@NBytes+1,w,c
  6814  000BFA  0100               	movlb	0	; () banked
  6815  000BFC  6FF6               	movwf	(??_MseLee+1)& (0+255),b
  6816  000BFE  0100               	movlb	0	; () banked
  6817  000C00  6BF7               	clrf	(??_MseLee+2)& (0+255),b
  6818  000C02  0100               	movlb	0	; () banked
  6819  000C04  BFF6               	btfsc	(??_MseLee+1)& (0+255),7,b
  6820  000C06  07F7               	decf	(??_MseLee+2)& (0+255),f,b
  6821  000C08  0100               	movlb	0	; () banked
  6822  000C0A  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6823  000C0C  0100               	movlb	0	; () banked
  6824  000C0E  6FF8               	movwf	(??_MseLee+3)& (0+255),b
  6825  000C10  0100               	movlb	0	; () banked
  6826  000C12  51F5               	movf	??_MseLee& (0+255),w,b
  6827  000C14  0101               	movlb	1	; () banked
  6828  000C16  5D79               	subwf	MseLee@Index& (0+255),w,b
  6829  000C18  0100               	movlb	0	; () banked
  6830  000C1A  51F6               	movf	(??_MseLee+1)& (0+255),w,b
  6831  000C1C  0101               	movlb	1	; () banked
  6832  000C1E  597A               	subwfb	(MseLee@Index+1)& (0+255),w,b
  6833  000C20  0100               	movlb	0	; () banked
  6834  000C22  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6835  000C24  0101               	movlb	1	; () banked
  6836  000C26  597B               	subwfb	(MseLee@Index+2)& (0+255),w,b
  6837  000C28  0101               	movlb	1	; () banked
  6838  000C2A  517C               	movf	(MseLee@Index+3)& (0+255),w,b
  6839  000C2C  0A80               	xorlw	128
  6840  000C2E  0100               	movlb	0	; () banked
  6841  000C30  6FF9               	movwf	(??_MseLee+4)& (0+255),b
  6842  000C32  0100               	movlb	0	; () banked
  6843  000C34  51F8               	movf	(??_MseLee+3)& (0+255),w,b
  6844  000C36  0A80               	xorlw	128
  6845  000C38  0100               	movlb	0	; () banked
  6846  000C3A  59F9               	subwfb	(??_MseLee+4)& (0+255),w,b
  6847  000C3C  A0D8               	btfss	status,0,c
  6848  000C3E  D7C2               	goto	l4288
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;Mse21.c: 64: }
  6852                           ;Mse21.c: 65: Datos[NBytes-1] = I2CLeeByte();
  6853                           
  6854                           ; BSR set to: 0
  6855  000C40  0EFF               	movlw	255
  6856  000C42  0100               	movlb	0	; () banked
  6857  000C44  6FF5               	movwf	??_MseLee& (0+255),b
  6858  000C46  0EFF               	movlw	255
  6859  000C48  0100               	movlb	0	; () banked
  6860  000C4A  6FF6               	movwf	(??_MseLee+1)& (0+255),b
  6861  000C4C  C02D  F0F7         	movff	MseLee@NBytes,??_MseLee+2
  6862  000C50  C02E  F0F8         	movff	MseLee@NBytes+1,??_MseLee+3
  6863  000C54  0100               	movlb	0	; () banked
  6864  000C56  51F5               	movf	??_MseLee& (0+255),w,b
  6865  000C58  0100               	movlb	0	; () banked
  6866  000C5A  27F7               	addwf	(??_MseLee+2)& (0+255),f,b
  6867  000C5C  0100               	movlb	0	; () banked
  6868  000C5E  51F6               	movf	(??_MseLee+1)& (0+255),w,b
  6869  000C60  0100               	movlb	0	; () banked
  6870  000C62  23F8               	addwfc	(??_MseLee+3)& (0+255),f,b
  6871  000C64  0100               	movlb	0	; () banked
  6872  000C66  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6873  000C68  242B               	addwf	MseLee@Datos,w,c
  6874  000C6A  6ED9               	movwf	fsr2l,c
  6875  000C6C  0100               	movlb	0	; () banked
  6876  000C6E  51F8               	movf	(??_MseLee+3)& (0+255),w,b
  6877  000C70  202C               	addwfc	MseLee@Datos+1,w,c
  6878  000C72  6EDA               	movwf	fsr2h,c
  6879  000C74  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  6880  000C78  5019               	movf	?_I2CLeeByte,w,c
  6881  000C7A  6EDF               	movwf	indf2,c
  6882                           
  6883                           ;Mse21.c: 66: I2CSendNAck();
  6884  000C7C  ECBA  F011         	call	_I2CSendNAck	;wreg free
  6885                           
  6886                           ;Mse21.c: 67: I2CStop();
  6887  000C80  EC8A  F012         	call	_I2CStop	;wreg free
  6888                           
  6889                           ;Mse21.c: 68: MseUltDirLeido = Dir;
  6890  000C84  C029  F0A0         	movff	MseLee@Dir,_MseUltDirLeido
  6891  000C88  C02A  F0A1         	movff	MseLee@Dir+1,_MseUltDirLeido+1
  6892  000C8C  0012               	return		;funcret
  6893  000C8E                     __end_of_MseLee:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           intcon	equ	0xFF2
  6900                           postinc0	equ	0xFEE
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _MrFormat *****************
  6912 ;; Defined at:
  6913 ;;		line 87 in file "MemoryRoller29.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    8
  6934 ;; This function calls:
  6935 ;;		_MrInicializa
  6936 ;;		_MrSeparaFecha
  6937 ;;		_RtcLee
  6938 ;;		__MrEsc
  6939 ;;		__MrPreparaFecha
  6940 ;;		__MrPreparaPor
  6941 ;; This function is called by:
  6942 ;;		_Ppal_RsComando
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text38
  6947  001868                     __ptext38:
  6948                           	opt stack 0
  6949  001868                     _MrFormat:
  6950                           	opt stack 18
  6951                           
  6952                           ;MemoryRoller29.c: 88: MrInicializa ();
  6953                           
  6954                           ;incstack = 0
  6955  001868  EC62  F00E         	call	_MrInicializa	;wreg free
  6956                           
  6957                           ;MemoryRoller29.c: 90: MrInicializado = 1;
  6958  00186C  8046               	bsf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  6959                           
  6960                           ;MemoryRoller29.c: 91: MrRegsXGpo = 32 / 8;
  6961  00186E  0E00               	movlw	0
  6962  001870  0100               	movlb	0	; () banked
  6963  001872  6F9F               	movwf	(_MrRegsXGpo+1)& (0+255),b
  6964  001874  0E04               	movlw	4
  6965  001876  6F9E               	movwf	_MrRegsXGpo& (0+255),b
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;MemoryRoller29.c: 97: _MrPreparaPor ();
  6969  001878  ECA0  F011         	call	__MrPreparaPor	;wreg free
  6970                           
  6971                           ;MemoryRoller29.c: 98: _MrEsc (1000-1, MrRegAux);
  6972  00187C  0E03               	movlw	3
  6973  00187E  0101               	movlb	1	; () banked
  6974  001880  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6975  001882  0EE7               	movlw	231
  6976  001884  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6977  001886  0E6C               	movlw	low _MrRegAux
  6978  001888  0101               	movlb	1	; () banked
  6979  00188A  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6980  00188C  0E01               	movlw	high _MrRegAux
  6981  00188E  0101               	movlb	1	; () banked
  6982  001890  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6983  001892  EC61  F012         	call	__MrEsc	;wreg free
  6984                           
  6985                           ;MemoryRoller29.c: 99: _MrEsc (1, MrRegAux);
  6986  001896  0E00               	movlw	0
  6987  001898  0101               	movlb	1	; () banked
  6988  00189A  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6989  00189C  0E01               	movlw	1
  6990  00189E  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6991  0018A0  0E6C               	movlw	low _MrRegAux
  6992  0018A2  0101               	movlb	1	; () banked
  6993  0018A4  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6994  0018A6  0E01               	movlw	high _MrRegAux
  6995  0018A8  0101               	movlb	1	; () banked
  6996  0018AA  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6997  0018AC  EC61  F012         	call	__MrEsc	;wreg free
  6998                           
  6999                           ;MemoryRoller29.c: 102: MrFecha12 = 0;
  7000  0018B0  0E00               	movlw	0
  7001  0018B2  6E3D               	movwf	_MrFecha12,c
  7002  0018B4  0E00               	movlw	0
  7003  0018B6  6E3E               	movwf	_MrFecha12+1,c
  7004  0018B8  0E00               	movlw	0
  7005  0018BA  6E3F               	movwf	_MrFecha12+2,c
  7006  0018BC  0E00               	movlw	0
  7007  0018BE  6E40               	movwf	_MrFecha12+3,c
  7008                           
  7009                           ;MemoryRoller29.c: 103: RtcLee ();
  7010  0018C0  ECB0  F00A         	call	_RtcLee	;wreg free
  7011                           
  7012                           ;MemoryRoller29.c: 104: MrSeparaFecha ();
  7013  0018C4  ECC8  F008         	call	_MrSeparaFecha	;wreg free
  7014                           
  7015                           ;MemoryRoller29.c: 105: MrFecha12Ult = 0;
  7016  0018C8  0E00               	movlw	0
  7017  0018CA  0100               	movlb	0	; () banked
  7018  0018CC  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  7019  0018CE  0E00               	movlw	0
  7020  0018D0  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  7021  0018D2  0E00               	movlw	0
  7022  0018D4  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  7023  0018D6  0E00               	movlw	0
  7024  0018D8  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;MemoryRoller29.c: 106: _MrPreparaFecha();
  7028  0018DA  EC97  F00E         	call	__MrPreparaFecha	;wreg free
  7029                           
  7030                           ;MemoryRoller29.c: 107: _MrEsc (0, MrRegAux);
  7031  0018DE  0E00               	movlw	0
  7032  0018E0  0101               	movlb	1	; () banked
  7033  0018E2  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  7034  0018E4  0E00               	movlw	0
  7035  0018E6  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  7036  0018E8  0E6C               	movlw	low _MrRegAux
  7037  0018EA  0101               	movlb	1	; () banked
  7038  0018EC  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7039  0018EE  0E01               	movlw	high _MrRegAux
  7040  0018F0  0101               	movlb	1	; () banked
  7041  0018F2  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7042  0018F4  EC61  F012         	call	__MrEsc	;wreg free
  7043                           
  7044                           ;MemoryRoller29.c: 109: MrFecha12Ult = MrFecha12;
  7045  0018F8  C03D  F0EF         	movff	_MrFecha12,_MrFecha12Ult
  7046  0018FC  C03E  F0F0         	movff	_MrFecha12+1,_MrFecha12Ult+1
  7047  001900  C03F  F0F1         	movff	_MrFecha12+2,_MrFecha12Ult+2
  7048  001904  C040  F0F2         	movff	_MrFecha12+3,_MrFecha12Ult+3
  7049                           
  7050                           ;MemoryRoller29.c: 110: MrUltV = 0;
  7051  001908  0E00               	movlw	0
  7052  00190A  6E44               	movwf	_MrUltV+1,c
  7053  00190C  0E00               	movlw	0
  7054  00190E  6E43               	movwf	_MrUltV,c
  7055                           
  7056                           ;MemoryRoller29.c: 111: MrDirV = 0;
  7057  001910  0E00               	movlw	0
  7058  001912  6E42               	movwf	_MrDirV+1,c
  7059  001914  0E00               	movlw	0
  7060  001916  6E41               	movwf	_MrDirV,c
  7061  001918  0012               	return		;funcret
  7062  00191A                     __end_of_MrFormat:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           intcon	equ	0xFF2
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           postdec1	equ	0xFE5
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           postdec2	equ	0xFDD
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _MrInicializa *****************
  7081 ;; Defined at:
  7082 ;;		line 72 in file "MemoryRoller29.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  Ind             2   24[COMRAM] unsigned short 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0
  7097 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7099 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7100 ;;Total ram usage:        2 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    5
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_MrFormat
  7107 ;;		_MrInit
  7108 ;;		_Ppal_Init
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text39
  7113  001CC4                     __ptext39:
  7114                           	opt stack 0
  7115  001CC4                     _MrInicializa:
  7116                           	opt stack 22
  7117                           
  7118                           ;MemoryRoller29.c: 73: unsigned short Ind;
  7119                           ;MemoryRoller29.c: 79: MrInicializado = 0;
  7120                           
  7121                           ;incstack = 0
  7122  001CC4  9046               	bcf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  7123                           
  7124                           ;MemoryRoller29.c: 80: MrFecha12Ult = 0;
  7125  001CC6  0E00               	movlw	0
  7126  001CC8  0100               	movlb	0	; () banked
  7127  001CCA  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  7128  001CCC  0E00               	movlw	0
  7129  001CCE  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  7130  001CD0  0E00               	movlw	0
  7131  001CD2  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  7132  001CD4  0E00               	movlw	0
  7133  001CD6  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  7134                           
  7135                           ;MemoryRoller29.c: 81: for (Ind = 0; Ind < 8; Ind++) { MrReg[Ind]=0; MrRegAux[Ind]=1; }
  7136  001CD8  0E00               	movlw	0
  7137  001CDA  6E1A               	movwf	MrInicializa@Ind+1,c
  7138  001CDC  0E00               	movlw	0
  7139  001CDE  6E19               	movwf	MrInicializa@Ind,c
  7140  001CE0                     l4508:
  7141                           
  7142                           ; BSR set to: 0
  7143  001CE0  501A               	movf	MrInicializa@Ind+1,w,c
  7144  001CE2  E117               	bnz	l4518
  7145  001CE4  0E08               	movlw	8
  7146  001CE6  5C19               	subwf	MrInicializa@Ind,w,c
  7147  001CE8  B0D8               	btfsc	status,0,c
  7148  001CEA  D013               	goto	l4518
  7149                           
  7150                           ; BSR set to: 0
  7151                           
  7152                           ; BSR set to: 0
  7153  001CEC  0ED1               	movlw	low _MrReg
  7154  001CEE  2419               	addwf	MrInicializa@Ind,w,c
  7155  001CF0  6ED9               	movwf	fsr2l,c
  7156  001CF2  0E00               	movlw	high _MrReg
  7157  001CF4  201A               	addwfc	MrInicializa@Ind+1,w,c
  7158  001CF6  6EDA               	movwf	fsr2h,c
  7159  001CF8  0E00               	movlw	0
  7160  001CFA  6EDF               	movwf	indf2,c
  7161  001CFC  0E6C               	movlw	low _MrRegAux
  7162  001CFE  2419               	addwf	MrInicializa@Ind,w,c
  7163  001D00  6ED9               	movwf	fsr2l,c
  7164  001D02  0E01               	movlw	high _MrRegAux
  7165  001D04  201A               	addwfc	MrInicializa@Ind+1,w,c
  7166  001D06  6EDA               	movwf	fsr2h,c
  7167  001D08  0E01               	movlw	1
  7168  001D0A  6EDF               	movwf	indf2,c
  7169  001D0C  4A19               	infsnz	MrInicializa@Ind,f,c
  7170  001D0E  2A1A               	incf	MrInicializa@Ind+1,f,c
  7171  001D10  D7E7               	goto	l4508
  7172  001D12                     l4518:
  7173                           
  7174                           ;MemoryRoller29.c: 82: MrRegsXGpo = 32 / 8;
  7175  001D12  0E00               	movlw	0
  7176  001D14  0100               	movlb	0	; () banked
  7177  001D16  6F9F               	movwf	(_MrRegsXGpo+1)& (0+255),b
  7178  001D18  0E04               	movlw	4
  7179  001D1A  6F9E               	movwf	_MrRegsXGpo& (0+255),b
  7180                           
  7181                           ;MemoryRoller29.c: 83: MrUltV = 0;
  7182  001D1C  0E00               	movlw	0
  7183  001D1E  6E44               	movwf	_MrUltV+1,c
  7184  001D20  0E00               	movlw	0
  7185  001D22  6E43               	movwf	_MrUltV,c
  7186                           
  7187                           ;MemoryRoller29.c: 84: MrDirV = 0;
  7188  001D24  0E00               	movlw	0
  7189  001D26  6E42               	movwf	_MrDirV+1,c
  7190  001D28  0E00               	movlw	0
  7191  001D2A  6E41               	movwf	_MrDirV,c
  7192                           
  7193                           ; BSR set to: 0
  7194  001D2C  0012               	return		;funcret
  7195  001D2E                     __end_of_MrInicializa:
  7196                           	opt stack 0
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           intcon	equ	0xFF2
  7202                           postinc0	equ	0xFEE
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function _MrAnt *****************
  7214 ;; Defined at:
  7215 ;;		line 223 in file "MemoryRoller29.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		wreg, status,2, status,0
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    5
  7236 ;; This function calls:
  7237 ;;		Nothing
  7238 ;; This function is called by:
  7239 ;;		_Ppal_RsComando
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text40
  7244  002670                     __ptext40:
  7245                           	opt stack 0
  7246  002670                     _MrAnt:
  7247                           	opt stack 21
  7248                           
  7249                           ;MemoryRoller29.c: 225: MrDirV --;
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;incstack = 0
  7253  002670  0641               	decf	_MrDirV,f,c
  7254  002672  A0D8               	btfss	status,0,c
  7255  002674  0642               	decf	_MrDirV+1,f,c
  7256                           
  7257                           ;MemoryRoller29.c: 226: if (MrDirV < 0) { MrDirV = 1000-1; }
  7258  002676  AE42               	btfss	_MrDirV+1,7,c
  7259  002678  0012               	return	
  7260  00267A  0E03               	movlw	3
  7261  00267C  6E42               	movwf	_MrDirV+1,c
  7262  00267E  0EE7               	movlw	231
  7263  002680  6E41               	movwf	_MrDirV,c
  7264  002682  0012               	return	
  7265  002684                     __end_of_MrAnt:
  7266                           	opt stack 0
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           intcon	equ	0xFF2
  7272                           postinc0	equ	0xFEE
  7273                           wreg	equ	0xFE8
  7274                           postdec1	equ	0xFE5
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           postinc2	equ	0xFDE
  7278                           postdec2	equ	0xFDD
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function _MrAgregaReg *****************
  7284 ;; Defined at:
  7285 ;;		line 155 in file "MemoryRoller29.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  MrTemp          2    8[BANK1 ] unsigned int 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0
  7300 ;;      Locals:         0       0       2       0       0       0       0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7302 ;;      Totals:         0       0       2       0       0       0       0       0       0
  7303 ;;Total ram usage:        2 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    8
  7306 ;; This function calls:
  7307 ;;		_MrSeparaFecha
  7308 ;;		_RtcLee
  7309 ;;		__MrEsc
  7310 ;;		__MrPreparaFecha
  7311 ;;		__MrPreparaPor
  7312 ;;		__MrSgte
  7313 ;;		_memcpy
  7314 ;; This function is called by:
  7315 ;;		_MioCiclo
  7316 ;;		_Ppal_RsComando
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text41
  7321  000C8E                     __ptext41:
  7322                           	opt stack 0
  7323  000C8E                     _MrAgregaReg:
  7324                           	opt stack 19
  7325                           
  7326                           ;MemoryRoller29.c: 157: unsigned int MrTemp;
  7327                           ;MemoryRoller29.c: 159: RtcLee ();
  7328                           
  7329                           ;incstack = 0
  7330  000C8E  ECB0  F00A         	call	_RtcLee	;wreg free
  7331                           
  7332                           ;MemoryRoller29.c: 160: MrSeparaFecha();
  7333  000C92  ECC8  F008         	call	_MrSeparaFecha	;wreg free
  7334                           
  7335                           ;MemoryRoller29.c: 161: MrUltV = _MrSgte (MrUltV);
  7336  000C96  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7337  000C9A  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7338  000C9E  ECEB  F012         	call	__MrSgte	;wreg free
  7339  000CA2  C019  F043         	movff	?__MrSgte,_MrUltV
  7340  000CA6  C01A  F044         	movff	?__MrSgte+1,_MrUltV+1
  7341                           
  7342                           ;MemoryRoller29.c: 162: MrTemp = _MrSgte (MrUltV);
  7343  000CAA  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7344  000CAE  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7345  000CB2  ECEB  F012         	call	__MrSgte	;wreg free
  7346  000CB6  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7347  000CBA  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7348                           
  7349                           ;MemoryRoller29.c: 163: if (MrFecha12 != MrFecha12Ult) {
  7350  000CBE  0100               	movlb	0	; () banked
  7351  000CC0  51EF               	movf	_MrFecha12Ult& (0+255),w,b
  7352  000CC2  183D               	xorwf	_MrFecha12,w,c
  7353  000CC4  E10D               	bnz	u3220
  7354  000CC6  0100               	movlb	0	; () banked
  7355  000CC8  51F0               	movf	(_MrFecha12Ult+1)& (0+255),w,b
  7356  000CCA  183E               	xorwf	_MrFecha12+1,w,c
  7357  000CCC  E109               	bnz	u3220
  7358  000CCE  0100               	movlb	0	; () banked
  7359  000CD0  51F1               	movf	(_MrFecha12Ult+2)& (0+255),w,b
  7360  000CD2  183F               	xorwf	_MrFecha12+2,w,c
  7361  000CD4  E105               	bnz	u3220
  7362  000CD6  0100               	movlb	0	; () banked
  7363  000CD8  51F2               	movf	(_MrFecha12Ult+3)& (0+255),w,b
  7364  000CDA  1840               	xorwf	_MrFecha12+3,w,c
  7365  000CDC  B4D8               	btfsc	status,2,c
  7366  000CDE  D032               	goto	l4728
  7367  000CE0                     u3220:
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;MemoryRoller29.c: 164: _MrPreparaPor ();
  7371  000CE0  ECA0  F011         	call	__MrPreparaPor	;wreg free
  7372                           
  7373                           ;MemoryRoller29.c: 165: _MrEsc (MrTemp, MrRegAux);
  7374  000CE4  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7375  000CE8  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7376  000CEC  0E6C               	movlw	low _MrRegAux
  7377  000CEE  0101               	movlb	1	; () banked
  7378  000CF0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7379  000CF2  0E01               	movlw	high _MrRegAux
  7380  000CF4  0101               	movlb	1	; () banked
  7381  000CF6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7382  000CF8  EC61  F012         	call	__MrEsc	;wreg free
  7383                           
  7384                           ;MemoryRoller29.c: 166: _MrPreparaFecha();
  7385  000CFC  EC97  F00E         	call	__MrPreparaFecha	;wreg free
  7386                           
  7387                           ;MemoryRoller29.c: 167: _MrEsc (MrUltV, MrRegAux);
  7388  000D00  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7389  000D04  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7390  000D08  0E6C               	movlw	low _MrRegAux
  7391  000D0A  0101               	movlb	1	; () banked
  7392  000D0C  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7393  000D0E  0E01               	movlw	high _MrRegAux
  7394  000D10  0101               	movlb	1	; () banked
  7395  000D12  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7396  000D14  EC61  F012         	call	__MrEsc	;wreg free
  7397                           
  7398                           ;MemoryRoller29.c: 168: MrUltV = MrTemp;
  7399  000D18  C181  F043         	movff	MrAgregaReg@MrTemp,_MrUltV
  7400  000D1C  C182  F044         	movff	MrAgregaReg@MrTemp+1,_MrUltV+1
  7401                           
  7402                           ;MemoryRoller29.c: 169: MrTemp = _MrSgte (MrUltV);
  7403  000D20  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7404  000D24  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7405  000D28  ECEB  F012         	call	__MrSgte	;wreg free
  7406  000D2C  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7407  000D30  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7408                           
  7409                           ;MemoryRoller29.c: 170: MrFecha12Ult = MrFecha12;
  7410  000D34  C03D  F0EF         	movff	_MrFecha12,_MrFecha12Ult
  7411  000D38  C03E  F0F0         	movff	_MrFecha12+1,_MrFecha12Ult+1
  7412  000D3C  C03F  F0F1         	movff	_MrFecha12+2,_MrFecha12Ult+2
  7413  000D40  C040  F0F2         	movff	_MrFecha12+3,_MrFecha12Ult+3
  7414  000D44                     l4728:
  7415                           
  7416                           ;MemoryRoller29.c: 171: }
  7417                           ;MemoryRoller29.c: 172: if (MrUltV == 0) {
  7418  000D44  5043               	movf	_MrUltV,w,c
  7419  000D46  1044               	iorwf	_MrUltV+1,w,c
  7420  000D48  A4D8               	btfss	status,2,c
  7421  000D4A  D02A               	goto	l4740
  7422                           
  7423                           ;MemoryRoller29.c: 173: _MrPreparaPor ();
  7424  000D4C  ECA0  F011         	call	__MrPreparaPor	;wreg free
  7425                           
  7426                           ;MemoryRoller29.c: 174: _MrEsc (MrTemp, MrRegAux);
  7427  000D50  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7428  000D54  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7429  000D58  0E6C               	movlw	low _MrRegAux
  7430  000D5A  0101               	movlb	1	; () banked
  7431  000D5C  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7432  000D5E  0E01               	movlw	high _MrRegAux
  7433  000D60  0101               	movlb	1	; () banked
  7434  000D62  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7435  000D64  EC61  F012         	call	__MrEsc	;wreg free
  7436                           
  7437                           ;MemoryRoller29.c: 175: _MrPreparaFecha();
  7438  000D68  EC97  F00E         	call	__MrPreparaFecha	;wreg free
  7439                           
  7440                           ;MemoryRoller29.c: 176: _MrEsc (MrUltV, MrRegAux);
  7441  000D6C  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7442  000D70  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7443  000D74  0E6C               	movlw	low _MrRegAux
  7444  000D76  0101               	movlb	1	; () banked
  7445  000D78  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7446  000D7A  0E01               	movlw	high _MrRegAux
  7447  000D7C  0101               	movlb	1	; () banked
  7448  000D7E  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7449  000D80  EC61  F012         	call	__MrEsc	;wreg free
  7450                           
  7451                           ;MemoryRoller29.c: 177: MrUltV = MrTemp;
  7452  000D84  C181  F043         	movff	MrAgregaReg@MrTemp,_MrUltV
  7453  000D88  C182  F044         	movff	MrAgregaReg@MrTemp+1,_MrUltV+1
  7454                           
  7455                           ;MemoryRoller29.c: 178: MrTemp = _MrSgte (MrUltV);
  7456  000D8C  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7457  000D90  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7458  000D94  ECEB  F012         	call	__MrSgte	;wreg free
  7459  000D98  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7460  000D9C  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7461  000DA0                     l4740:
  7462                           
  7463                           ;MemoryRoller29.c: 179: }
  7464                           ;MemoryRoller29.c: 180: _MrPreparaPor ();
  7465  000DA0  ECA0  F011         	call	__MrPreparaPor	;wreg free
  7466                           
  7467                           ;MemoryRoller29.c: 181: _MrEsc (MrTemp, MrRegAux);
  7468  000DA4  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7469  000DA8  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7470  000DAC  0E6C               	movlw	low _MrRegAux
  7471  000DAE  0101               	movlb	1	; () banked
  7472  000DB0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7473  000DB2  0E01               	movlw	high _MrRegAux
  7474  000DB4  0101               	movlb	1	; () banked
  7475  000DB6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7476  000DB8  EC61  F012         	call	__MrEsc	;wreg free
  7477                           
  7478                           ;MemoryRoller29.c: 182: memcpy(&MrReg[0], &MrHora12, 2);
  7479  000DBC  0ED1               	movlw	low _MrReg
  7480  000DBE  6E19               	movwf	memcpy@d1,c
  7481  000DC0  0E00               	movlw	high _MrReg
  7482  000DC2  6E1A               	movwf	memcpy@d1+1,c
  7483  000DC4  0EF3               	movlw	low _MrHora12
  7484  000DC6  6E1B               	movwf	memcpy@s1,c
  7485  000DC8  0E00               	movlw	high _MrHora12
  7486  000DCA  6E1C               	movwf	memcpy@s1+1,c
  7487  000DCC  0E00               	movlw	0
  7488  000DCE  6E1E               	movwf	memcpy@n+1,c
  7489  000DD0  0E02               	movlw	2
  7490  000DD2  6E1D               	movwf	memcpy@n,c
  7491  000DD4  ECE9  F010         	call	_memcpy	;wreg free
  7492                           
  7493                           ;MemoryRoller29.c: 183: _MrEsc (MrUltV, MrReg);
  7494  000DD8  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7495  000DDC  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7496  000DE0  0ED1               	movlw	low _MrReg
  7497  000DE2  0101               	movlb	1	; () banked
  7498  000DE4  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7499  000DE6  0E00               	movlw	high _MrReg
  7500  000DE8  0101               	movlb	1	; () banked
  7501  000DEA  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7502  000DEC  EC61  F012         	call	__MrEsc	;wreg free
  7503  000DF0  0012               	return		;funcret
  7504  000DF2                     __end_of_MrAgregaReg:
  7505                           	opt stack 0
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           intcon	equ	0xFF2
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           postdec1	equ	0xFE5
  7514                           fsr1l	equ	0xFE1
  7515                           indf2	equ	0xFDF
  7516                           postinc2	equ	0xFDE
  7517                           postdec2	equ	0xFDD
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function __MrSgte *****************
  7523 ;; Defined at:
  7524 ;;		line 216 in file "MemoryRoller29.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  MrDirX          2   24[COMRAM] unsigned int 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  2   24[COMRAM] unsigned int 
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7538 ;;      Params:         2       0       0       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7541 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7542 ;;Total ram usage:        2 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    5
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_MrAgregaReg
  7549 ;;		_MrSgte
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text42
  7554  0025D6                     __ptext42:
  7555                           	opt stack 0
  7556  0025D6                     __MrSgte:
  7557                           	opt stack 21
  7558                           
  7559                           ;MemoryRoller29.c: 218: MrDirX ++;
  7560                           
  7561                           ;incstack = 0
  7562  0025D6  4A19               	infsnz	__MrSgte@MrDirX,f,c
  7563  0025D8  2A1A               	incf	__MrSgte@MrDirX+1,f,c
  7564                           
  7565                           ;MemoryRoller29.c: 219: if (MrDirX >= 1000) { return (0); }
  7566  0025DA  0EE8               	movlw	232
  7567  0025DC  5C19               	subwf	__MrSgte@MrDirX,w,c
  7568  0025DE  0E03               	movlw	3
  7569  0025E0  581A               	subwfb	__MrSgte@MrDirX+1,w,c
  7570  0025E2  A0D8               	btfss	status,0,c
  7571  0025E4  D005               	goto	l453
  7572  0025E6  0E00               	movlw	0
  7573  0025E8  6E1A               	movwf	?__MrSgte+1,c
  7574  0025EA  0E00               	movlw	0
  7575  0025EC  6E19               	movwf	?__MrSgte,c
  7576  0025EE  0012               	return	
  7577  0025F0                     l453:
  7578                           
  7579                           ;MemoryRoller29.c: 220: return (MrDirX);
  7580  0025F0  C019  F019         	movff	__MrSgte@MrDirX,?__MrSgte
  7581  0025F4  C01A  F01A         	movff	__MrSgte@MrDirX+1,?__MrSgte+1
  7582  0025F8  0012               	return		;funcret
  7583  0025FA                     __end_of__MrSgte:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           intcon	equ	0xFF2
  7590                           postinc0	equ	0xFEE
  7591                           wreg	equ	0xFE8
  7592                           postdec1	equ	0xFE5
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           postdec2	equ	0xFDD
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function __MrPreparaPor *****************
  7602 ;; Defined at:
  7603 ;;		line 186 in file "MemoryRoller29.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;		None
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;  Ind             2   24[COMRAM] unsigned short 
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  1    wreg      void 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7617 ;;      Params:         0       0       0       0       0       0       0       0       0
  7618 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7620 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7621 ;;Total ram usage:        2 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:    5
  7624 ;; This function calls:
  7625 ;;		Nothing
  7626 ;; This function is called by:
  7627 ;;		_MrFormat
  7628 ;;		_MrInit
  7629 ;;		_MrAgregaReg
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text43
  7634  002340                     __ptext43:
  7635                           	opt stack 0
  7636  002340                     __MrPreparaPor:
  7637                           	opt stack 22
  7638                           
  7639                           ;MemoryRoller29.c: 187: unsigned short Ind;
  7640                           ;MemoryRoller29.c: 188: for (Ind = 1; Ind < 8; Ind++) { MrRegAux[Ind]=0xF0; }
  7641                           
  7642                           ;incstack = 0
  7643  002340  0E00               	movlw	0
  7644  002342  6E1A               	movwf	__MrPreparaPor@Ind+1,c
  7645  002344  0E01               	movlw	1
  7646  002346  6E19               	movwf	__MrPreparaPor@Ind,c
  7647  002348  501A               	movf	__MrPreparaPor@Ind+1,w,c
  7648  00234A  E111               	bnz	l435
  7649  00234C  0E08               	movlw	8
  7650  00234E  5C19               	subwf	__MrPreparaPor@Ind,w,c
  7651  002350  B0D8               	btfsc	status,0,c
  7652  002352  D00D               	goto	l435
  7653  002354  0E6C               	movlw	low _MrRegAux
  7654  002356  2419               	addwf	__MrPreparaPor@Ind,w,c
  7655  002358  6ED9               	movwf	fsr2l,c
  7656  00235A  0E01               	movlw	high _MrRegAux
  7657  00235C  201A               	addwfc	__MrPreparaPor@Ind+1,w,c
  7658  00235E  6EDA               	movwf	fsr2h,c
  7659  002360  0EF0               	movlw	240
  7660  002362  6EDF               	movwf	indf2,c
  7661  002364  4A19               	infsnz	__MrPreparaPor@Ind,f,c
  7662  002366  2A1A               	incf	__MrPreparaPor@Ind+1,f,c
  7663  002368  501A               	movf	__MrPreparaPor@Ind+1,w,c
  7664  00236A  E101               	bnz	u3020
  7665  00236C  D7EF               	goto	L2
  7666  00236E                     u3020:
  7667  00236E                     l435:
  7668                           
  7669                           ;MemoryRoller29.c: 189: MrRegAux [0] = 255;
  7670  00236E  0101               	movlb	1	; () banked
  7671  002370  696C               	setf	_MrRegAux& (0+255),b
  7672                           
  7673                           ; BSR set to: 1
  7674  002372  0012               	return		;funcret
  7675  002374                     __end_of__MrPreparaPor:
  7676                           	opt stack 0
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           intcon	equ	0xFF2
  7682                           postinc0	equ	0xFEE
  7683                           wreg	equ	0xFE8
  7684                           postdec1	equ	0xFE5
  7685                           fsr1l	equ	0xFE1
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           fsr2h	equ	0xFDA
  7690                           fsr2l	equ	0xFD9
  7691                           status	equ	0xFD8
  7692                           
  7693 ;; *************** function __MrPreparaFecha *****************
  7694 ;; Defined at:
  7695 ;;		line 192 in file "MemoryRoller29.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;		None
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  Ind             2   34[COMRAM] unsigned short 
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  1    wreg      void 
  7702 ;; Registers used:
  7703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7709 ;;      Params:         0       0       0       0       0       0       0       0       0
  7710 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7712 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7713 ;;Total ram usage:        2 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    6
  7716 ;; This function calls:
  7717 ;;		_memcpy
  7718 ;; This function is called by:
  7719 ;;		_MrFormat
  7720 ;;		_MrAgregaReg
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text44
  7725  001D2E                     __ptext44:
  7726                           	opt stack 0
  7727  001D2E                     __MrPreparaFecha:
  7728                           	opt stack 20
  7729                           
  7730                           ;MemoryRoller29.c: 193: unsigned short Ind;
  7731                           ;MemoryRoller29.c: 194: for (Ind = 1; Ind < 8; Ind++) { MrRegAux[Ind]=0xF1; }
  7732                           
  7733                           ; BSR set to: 1
  7734                           ;incstack = 0
  7735  001D2E  0E00               	movlw	0
  7736  001D30  6E24               	movwf	__MrPreparaFecha@Ind+1,c
  7737  001D32  0E01               	movlw	1
  7738  001D34  6E23               	movwf	__MrPreparaFecha@Ind,c
  7739  001D36                     l4548:
  7740  001D36  5024               	movf	__MrPreparaFecha@Ind+1,w,c
  7741  001D38  E10F               	bnz	l4558
  7742  001D3A  0E08               	movlw	8
  7743  001D3C  5C23               	subwf	__MrPreparaFecha@Ind,w,c
  7744  001D3E  B0D8               	btfsc	status,0,c
  7745  001D40  D00B               	goto	l4558
  7746  001D42  0E6C               	movlw	low _MrRegAux
  7747  001D44  2423               	addwf	__MrPreparaFecha@Ind,w,c
  7748  001D46  6ED9               	movwf	fsr2l,c
  7749  001D48  0E01               	movlw	high _MrRegAux
  7750  001D4A  2024               	addwfc	__MrPreparaFecha@Ind+1,w,c
  7751  001D4C  6EDA               	movwf	fsr2h,c
  7752  001D4E  0EF1               	movlw	241
  7753  001D50  6EDF               	movwf	indf2,c
  7754  001D52  4A23               	infsnz	__MrPreparaFecha@Ind,f,c
  7755  001D54  2A24               	incf	__MrPreparaFecha@Ind+1,f,c
  7756  001D56  D7EF               	goto	l4548
  7757  001D58                     l4558:
  7758                           
  7759                           ;MemoryRoller29.c: 195: MrRegAux [0] = 254;
  7760  001D58  0EFE               	movlw	254
  7761  001D5A  0101               	movlb	1	; () banked
  7762  001D5C  6F6C               	movwf	_MrRegAux& (0+255),b
  7763                           
  7764                           ; BSR set to: 1
  7765                           ;MemoryRoller29.c: 196: memcpy (&MrRegAux[1], &MrFecha12, 3);
  7766  001D5E  0E6D               	movlw	low (_MrRegAux+1)
  7767  001D60  6E19               	movwf	memcpy@d1,c
  7768  001D62  0E01               	movlw	high (_MrRegAux+1)
  7769  001D64  6E1A               	movwf	memcpy@d1+1,c
  7770  001D66  0E3D               	movlw	low _MrFecha12
  7771  001D68  6E1B               	movwf	memcpy@s1,c
  7772  001D6A  0E00               	movlw	high _MrFecha12
  7773  001D6C  6E1C               	movwf	memcpy@s1+1,c
  7774  001D6E  0E00               	movlw	0
  7775  001D70  6E1E               	movwf	memcpy@n+1,c
  7776  001D72  0E03               	movlw	3
  7777  001D74  6E1D               	movwf	memcpy@n,c
  7778  001D76  ECE9  F010         	call	_memcpy	;wreg free
  7779                           
  7780                           ;MemoryRoller29.c: 197: memcpy (&MrRegAux[4], &MrFecha12Ult, 3);
  7781  001D7A  0E70               	movlw	low (_MrRegAux+4)
  7782  001D7C  6E19               	movwf	memcpy@d1,c
  7783  001D7E  0E01               	movlw	high (_MrRegAux+4)
  7784  001D80  6E1A               	movwf	memcpy@d1+1,c
  7785  001D82  0EEF               	movlw	low _MrFecha12Ult
  7786  001D84  6E1B               	movwf	memcpy@s1,c
  7787  001D86  0E00               	movlw	high _MrFecha12Ult
  7788  001D88  6E1C               	movwf	memcpy@s1+1,c
  7789  001D8A  0E00               	movlw	0
  7790  001D8C  6E1E               	movwf	memcpy@n+1,c
  7791  001D8E  0E03               	movlw	3
  7792  001D90  6E1D               	movwf	memcpy@n,c
  7793  001D92  ECE9  F010         	call	_memcpy	;wreg free
  7794  001D96  0012               	return		;funcret
  7795  001D98                     __end_of__MrPreparaFecha:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           intcon	equ	0xFF2
  7802                           postinc0	equ	0xFEE
  7803                           wreg	equ	0xFE8
  7804                           postdec1	equ	0xFE5
  7805                           fsr1l	equ	0xFE1
  7806                           indf2	equ	0xFDF
  7807                           postinc2	equ	0xFDE
  7808                           postdec2	equ	0xFDD
  7809                           fsr2h	equ	0xFDA
  7810                           fsr2l	equ	0xFD9
  7811                           status	equ	0xFD8
  7812                           
  7813 ;; *************** function __MrEsc *****************
  7814 ;; Defined at:
  7815 ;;		line 307 in file "MemoryRoller29.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  MrNReg          2    4[BANK1 ] unsigned int 
  7818 ;;  MrReg1          2    6[BANK1 ] PTR unsigned char 
  7819 ;;		 -> MrRegAux(13), MrReg(13), 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7831 ;;      Params:         0       0       4       0       0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7834 ;;      Totals:         0       0       4       0       0       0       0       0       0
  7835 ;;Total ram usage:        4 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    7
  7838 ;; This function calls:
  7839 ;;		_MseEsc
  7840 ;;		__CalculaRegPos
  7841 ;; This function is called by:
  7842 ;;		_MrFormat
  7843 ;;		_MrInit
  7844 ;;		_MrAgregaReg
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           	psect	text45
  7849  0024C2                     __ptext45:
  7850                           	opt stack 0
  7851  0024C2                     __MrEsc:
  7852                           	opt stack 20
  7853                           
  7854                           ;MemoryRoller29.c: 310: _CalculaRegPos (MrNReg);
  7855                           
  7856                           ;incstack = 0
  7857  0024C2  C17D  F020         	movff	__MrEsc@MrNReg,__CalculaRegPos@MrNReg1
  7858  0024C6  C17E  F021         	movff	__MrEsc@MrNReg+1,__CalculaRegPos@MrNReg1+1
  7859  0024CA  EC78  F00D         	call	__CalculaRegPos	;wreg free
  7860                           
  7861                           ;MemoryRoller29.c: 311: MseEsc (MrRegPos, MrReg1, 8);
  7862  0024CE  C07E  F029         	movff	_MrRegPos,MseEsc@Dir
  7863  0024D2  C07F  F02A         	movff	_MrRegPos+1,MseEsc@Dir+1
  7864  0024D6  C17F  F02B         	movff	__MrEsc@MrReg1,MseEsc@Datos
  7865  0024DA  C180  F02C         	movff	__MrEsc@MrReg1+1,MseEsc@Datos+1
  7866  0024DE  0E00               	movlw	0
  7867  0024E0  6E2E               	movwf	MseEsc@NBytes+1,c
  7868  0024E2  0E08               	movlw	8
  7869  0024E4  6E2D               	movwf	MseEsc@NBytes,c
  7870  0024E6  EC39  F008         	call	_MseEsc	;wreg free
  7871  0024EA  0012               	return		;funcret
  7872  0024EC                     __end_of__MrEsc:
  7873                           	opt stack 0
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           intcon	equ	0xFF2
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           postdec1	equ	0xFE5
  7882                           fsr1l	equ	0xFE1
  7883                           indf2	equ	0xFDF
  7884                           postinc2	equ	0xFDE
  7885                           postdec2	equ	0xFDD
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function __CalculaRegPos *****************
  7891 ;; Defined at:
  7892 ;;		line 231 in file "MemoryRoller29.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  MrNReg1         2   31[COMRAM] unsigned int 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7906 ;;      Params:         2       0       0       0       0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7908 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7909 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7910 ;;Total ram usage:        6 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    6
  7913 ;; This function calls:
  7914 ;;		___lwdiv
  7915 ;;		___lwmod
  7916 ;; This function is called by:
  7917 ;;		__MrLee
  7918 ;;		__MrEsc
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text46
  7923  001AF0                     __ptext46:
  7924                           	opt stack 0
  7925  001AF0                     __CalculaRegPos:
  7926                           	opt stack 20
  7927                           
  7928                           ;MemoryRoller29.c: 232: MrGpo = MrNReg1 / MrRegsXGpo;
  7929                           
  7930                           ;incstack = 0
  7931  001AF0  C020  F019         	movff	__CalculaRegPos@MrNReg1,___lwdiv@dividend
  7932  001AF4  C021  F01A         	movff	__CalculaRegPos@MrNReg1+1,___lwdiv@dividend+1
  7933  001AF8  C09E  F01B         	movff	_MrRegsXGpo,___lwdiv@divisor
  7934  001AFC  C09F  F01C         	movff	_MrRegsXGpo+1,___lwdiv@divisor+1
  7935  001B00  EC0A  F010         	call	___lwdiv	;wreg free
  7936  001B04  C019  F09A         	movff	?___lwdiv,_MrGpo
  7937  001B08  C01A  F09B         	movff	?___lwdiv+1,_MrGpo+1
  7938                           
  7939                           ;MemoryRoller29.c: 233: MrNRegEnGpo = MrNReg1 % MrRegsXGpo;
  7940  001B0C  C020  F019         	movff	__CalculaRegPos@MrNReg1,___lwmod@dividend
  7941  001B10  C021  F01A         	movff	__CalculaRegPos@MrNReg1+1,___lwmod@dividend+1
  7942  001B14  C09E  F01B         	movff	_MrRegsXGpo,___lwmod@divisor
  7943  001B18  C09F  F01C         	movff	_MrRegsXGpo+1,___lwmod@divisor+1
  7944  001B1C  ECC8  F010         	call	___lwmod	;wreg free
  7945  001B20  C019  F09C         	movff	?___lwmod,_MrNRegEnGpo
  7946  001B24  C01A  F09D         	movff	?___lwmod+1,_MrNRegEnGpo+1
  7947                           
  7948                           ;MemoryRoller29.c: 234: MrRegPos = (MrGpo * 32) + (MrNRegEnGpo * 8);
  7949  001B28  C09C  F022         	movff	_MrNRegEnGpo,??__CalculaRegPos
  7950  001B2C  C09D  F023         	movff	_MrNRegEnGpo+1,??__CalculaRegPos+1
  7951  001B30  90D8               	bcf	status,0,c
  7952  001B32  3622               	rlcf	??__CalculaRegPos,f,c
  7953  001B34  3623               	rlcf	??__CalculaRegPos+1,f,c
  7954  001B36  90D8               	bcf	status,0,c
  7955  001B38  3622               	rlcf	??__CalculaRegPos,f,c
  7956  001B3A  3623               	rlcf	??__CalculaRegPos+1,f,c
  7957  001B3C  90D8               	bcf	status,0,c
  7958  001B3E  3622               	rlcf	??__CalculaRegPos,f,c
  7959  001B40  3623               	rlcf	??__CalculaRegPos+1,f,c
  7960  001B42  C09A  F024         	movff	_MrGpo,??__CalculaRegPos+2
  7961  001B46  C09B  F025         	movff	_MrGpo+1,??__CalculaRegPos+3
  7962  001B4A  0E05               	movlw	5
  7963  001B4C                     u2795:
  7964  001B4C  90D8               	bcf	status,0,c
  7965  001B4E  3624               	rlcf	??__CalculaRegPos+2,f,c
  7966  001B50  3625               	rlcf	??__CalculaRegPos+3,f,c
  7967  001B52  2EE8               	decfsz	wreg,f,c
  7968  001B54  D7FB               	goto	u2795
  7969  001B56  5022               	movf	??__CalculaRegPos,w,c
  7970  001B58  2624               	addwf	??__CalculaRegPos+2,f,c
  7971  001B5A  5023               	movf	??__CalculaRegPos+1,w,c
  7972  001B5C  2225               	addwfc	??__CalculaRegPos+3,f,c
  7973  001B5E  C024  F07E         	movff	??__CalculaRegPos+2,_MrRegPos
  7974  001B62  C025  F07F         	movff	??__CalculaRegPos+3,_MrRegPos+1
  7975  001B66  0100               	movlb	0	; () banked
  7976  001B68  6B80               	clrf	(_MrRegPos+2)& (0+255),b
  7977  001B6A  6B81               	clrf	(_MrRegPos+3)& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980  001B6C  0012               	return		;funcret
  7981  001B6E                     __end_of__CalculaRegPos:
  7982                           	opt stack 0
  7983                           tblptru	equ	0xFF8
  7984                           tblptrh	equ	0xFF7
  7985                           tblptrl	equ	0xFF6
  7986                           tablat	equ	0xFF5
  7987                           intcon	equ	0xFF2
  7988                           postinc0	equ	0xFEE
  7989                           wreg	equ	0xFE8
  7990                           postdec1	equ	0xFE5
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function ___lwmod *****************
  8000 ;; Defined at:
  8001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  dividend        2   24[COMRAM] unsigned int 
  8004 ;;  divisor         2   26[COMRAM] unsigned int 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  counter         1   28[COMRAM] unsigned char 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  2   24[COMRAM] unsigned int 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8016 ;;      Params:         4       0       0       0       0       0       0       0       0
  8017 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8019 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8020 ;;Total ram usage:        5 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    5
  8023 ;; This function calls:
  8024 ;;		Nothing
  8025 ;; This function is called by:
  8026 ;;		__CalculaRegPos
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text47
  8031  002190                     __ptext47:
  8032                           	opt stack 0
  8033  002190                     ___lwmod:
  8034                           	opt stack 20
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;incstack = 0
  8038  002190  501B               	movf	___lwmod@divisor,w,c
  8039  002192  101C               	iorwf	___lwmod@divisor+1,w,c
  8040  002194  B4D8               	btfsc	status,2,c
  8041  002196  D018               	goto	l1033
  8042  002198  0E01               	movlw	1
  8043  00219A  6E1D               	movwf	___lwmod@counter,c
  8044  00219C  D004               	goto	l4258
  8045  00219E                     l4256:
  8046  00219E  90D8               	bcf	status,0,c
  8047  0021A0  361B               	rlcf	___lwmod@divisor,f,c
  8048  0021A2  361C               	rlcf	___lwmod@divisor+1,f,c
  8049  0021A4  2A1D               	incf	___lwmod@counter,f,c
  8050  0021A6                     l4258:
  8051  0021A6  AE1C               	btfss	___lwmod@divisor+1,7,c
  8052  0021A8  D7FA               	goto	l4256
  8053  0021AA                     l4260:
  8054  0021AA  501B               	movf	___lwmod@divisor,w,c
  8055  0021AC  5C19               	subwf	___lwmod@dividend,w,c
  8056  0021AE  501C               	movf	___lwmod@divisor+1,w,c
  8057  0021B0  581A               	subwfb	___lwmod@dividend+1,w,c
  8058  0021B2  A0D8               	btfss	status,0,c
  8059  0021B4  D004               	goto	l4264
  8060  0021B6  501B               	movf	___lwmod@divisor,w,c
  8061  0021B8  5E19               	subwf	___lwmod@dividend,f,c
  8062  0021BA  501C               	movf	___lwmod@divisor+1,w,c
  8063  0021BC  5A1A               	subwfb	___lwmod@dividend+1,f,c
  8064  0021BE                     l4264:
  8065  0021BE  90D8               	bcf	status,0,c
  8066  0021C0  321C               	rrcf	___lwmod@divisor+1,f,c
  8067  0021C2  321B               	rrcf	___lwmod@divisor,f,c
  8068  0021C4  2E1D               	decfsz	___lwmod@counter,f,c
  8069  0021C6  D7F1               	goto	l4260
  8070  0021C8                     l1033:
  8071  0021C8  C019  F019         	movff	___lwmod@dividend,?___lwmod
  8072  0021CC  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  8073  0021D0  0012               	return		;funcret
  8074  0021D2                     __end_of___lwmod:
  8075                           	opt stack 0
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           intcon	equ	0xFF2
  8081                           postinc0	equ	0xFEE
  8082                           wreg	equ	0xFE8
  8083                           postdec1	equ	0xFE5
  8084                           fsr1l	equ	0xFE1
  8085                           indf2	equ	0xFDF
  8086                           postinc2	equ	0xFDE
  8087                           postdec2	equ	0xFDD
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function ___lwdiv *****************
  8093 ;; Defined at:
  8094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  dividend        2   24[COMRAM] unsigned int 
  8097 ;;  divisor         2   26[COMRAM] unsigned int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  quotient        2   29[COMRAM] unsigned int 
  8100 ;;  counter         1   28[COMRAM] unsigned char 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  2   24[COMRAM] unsigned int 
  8103 ;; Registers used:
  8104 ;;		wreg, status,2, status,0
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8110 ;;      Params:         4       0       0       0       0       0       0       0       0
  8111 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8113 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8114 ;;Total ram usage:        7 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    5
  8117 ;; This function calls:
  8118 ;;		Nothing
  8119 ;; This function is called by:
  8120 ;;		__CalculaRegPos
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text48
  8125  002014                     __ptext48:
  8126                           	opt stack 0
  8127  002014                     ___lwdiv:
  8128                           	opt stack 20
  8129                           
  8130                           ;incstack = 0
  8131  002014  0E00               	movlw	0
  8132  002016  6E1F               	movwf	___lwdiv@quotient+1,c
  8133  002018  0E00               	movlw	0
  8134  00201A  6E1E               	movwf	___lwdiv@quotient,c
  8135  00201C  501B               	movf	___lwdiv@divisor,w,c
  8136  00201E  101C               	iorwf	___lwdiv@divisor+1,w,c
  8137  002020  B4D8               	btfsc	status,2,c
  8138  002022  D01C               	goto	l1023
  8139  002024  0E01               	movlw	1
  8140  002026  6E1D               	movwf	___lwdiv@counter,c
  8141  002028  D004               	goto	l4238
  8142  00202A                     l4236:
  8143  00202A  90D8               	bcf	status,0,c
  8144  00202C  361B               	rlcf	___lwdiv@divisor,f,c
  8145  00202E  361C               	rlcf	___lwdiv@divisor+1,f,c
  8146  002030  2A1D               	incf	___lwdiv@counter,f,c
  8147  002032                     l4238:
  8148  002032  AE1C               	btfss	___lwdiv@divisor+1,7,c
  8149  002034  D7FA               	goto	l4236
  8150  002036                     l4240:
  8151  002036  90D8               	bcf	status,0,c
  8152  002038  361E               	rlcf	___lwdiv@quotient,f,c
  8153  00203A  361F               	rlcf	___lwdiv@quotient+1,f,c
  8154  00203C  501B               	movf	___lwdiv@divisor,w,c
  8155  00203E  5C19               	subwf	___lwdiv@dividend,w,c
  8156  002040  501C               	movf	___lwdiv@divisor+1,w,c
  8157  002042  581A               	subwfb	___lwdiv@dividend+1,w,c
  8158  002044  A0D8               	btfss	status,0,c
  8159  002046  D005               	goto	l4248
  8160  002048  501B               	movf	___lwdiv@divisor,w,c
  8161  00204A  5E19               	subwf	___lwdiv@dividend,f,c
  8162  00204C  501C               	movf	___lwdiv@divisor+1,w,c
  8163  00204E  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  8164  002050  801E               	bsf	___lwdiv@quotient,0,c
  8165  002052                     l4248:
  8166  002052  90D8               	bcf	status,0,c
  8167  002054  321C               	rrcf	___lwdiv@divisor+1,f,c
  8168  002056  321B               	rrcf	___lwdiv@divisor,f,c
  8169  002058  2E1D               	decfsz	___lwdiv@counter,f,c
  8170  00205A  D7ED               	goto	l4240
  8171  00205C                     l1023:
  8172  00205C  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  8173  002060  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8174  002064  0012               	return		;funcret
  8175  002066                     __end_of___lwdiv:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           intcon	equ	0xFF2
  8182                           postinc0	equ	0xFEE
  8183                           wreg	equ	0xFE8
  8184                           postdec1	equ	0xFE5
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function _MseEsc *****************
  8194 ;; Defined at:
  8195 ;;		line 28 in file "Mse21.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  Dir             2   40[COMRAM] unsigned int 
  8198 ;;  Datos           2   42[COMRAM] PTR unsigned char 
  8199 ;;		 -> MrRegAux(13), MrReg(13), RsRxBuffer(30), 
  8200 ;;  NBytes          2   44[COMRAM] int 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  Index           4    0[BANK1 ] long 
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8212 ;;      Params:         6       0       0       0       0       0       0       0       0
  8213 ;;      Locals:         0       0       4       0       0       0       0       0       0
  8214 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8215 ;;      Totals:         6       5       4       0       0       0       0       0       0
  8216 ;;Total ram usage:       15 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    6
  8219 ;; This function calls:
  8220 ;;		_I2CEscByte
  8221 ;;		_I2CStart
  8222 ;;		_I2CStop
  8223 ;; This function is called by:
  8224 ;;		__MrEsc
  8225 ;;		_Ppal_RsComando
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           	psect	text49
  8230  001072                     __ptext49:
  8231                           	opt stack 0
  8232  001072                     _MseEsc:
  8233                           	opt stack 20
  8234                           
  8235                           ;Mse21.c: 30: long Index;
  8236                           ;Mse21.c: 34: I2CAck = 0;
  8237                           
  8238                           ;incstack = 0
  8239  001072  0E00               	movlw	0
  8240  001074  0100               	movlb	0	; () banked
  8241  001076  6F8F               	movwf	(_I2CAck+1)& (0+255),b
  8242  001078  0E00               	movlw	0
  8243  00107A  6F8E               	movwf	_I2CAck& (0+255),b
  8244                           
  8245                           ;Mse21.c: 35: for (Index = 0; (Index<100000) & (!I2CAck); Index++) {
  8246  00107C  0E00               	movlw	0
  8247  00107E  0101               	movlb	1	; () banked
  8248  001080  6F79               	movwf	MseEsc@Index& (0+255),b
  8249  001082  0E00               	movlw	0
  8250  001084  6F7A               	movwf	(MseEsc@Index+1)& (0+255),b
  8251  001086  0E00               	movlw	0
  8252  001088  6F7B               	movwf	(MseEsc@Index+2)& (0+255),b
  8253  00108A  0E00               	movlw	0
  8254  00108C  6F7C               	movwf	(MseEsc@Index+3)& (0+255),b
  8255  00108E  D00F               	goto	l4326
  8256  001090                     l4320:
  8257                           
  8258                           ;Mse21.c: 36: I2CStart();
  8259  001090  ECED  F011         	call	_I2CStart	;wreg free
  8260                           
  8261                           ;Mse21.c: 37: I2CEscByte(0xA0);
  8262  001094  0E00               	movlw	0
  8263  001096  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8264  001098  0EA0               	movlw	160
  8265  00109A  6E25               	movwf	I2CEscByte@I2CByte,c
  8266  00109C  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8267  0010A0  0E01               	movlw	1
  8268  0010A2  0101               	movlb	1	; () banked
  8269  0010A4  2779               	addwf	MseEsc@Index& (0+255),f,b
  8270  0010A6  0E00               	movlw	0
  8271  0010A8  237A               	addwfc	(MseEsc@Index+1)& (0+255),f,b
  8272  0010AA  237B               	addwfc	(MseEsc@Index+2)& (0+255),f,b
  8273  0010AC  237C               	addwfc	(MseEsc@Index+3)& (0+255),f,b
  8274  0010AE                     l4326:
  8275                           
  8276                           ; BSR set to: 1
  8277  0010AE  0101               	movlb	1	; () banked
  8278  0010B0  BF7C               	btfsc	(MseEsc@Index+3)& (0+255),7,b
  8279  0010B2  D00E               	goto	l4328
  8280  0010B4  0101               	movlb	1	; () banked
  8281  0010B6  517C               	movf	(MseEsc@Index+3)& (0+255),w,b
  8282  0010B8  E111               	bnz	l4330
  8283  0010BA  0EA0               	movlw	160
  8284  0010BC  0101               	movlb	1	; () banked
  8285  0010BE  5D79               	subwf	MseEsc@Index& (0+255),w,b
  8286  0010C0  0E86               	movlw	134
  8287  0010C2  0101               	movlb	1	; () banked
  8288  0010C4  597A               	subwfb	(MseEsc@Index+1)& (0+255),w,b
  8289  0010C6  0E01               	movlw	1
  8290  0010C8  0101               	movlb	1	; () banked
  8291  0010CA  597B               	subwfb	(MseEsc@Index+2)& (0+255),w,b
  8292  0010CC  B0D8               	btfsc	status,0,c
  8293  0010CE  D006               	goto	l4330
  8294  0010D0                     l4328:
  8295                           
  8296                           ; BSR set to: 1
  8297  0010D0  0100               	movlb	0	; () banked
  8298  0010D2  518E               	movf	_I2CAck& (0+255),w,b
  8299  0010D4  0100               	movlb	0	; () banked
  8300  0010D6  118F               	iorwf	(_I2CAck+1)& (0+255),w,b
  8301  0010D8  B4D8               	btfsc	status,2,c
  8302  0010DA  D7DA               	goto	l4320
  8303  0010DC                     l4330:
  8304                           
  8305                           ;Mse21.c: 38: }
  8306                           ;Mse21.c: 39: I2CEscByte((Dir>>8)&0xFF);
  8307  0010DC  C029  F0F5         	movff	MseEsc@Dir,??_MseEsc
  8308  0010E0  C02A  F0F6         	movff	MseEsc@Dir+1,??_MseEsc+1
  8309  0010E4  C0F6  F0F5         	movff	??_MseEsc+1,??_MseEsc
  8310  0010E8  0100               	movlb	0	; () banked
  8311  0010EA  6BF6               	clrf	(??_MseEsc+1)& (0+255),b
  8312  0010EC  0100               	movlb	0	; () banked
  8313  0010EE  51F5               	movf	??_MseEsc& (0+255),w,b
  8314  0010F0  6E25               	movwf	I2CEscByte@I2CByte,c
  8315  0010F2  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8316  0010F4  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8317                           
  8318                           ;Mse21.c: 40: I2CEscByte(Dir & 0xFF);
  8319  0010F8  5029               	movf	MseEsc@Dir,w,c
  8320  0010FA  6E25               	movwf	I2CEscByte@I2CByte,c
  8321  0010FC  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8322  0010FE  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8323                           
  8324                           ;Mse21.c: 41: for (Index = 0; Index < NBytes; Index++) {
  8325  001102  0E00               	movlw	0
  8326  001104  0101               	movlb	1	; () banked
  8327  001106  6F79               	movwf	MseEsc@Index& (0+255),b
  8328  001108  0E00               	movlw	0
  8329  00110A  6F7A               	movwf	(MseEsc@Index+1)& (0+255),b
  8330  00110C  0E00               	movlw	0
  8331  00110E  6F7B               	movwf	(MseEsc@Index+2)& (0+255),b
  8332  001110  0E00               	movlw	0
  8333  001112  6F7C               	movwf	(MseEsc@Index+3)& (0+255),b
  8334  001114  D018               	goto	l4338
  8335  001116                     l4334:
  8336                           
  8337                           ;Mse21.c: 42: I2CEscByte(Datos[Index]);
  8338  001116  0101               	movlb	1	; () banked
  8339  001118  5179               	movf	MseEsc@Index& (0+255),w,b
  8340  00111A  242B               	addwf	MseEsc@Datos,w,c
  8341  00111C  6ED9               	movwf	fsr2l,c
  8342  00111E  0101               	movlb	1	; () banked
  8343  001120  517A               	movf	(MseEsc@Index+1)& (0+255),w,b
  8344  001122  202C               	addwfc	MseEsc@Datos+1,w,c
  8345  001124  6EDA               	movwf	fsr2h,c
  8346  001126  50DF               	movf	indf2,w,c
  8347  001128  0100               	movlb	0	; () banked
  8348  00112A  6FF5               	movwf	??_MseEsc& (0+255),b
  8349  00112C  0100               	movlb	0	; () banked
  8350  00112E  51F5               	movf	??_MseEsc& (0+255),w,b
  8351  001130  6E25               	movwf	I2CEscByte@I2CByte,c
  8352  001132  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8353  001134  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8354  001138  0E01               	movlw	1
  8355  00113A  0101               	movlb	1	; () banked
  8356  00113C  2779               	addwf	MseEsc@Index& (0+255),f,b
  8357  00113E  0E00               	movlw	0
  8358  001140  237A               	addwfc	(MseEsc@Index+1)& (0+255),f,b
  8359  001142  237B               	addwfc	(MseEsc@Index+2)& (0+255),f,b
  8360  001144  237C               	addwfc	(MseEsc@Index+3)& (0+255),f,b
  8361  001146                     l4338:
  8362                           
  8363                           ; BSR set to: 1
  8364  001146  C02D  F0F5         	movff	MseEsc@NBytes,??_MseEsc
  8365  00114A  C02E  F0F6         	movff	MseEsc@NBytes+1,??_MseEsc+1
  8366  00114E  0E00               	movlw	0
  8367  001150  0100               	movlb	0	; () banked
  8368  001152  BFF6               	btfsc	(??_MseEsc+1)& (0+255),7,b
  8369  001154  0EFF               	movlw	255
  8370  001156  6FF7               	movwf	(??_MseEsc+2)& (0+255),b
  8371  001158  6FF8               	movwf	(??_MseEsc+3)& (0+255),b
  8372  00115A  0100               	movlb	0	; () banked
  8373  00115C  51F5               	movf	??_MseEsc& (0+255),w,b
  8374  00115E  0101               	movlb	1	; () banked
  8375  001160  5D79               	subwf	MseEsc@Index& (0+255),w,b
  8376  001162  0100               	movlb	0	; () banked
  8377  001164  51F6               	movf	(??_MseEsc+1)& (0+255),w,b
  8378  001166  0101               	movlb	1	; () banked
  8379  001168  597A               	subwfb	(MseEsc@Index+1)& (0+255),w,b
  8380  00116A  0100               	movlb	0	; () banked
  8381  00116C  51F7               	movf	(??_MseEsc+2)& (0+255),w,b
  8382  00116E  0101               	movlb	1	; () banked
  8383  001170  597B               	subwfb	(MseEsc@Index+2)& (0+255),w,b
  8384  001172  0101               	movlb	1	; () banked
  8385  001174  517C               	movf	(MseEsc@Index+3)& (0+255),w,b
  8386  001176  0A80               	xorlw	128
  8387  001178  0100               	movlb	0	; () banked
  8388  00117A  6FF9               	movwf	(??_MseEsc+4)& (0+255),b
  8389  00117C  0100               	movlb	0	; () banked
  8390  00117E  51F8               	movf	(??_MseEsc+3)& (0+255),w,b
  8391  001180  0A80               	xorlw	128
  8392  001182  0100               	movlb	0	; () banked
  8393  001184  59F9               	subwfb	(??_MseEsc+4)& (0+255),w,b
  8394  001186  A0D8               	btfss	status,0,c
  8395  001188  D7C6               	goto	l4334
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;Mse21.c: 43: }
  8399                           ;Mse21.c: 44: I2CStop();
  8400                           
  8401                           ; BSR set to: 0
  8402  00118A  EC8A  F012         	call	_I2CStop	;wreg free
  8403  00118E  0012               	return		;funcret
  8404  001190                     __end_of_MseEsc:
  8405                           	opt stack 0
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           intcon	equ	0xFF2
  8411                           postinc0	equ	0xFEE
  8412                           wreg	equ	0xFE8
  8413                           postdec1	equ	0xFE5
  8414                           fsr1l	equ	0xFE1
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _RtcLee *****************
  8423 ;; Defined at:
  8424 ;;		line 55 in file "RTC21.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  Char1           1   40[COMRAM] unsigned char 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      void 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0
  8439 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8441 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8442 ;;Total ram usage:        1 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    6
  8445 ;; This function calls:
  8446 ;;		_Bcd2Hex
  8447 ;;		_I2CEscByte
  8448 ;;		_I2CLeeByte
  8449 ;;		_I2CSendAck
  8450 ;;		_I2CSendNAck
  8451 ;;		_I2CStart
  8452 ;;		_I2CStop
  8453 ;; This function is called by:
  8454 ;;		_RtcInit
  8455 ;;		_MrFormat
  8456 ;;		_MrAgregaReg
  8457 ;;		_Tpo_init
  8458 ;;		_Tpo_Ciclo
  8459 ;;		_Ppal_RsComando
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text50
  8464  001560                     __ptext50:
  8465                           	opt stack 0
  8466  001560                     _RtcLee:
  8467                           	opt stack 21
  8468                           
  8469                           ;RTC21.c: 56: char Char1;
  8470                           ;RTC21.c: 57: I2CStart();
  8471                           
  8472                           ;incstack = 0
  8473  001560  ECED  F011         	call	_I2CStart	;wreg free
  8474                           
  8475                           ;RTC21.c: 58: I2CEscByte(0xD0);
  8476  001564  0E00               	movlw	0
  8477  001566  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8478  001568  0ED0               	movlw	208
  8479  00156A  6E25               	movwf	I2CEscByte@I2CByte,c
  8480  00156C  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8481                           
  8482                           ;RTC21.c: 59: I2CEscByte(0);
  8483  001570  0E00               	movlw	0
  8484  001572  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8485  001574  0E00               	movlw	0
  8486  001576  6E25               	movwf	I2CEscByte@I2CByte,c
  8487  001578  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8488                           
  8489                           ;RTC21.c: 60: I2CStart();
  8490  00157C  ECED  F011         	call	_I2CStart	;wreg free
  8491                           
  8492                           ;RTC21.c: 61: I2CEscByte(0xD1);
  8493  001580  0E00               	movlw	0
  8494  001582  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8495  001584  0ED1               	movlw	209
  8496  001586  6E25               	movwf	I2CEscByte@I2CByte,c
  8497  001588  ECE6  F00C         	call	_I2CEscByte	;wreg free
  8498                           
  8499                           ;RTC21.c: 62: Char1 = I2CLeeByte();
  8500  00158C  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8501  001590  5019               	movf	?_I2CLeeByte,w,c
  8502  001592  6E29               	movwf	RtcLee@Char1,c
  8503                           
  8504                           ;RTC21.c: 63: if ( (Char1 & 0x80) == 0 ) {RtcFechaHora[5] = Bcd2Hex(Char1);}
  8505  001594  BE29               	btfsc	RtcLee@Char1,7,c
  8506  001596  D006               	goto	l375
  8507  001598  5029               	movf	RtcLee@Char1,w,c
  8508  00159A  EC0A  F013         	call	_Bcd2Hex
  8509  00159E  0100               	movlb	0	; () banked
  8510  0015A0  6FED               	movwf	(_RtcFechaHora+5)& (0+255),b
  8511  0015A2  D002               	goto	l4470
  8512  0015A4                     l375:
  8513                           
  8514                           ;RTC21.c: 64: else {RtcFechaHora[5] = Char1;}
  8515  0015A4  C029  F0ED         	movff	RtcLee@Char1,_RtcFechaHora+5
  8516  0015A8                     l4470:
  8517                           
  8518                           ;RTC21.c: 65: I2CSendAck();
  8519  0015A8  EC48  F011         	call	_I2CSendAck	;wreg free
  8520                           
  8521                           ;RTC21.c: 67: Char1 = I2CLeeByte();
  8522  0015AC  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8523  0015B0  5019               	movf	?_I2CLeeByte,w,c
  8524  0015B2  6E29               	movwf	RtcLee@Char1,c
  8525                           
  8526                           ;RTC21.c: 68: RtcFechaHora[4] = Bcd2Hex(Char1);
  8527  0015B4  5029               	movf	RtcLee@Char1,w,c
  8528  0015B6  EC0A  F013         	call	_Bcd2Hex
  8529  0015BA  0100               	movlb	0	; () banked
  8530  0015BC  6FEC               	movwf	(_RtcFechaHora+4)& (0+255),b
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;RTC21.c: 69: I2CSendAck();
  8534  0015BE  EC48  F011         	call	_I2CSendAck	;wreg free
  8535                           
  8536                           ;RTC21.c: 71: Char1 = I2CLeeByte();
  8537  0015C2  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8538  0015C6  5019               	movf	?_I2CLeeByte,w,c
  8539  0015C8  6E29               	movwf	RtcLee@Char1,c
  8540                           
  8541                           ;RTC21.c: 72: RtcFechaHora[3] = Bcd2Hex(Char1);
  8542  0015CA  5029               	movf	RtcLee@Char1,w,c
  8543  0015CC  EC0A  F013         	call	_Bcd2Hex
  8544  0015D0  0100               	movlb	0	; () banked
  8545  0015D2  6FEB               	movwf	(_RtcFechaHora+3)& (0+255),b
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;RTC21.c: 73: I2CSendAck();
  8549  0015D4  EC48  F011         	call	_I2CSendAck	;wreg free
  8550                           
  8551                           ;RTC21.c: 75: Char1 = I2CLeeByte();
  8552  0015D8  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8553  0015DC  5019               	movf	?_I2CLeeByte,w,c
  8554  0015DE  6E29               	movwf	RtcLee@Char1,c
  8555                           
  8556                           ;RTC21.c: 76: RtcFechaHora[6] = Bcd2Hex(Char1);
  8557  0015E0  5029               	movf	RtcLee@Char1,w,c
  8558  0015E2  EC0A  F013         	call	_Bcd2Hex
  8559  0015E6  0100               	movlb	0	; () banked
  8560  0015E8  6FEE               	movwf	(_RtcFechaHora+6)& (0+255),b
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;RTC21.c: 77: I2CSendAck();
  8564  0015EA  EC48  F011         	call	_I2CSendAck	;wreg free
  8565                           
  8566                           ;RTC21.c: 79: Char1 = I2CLeeByte();
  8567  0015EE  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8568  0015F2  5019               	movf	?_I2CLeeByte,w,c
  8569  0015F4  6E29               	movwf	RtcLee@Char1,c
  8570                           
  8571                           ;RTC21.c: 80: RtcFechaHora[2] = Bcd2Hex(Char1);
  8572  0015F6  5029               	movf	RtcLee@Char1,w,c
  8573  0015F8  EC0A  F013         	call	_Bcd2Hex
  8574  0015FC  0100               	movlb	0	; () banked
  8575  0015FE  6FEA               	movwf	(_RtcFechaHora+2)& (0+255),b
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;RTC21.c: 81: I2CSendAck();
  8579  001600  EC48  F011         	call	_I2CSendAck	;wreg free
  8580                           
  8581                           ;RTC21.c: 83: Char1 = I2CLeeByte();
  8582  001604  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8583  001608  5019               	movf	?_I2CLeeByte,w,c
  8584  00160A  6E29               	movwf	RtcLee@Char1,c
  8585                           
  8586                           ;RTC21.c: 84: RtcFechaHora[1] = Bcd2Hex(Char1);
  8587  00160C  5029               	movf	RtcLee@Char1,w,c
  8588  00160E  EC0A  F013         	call	_Bcd2Hex
  8589  001612  0100               	movlb	0	; () banked
  8590  001614  6FE9               	movwf	(_RtcFechaHora+1)& (0+255),b
  8591                           
  8592                           ;RTC21.c: 85: I2CSendAck();
  8593  001616  EC48  F011         	call	_I2CSendAck	;wreg free
  8594                           
  8595                           ;RTC21.c: 87: Char1 = I2CLeeByte();
  8596  00161A  ECB7  F00D         	call	_I2CLeeByte	;wreg free
  8597  00161E  5019               	movf	?_I2CLeeByte,w,c
  8598  001620  6E29               	movwf	RtcLee@Char1,c
  8599                           
  8600                           ;RTC21.c: 88: RtcFechaHora[0] = Bcd2Hex(Char1);
  8601  001622  5029               	movf	RtcLee@Char1,w,c
  8602  001624  EC0A  F013         	call	_Bcd2Hex
  8603  001628  0100               	movlb	0	; () banked
  8604  00162A  6FE8               	movwf	_RtcFechaHora& (0+255),b
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;RTC21.c: 89: I2CSendNAck();
  8608  00162C  ECBA  F011         	call	_I2CSendNAck	;wreg free
  8609                           
  8610                           ;RTC21.c: 90: I2CStop();
  8611  001630  EC8A  F012         	call	_I2CStop	;wreg free
  8612  001634  0012               	return		;funcret
  8613  001636                     __end_of_RtcLee:
  8614                           	opt stack 0
  8615                           tblptru	equ	0xFF8
  8616                           tblptrh	equ	0xFF7
  8617                           tblptrl	equ	0xFF6
  8618                           tablat	equ	0xFF5
  8619                           intcon	equ	0xFF2
  8620                           postinc0	equ	0xFEE
  8621                           wreg	equ	0xFE8
  8622                           postdec1	equ	0xFE5
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function _I2CStop *****************
  8632 ;; Defined at:
  8633 ;;		line 49 in file "I2C30.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		wreg
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8650 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8651 ;;Total ram usage:        0 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    5
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_MseEsc
  8658 ;;		_MseLee
  8659 ;;		_RtcEsc
  8660 ;;		_RtcLee
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	text51
  8665  002514                     __ptext51:
  8666                           	opt stack 0
  8667  002514                     _I2CStop:
  8668                           	opt stack 21
  8669                           
  8670                           ;I2C30.c: 50: TRISBbits.RB0=0;
  8671                           
  8672                           ;incstack = 0
  8673  002514  9093               	bcf	3987,0,c	;volatile
  8674                           
  8675                           ;I2C30.c: 51: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8676  002516  0E0C               	movlw	12
  8677  002518                     u3627:
  8678  002518  2EE8               	decfsz	wreg,f,c
  8679  00251A  D7FE               	bra	u3627
  8680  00251C  D000               	nop2	
  8681                           
  8682                           ;I2C30.c: 52: TRISBbits.RB1=1;
  8683  00251E  8293               	bsf	3987,1,c	;volatile
  8684                           
  8685                           ;I2C30.c: 53: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8686  002520  0E0C               	movlw	12
  8687  002522                     u3637:
  8688  002522  2EE8               	decfsz	wreg,f,c
  8689  002524  D7FE               	bra	u3637
  8690  002526  D000               	nop2	
  8691                           
  8692                           ;I2C30.c: 54: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8693  002528  0E0C               	movlw	12
  8694  00252A                     u3647:
  8695  00252A  2EE8               	decfsz	wreg,f,c
  8696  00252C  D7FE               	bra	u3647
  8697  00252E  D000               	nop2	
  8698                           
  8699                           ;I2C30.c: 55: TRISBbits.RB0=1;
  8700  002530  8093               	bsf	3987,0,c	;volatile
  8701                           
  8702                           ;I2C30.c: 56: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8703  002532  0E0C               	movlw	12
  8704  002534                     u3657:
  8705  002534  2EE8               	decfsz	wreg,f,c
  8706  002536  D7FE               	bra	u3657
  8707  002538  D000               	nop2	
  8708  00253A  0012               	return		;funcret
  8709  00253C                     __end_of_I2CStop:
  8710                           	opt stack 0
  8711                           tblptru	equ	0xFF8
  8712                           tblptrh	equ	0xFF7
  8713                           tblptrl	equ	0xFF6
  8714                           tablat	equ	0xFF5
  8715                           intcon	equ	0xFF2
  8716                           postinc0	equ	0xFEE
  8717                           wreg	equ	0xFE8
  8718                           postdec1	equ	0xFE5
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function _I2CStart *****************
  8728 ;; Defined at:
  8729 ;;		line 37 in file "I2C30.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;		None
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;		None
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  1    wreg      void 
  8736 ;; Registers used:
  8737 ;;		wreg
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0
  8744 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8746 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8747 ;;Total ram usage:        0 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    5
  8750 ;; This function calls:
  8751 ;;		Nothing
  8752 ;; This function is called by:
  8753 ;;		_MseEsc
  8754 ;;		_MseLee
  8755 ;;		_RtcEsc
  8756 ;;		_RtcLee
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text52
  8761  0023DA                     __ptext52:
  8762                           	opt stack 0
  8763  0023DA                     _I2CStart:
  8764                           	opt stack 21
  8765                           
  8766                           ;I2C30.c: 38: TRISBbits.RB0=1;
  8767                           
  8768                           ;incstack = 0
  8769  0023DA  8093               	bsf	3987,0,c	;volatile
  8770                           
  8771                           ;I2C30.c: 39: TRISBbits.RB1=1;
  8772  0023DC  8293               	bsf	3987,1,c	;volatile
  8773                           
  8774                           ;I2C30.c: 40: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8775  0023DE  0E0C               	movlw	12
  8776  0023E0                     u3667:
  8777  0023E0  2EE8               	decfsz	wreg,f,c
  8778  0023E2  D7FE               	bra	u3667
  8779  0023E4  D000               	nop2	
  8780                           
  8781                           ;I2C30.c: 41: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8782  0023E6  0E0C               	movlw	12
  8783  0023E8                     u3677:
  8784  0023E8  2EE8               	decfsz	wreg,f,c
  8785  0023EA  D7FE               	bra	u3677
  8786  0023EC  D000               	nop2	
  8787                           
  8788                           ;I2C30.c: 42: TRISBbits.RB0=0;
  8789  0023EE  9093               	bcf	3987,0,c	;volatile
  8790                           
  8791                           ;I2C30.c: 43: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8792  0023F0  0E0C               	movlw	12
  8793  0023F2                     u3687:
  8794  0023F2  2EE8               	decfsz	wreg,f,c
  8795  0023F4  D7FE               	bra	u3687
  8796  0023F6  D000               	nop2	
  8797                           
  8798                           ;I2C30.c: 44: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8799  0023F8  0E0C               	movlw	12
  8800  0023FA                     u3697:
  8801  0023FA  2EE8               	decfsz	wreg,f,c
  8802  0023FC  D7FE               	bra	u3697
  8803  0023FE  D000               	nop2	
  8804                           
  8805                           ;I2C30.c: 45: TRISBbits.RB1=0;
  8806  002400  9293               	bcf	3987,1,c	;volatile
  8807                           
  8808                           ;I2C30.c: 46: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8809  002402  0E0C               	movlw	12
  8810  002404                     u3707:
  8811  002404  2EE8               	decfsz	wreg,f,c
  8812  002406  D7FE               	bra	u3707
  8813  002408  D000               	nop2	
  8814  00240A  0012               	return		;funcret
  8815  00240C                     __end_of_I2CStart:
  8816                           	opt stack 0
  8817                           tblptru	equ	0xFF8
  8818                           tblptrh	equ	0xFF7
  8819                           tblptrl	equ	0xFF6
  8820                           tablat	equ	0xFF5
  8821                           intcon	equ	0xFF2
  8822                           postinc0	equ	0xFEE
  8823                           wreg	equ	0xFE8
  8824                           postdec1	equ	0xFE5
  8825                           fsr1l	equ	0xFE1
  8826                           indf2	equ	0xFDF
  8827                           postinc2	equ	0xFDE
  8828                           postdec2	equ	0xFDD
  8829                           fsr2h	equ	0xFDA
  8830                           fsr2l	equ	0xFD9
  8831                           status	equ	0xFD8
  8832                           
  8833 ;; *************** function _I2CSendNAck *****************
  8834 ;; Defined at:
  8835 ;;		line 128 in file "I2C30.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  1    wreg      void 
  8842 ;; Registers used:
  8843 ;;		wreg
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8852 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8853 ;;Total ram usage:        0 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    5
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		_MseLee
  8860 ;;		_RtcLee
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           	psect	text53
  8865  002374                     __ptext53:
  8866                           	opt stack 0
  8867  002374                     _I2CSendNAck:
  8868                           	opt stack 21
  8869                           
  8870                           ;I2C30.c: 129: TRISBbits.RB1=0;
  8871                           
  8872                           ;incstack = 0
  8873  002374  9293               	bcf	3987,1,c	;volatile
  8874                           
  8875                           ;I2C30.c: 130: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8876  002376  0E0C               	movlw	12
  8877  002378                     u3717:
  8878  002378  2EE8               	decfsz	wreg,f,c
  8879  00237A  D7FE               	bra	u3717
  8880  00237C  D000               	nop2	
  8881                           
  8882                           ;I2C30.c: 131: TRISBbits.RB0=1;
  8883  00237E  8093               	bsf	3987,0,c	;volatile
  8884                           
  8885                           ;I2C30.c: 132: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8886  002380  0E0C               	movlw	12
  8887  002382                     u3727:
  8888  002382  2EE8               	decfsz	wreg,f,c
  8889  002384  D7FE               	bra	u3727
  8890  002386  D000               	nop2	
  8891                           
  8892                           ;I2C30.c: 133: TRISBbits.RB1=1;
  8893  002388  8293               	bsf	3987,1,c	;volatile
  8894                           
  8895                           ;I2C30.c: 134: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8896  00238A  0E0C               	movlw	12
  8897  00238C                     u3737:
  8898  00238C  2EE8               	decfsz	wreg,f,c
  8899  00238E  D7FE               	bra	u3737
  8900  002390  D000               	nop2	
  8901                           
  8902                           ;I2C30.c: 135: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8903  002392  0E0C               	movlw	12
  8904  002394                     u3747:
  8905  002394  2EE8               	decfsz	wreg,f,c
  8906  002396  D7FE               	bra	u3747
  8907  002398  D000               	nop2	
  8908                           
  8909                           ;I2C30.c: 136: TRISBbits.RB1=0;
  8910  00239A  9293               	bcf	3987,1,c	;volatile
  8911                           
  8912                           ;I2C30.c: 137: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8913  00239C  0E0C               	movlw	12
  8914  00239E                     u3757:
  8915  00239E  2EE8               	decfsz	wreg,f,c
  8916  0023A0  D7FE               	bra	u3757
  8917  0023A2  D000               	nop2	
  8918                           
  8919                           ;I2C30.c: 138: TRISBbits.RB0=1;
  8920  0023A4  8093               	bsf	3987,0,c	;volatile
  8921  0023A6  0012               	return		;funcret
  8922  0023A8                     __end_of_I2CSendNAck:
  8923                           	opt stack 0
  8924                           tblptru	equ	0xFF8
  8925                           tblptrh	equ	0xFF7
  8926                           tblptrl	equ	0xFF6
  8927                           tablat	equ	0xFF5
  8928                           intcon	equ	0xFF2
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _I2CSendAck *****************
  8941 ;; Defined at:
  8942 ;;		line 114 in file "I2C30.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8956 ;;      Params:         0       0       0       0       0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8959 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8960 ;;Total ram usage:        0 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    5
  8963 ;; This function calls:
  8964 ;;		Nothing
  8965 ;; This function is called by:
  8966 ;;		_MseLee
  8967 ;;		_RtcLee
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text54
  8972  002290                     __ptext54:
  8973                           	opt stack 0
  8974  002290                     _I2CSendAck:
  8975                           	opt stack 21
  8976                           
  8977                           ;I2C30.c: 115: TRISBbits.RB1=0;
  8978                           
  8979                           ;incstack = 0
  8980  002290  9293               	bcf	3987,1,c	;volatile
  8981                           
  8982                           ;I2C30.c: 116: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8983  002292  0E0C               	movlw	12
  8984  002294                     u3767:
  8985  002294  2EE8               	decfsz	wreg,f,c
  8986  002296  D7FE               	bra	u3767
  8987  002298  D000               	nop2	
  8988                           
  8989                           ;I2C30.c: 117: TRISBbits.RB0=0;
  8990  00229A  9093               	bcf	3987,0,c	;volatile
  8991                           
  8992                           ;I2C30.c: 118: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8993  00229C  0E0C               	movlw	12
  8994  00229E                     u3777:
  8995  00229E  2EE8               	decfsz	wreg,f,c
  8996  0022A0  D7FE               	bra	u3777
  8997  0022A2  D000               	nop2	
  8998                           
  8999                           ;I2C30.c: 119: TRISBbits.RB1=1;
  9000  0022A4  8293               	bsf	3987,1,c	;volatile
  9001                           
  9002                           ;I2C30.c: 120: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9003  0022A6  0E0C               	movlw	12
  9004  0022A8                     u3787:
  9005  0022A8  2EE8               	decfsz	wreg,f,c
  9006  0022AA  D7FE               	bra	u3787
  9007  0022AC  D000               	nop2	
  9008                           
  9009                           ;I2C30.c: 121: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9010  0022AE  0E0C               	movlw	12
  9011  0022B0                     u3797:
  9012  0022B0  2EE8               	decfsz	wreg,f,c
  9013  0022B2  D7FE               	bra	u3797
  9014  0022B4  D000               	nop2	
  9015                           
  9016                           ;I2C30.c: 122: TRISBbits.RB1=0;
  9017  0022B6  9293               	bcf	3987,1,c	;volatile
  9018                           
  9019                           ;I2C30.c: 123: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9020  0022B8  0E0C               	movlw	12
  9021  0022BA                     u3807:
  9022  0022BA  2EE8               	decfsz	wreg,f,c
  9023  0022BC  D7FE               	bra	u3807
  9024  0022BE  D000               	nop2	
  9025                           
  9026                           ;I2C30.c: 124: TRISBbits.RB0=1;
  9027  0022C0  8093               	bsf	3987,0,c	;volatile
  9028                           
  9029                           ;I2C30.c: 125: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9030  0022C2  0E0C               	movlw	12
  9031  0022C4                     u3817:
  9032  0022C4  2EE8               	decfsz	wreg,f,c
  9033  0022C6  D7FE               	bra	u3817
  9034  0022C8  D000               	nop2	
  9035  0022CA  0012               	return		;funcret
  9036  0022CC                     __end_of_I2CSendAck:
  9037                           	opt stack 0
  9038                           tblptru	equ	0xFF8
  9039                           tblptrh	equ	0xFF7
  9040                           tblptrl	equ	0xFF6
  9041                           tablat	equ	0xFF5
  9042                           intcon	equ	0xFF2
  9043                           postinc0	equ	0xFEE
  9044                           wreg	equ	0xFE8
  9045                           postdec1	equ	0xFE5
  9046                           fsr1l	equ	0xFE1
  9047                           indf2	equ	0xFDF
  9048                           postinc2	equ	0xFDE
  9049                           postdec2	equ	0xFDD
  9050                           fsr2h	equ	0xFDA
  9051                           fsr2l	equ	0xFD9
  9052                           status	equ	0xFD8
  9053                           
  9054 ;; *************** function _I2CLeeByte *****************
  9055 ;; Defined at:
  9056 ;;		line 91 in file "I2C30.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;		None
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  I2CByte         2   28[COMRAM] unsigned short 
  9061 ;;  Index           2   26[COMRAM] short 
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  2   24[COMRAM] unsigned short 
  9064 ;; Registers used:
  9065 ;;		wreg, status,2, status,0
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9071 ;;      Params:         2       0       0       0       0       0       0       0       0
  9072 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9073 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9074 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9075 ;;Total ram usage:        6 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    5
  9078 ;; This function calls:
  9079 ;;		Nothing
  9080 ;; This function is called by:
  9081 ;;		_MseLee
  9082 ;;		_RtcLee
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           	psect	text55
  9087  001B6E                     __ptext55:
  9088                           	opt stack 0
  9089  001B6E                     _I2CLeeByte:
  9090                           	opt stack 21
  9091                           
  9092                           ;I2C30.c: 92: unsigned short I2CByte;
  9093                           ;I2C30.c: 93: short Index;
  9094                           ;I2C30.c: 94: TRISBbits.RB1=0;
  9095                           
  9096                           ;incstack = 0
  9097  001B6E  9293               	bcf	3987,1,c	;volatile
  9098                           
  9099                           ;I2C30.c: 95: TRISBbits.RB0=1;
  9100  001B70  8093               	bsf	3987,0,c	;volatile
  9101                           
  9102                           ;I2C30.c: 96: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9103  001B72  0E0C               	movlw	12
  9104  001B74                     u3827:
  9105  001B74  2EE8               	decfsz	wreg,f,c
  9106  001B76  D7FE               	bra	u3827
  9107  001B78  D000               	nop2	
  9108                           
  9109                           ;I2C30.c: 97: I2CByte = 0;
  9110  001B7A  0E00               	movlw	0
  9111  001B7C  6E1E               	movwf	I2CLeeByte@I2CByte+1,c
  9112  001B7E  0E00               	movlw	0
  9113  001B80  6E1D               	movwf	I2CLeeByte@I2CByte,c
  9114                           
  9115                           ;I2C30.c: 98: for (Index = 1; Index <= 8; Index++) {
  9116  001B82  0E00               	movlw	0
  9117  001B84  6E1C               	movwf	I2CLeeByte@Index+1,c
  9118  001B86  0E01               	movlw	1
  9119  001B88  6E1B               	movwf	I2CLeeByte@Index,c
  9120  001B8A  BE1C               	btfsc	I2CLeeByte@Index+1,7,c
  9121  001B8C  D006               	goto	l4180
  9122  001B8E  501C               	movf	I2CLeeByte@Index+1,w,c
  9123  001B90  E122               	bnz	l325
  9124  001B92  0E09               	movlw	9
  9125  001B94  5C1B               	subwf	I2CLeeByte@Index,w,c
  9126  001B96  B0D8               	btfsc	status,0,c
  9127  001B98  D01E               	goto	l325
  9128  001B9A                     l4180:
  9129                           
  9130                           ;I2C30.c: 99: I2CByte = I2CByte << 1;
  9131  001B9A  90D8               	bcf	status,0,c
  9132  001B9C  341D               	rlcf	I2CLeeByte@I2CByte,w,c
  9133  001B9E  6E1D               	movwf	I2CLeeByte@I2CByte,c
  9134  001BA0  341E               	rlcf	I2CLeeByte@I2CByte+1,w,c
  9135  001BA2  6E1E               	movwf	I2CLeeByte@I2CByte+1,c
  9136                           
  9137                           ;I2C30.c: 100: TRISBbits.RB1=1;
  9138  001BA4  8293               	bsf	3987,1,c	;volatile
  9139                           
  9140                           ;I2C30.c: 101: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9141  001BA6  0E0C               	movlw	12
  9142  001BA8                     u3837:
  9143  001BA8  2EE8               	decfsz	wreg,f,c
  9144  001BAA  D7FE               	bra	u3837
  9145  001BAC  D000               	nop2	
  9146                           
  9147                           ;I2C30.c: 102: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9148  001BAE  0E0C               	movlw	12
  9149  001BB0                     u3847:
  9150  001BB0  2EE8               	decfsz	wreg,f,c
  9151  001BB2  D7FE               	bra	u3847
  9152  001BB4  D000               	nop2	
  9153                           
  9154                           ;I2C30.c: 103: if (PORTBbits.RB0 == 1) {
  9155  001BB6  A081               	btfss	3969,0,c	;volatile
  9156  001BB8  D002               	goto	l4192
  9157                           
  9158                           ;I2C30.c: 104: I2CByte += 1;
  9159  001BBA  4A1D               	infsnz	I2CLeeByte@I2CByte,f,c
  9160  001BBC  2A1E               	incf	I2CLeeByte@I2CByte+1,f,c
  9161  001BBE                     l4192:
  9162                           
  9163                           ;I2C30.c: 105: }
  9164                           ;I2C30.c: 106: TRISBbits.RB1=0;
  9165  001BBE  9293               	bcf	3987,1,c	;volatile
  9166                           
  9167                           ;I2C30.c: 107: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9168  001BC0  0E0C               	movlw	12
  9169  001BC2                     u3857:
  9170  001BC2  2EE8               	decfsz	wreg,f,c
  9171  001BC4  D7FE               	bra	u3857
  9172  001BC6  D000               	nop2	
  9173  001BC8  4A1B               	infsnz	I2CLeeByte@Index,f,c
  9174  001BCA  2A1C               	incf	I2CLeeByte@Index+1,f,c
  9175  001BCC  BE1C               	btfsc	I2CLeeByte@Index+1,7,c
  9176  001BCE  D7E5               	goto	l4180
  9177  001BD0  501C               	movf	I2CLeeByte@Index+1,w,c
  9178  001BD2  E101               	bnz	u2690
  9179  001BD4  D7DE               	goto	L3
  9180  001BD6                     u2690:
  9181  001BD6                     l325:
  9182                           
  9183                           ;I2C30.c: 108: }
  9184                           ;I2C30.c: 109: TRISBbits.RB0=1;;
  9185  001BD6  8093               	bsf	3987,0,c	;volatile
  9186                           
  9187                           ;I2C30.c: 110: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9188  001BD8  0E0C               	movlw	12
  9189  001BDA                     u3867:
  9190  001BDA  2EE8               	decfsz	wreg,f,c
  9191  001BDC  D7FE               	bra	u3867
  9192  001BDE  D000               	nop2	
  9193                           
  9194                           ;I2C30.c: 111: return (I2CByte);
  9195  001BE0  C01D  F019         	movff	I2CLeeByte@I2CByte,?_I2CLeeByte
  9196  001BE4  C01E  F01A         	movff	I2CLeeByte@I2CByte+1,?_I2CLeeByte+1
  9197  001BE8  0012               	return	
  9198  001BEA                     __end_of_I2CLeeByte:
  9199                           	opt stack 0
  9200                           tblptru	equ	0xFF8
  9201                           tblptrh	equ	0xFF7
  9202                           tblptrl	equ	0xFF6
  9203                           tablat	equ	0xFF5
  9204                           intcon	equ	0xFF2
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           postdec1	equ	0xFE5
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _I2CEscByte *****************
  9217 ;; Defined at:
  9218 ;;		line 59 in file "I2C30.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  I2CByte         2   36[COMRAM] unsigned short 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  Index           2   38[COMRAM] short 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  1    wreg      void 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9232 ;;      Params:         2       0       0       0       0       0       0       0       0
  9233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9235 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9236 ;;Total ram usage:        4 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    5
  9239 ;; This function calls:
  9240 ;;		Nothing
  9241 ;; This function is called by:
  9242 ;;		_MseEsc
  9243 ;;		_MseLee
  9244 ;;		_RtcEsc
  9245 ;;		_RtcLee
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text56
  9250  0019CC                     __ptext56:
  9251                           	opt stack 0
  9252  0019CC                     _I2CEscByte:
  9253                           	opt stack 21
  9254                           
  9255                           ;I2C30.c: 61: short Index;
  9256                           ;I2C30.c: 62: TRISBbits.RB1=0;
  9257                           
  9258                           ;incstack = 0
  9259  0019CC  9293               	bcf	3987,1,c	;volatile
  9260                           
  9261                           ;I2C30.c: 63: for (Index = 1; Index <= 8; Index++) {
  9262  0019CE  0E00               	movlw	0
  9263  0019D0  6E28               	movwf	I2CEscByte@Index+1,c
  9264  0019D2  0E01               	movlw	1
  9265  0019D4  6E27               	movwf	I2CEscByte@Index,c
  9266  0019D6  BE28               	btfsc	I2CEscByte@Index+1,7,c
  9267  0019D8  D006               	goto	l315
  9268  0019DA  5028               	movf	I2CEscByte@Index+1,w,c
  9269  0019DC  E127               	bnz	l316
  9270  0019DE  0E09               	movlw	9
  9271  0019E0  5C27               	subwf	I2CEscByte@Index,w,c
  9272  0019E2  B0D8               	btfsc	status,0,c
  9273  0019E4  D023               	goto	l316
  9274  0019E6                     l315:
  9275                           
  9276                           ;I2C30.c: 64: if ((I2CByte & 0x80) == 0) {
  9277  0019E6  BE25               	btfsc	I2CEscByte@I2CByte,7,c
  9278  0019E8  D002               	goto	l317
  9279                           
  9280                           ;I2C30.c: 65: TRISBbits.RB0=0;;
  9281  0019EA  9093               	bcf	3987,0,c	;volatile
  9282                           
  9283                           ;I2C30.c: 66: } else {
  9284  0019EC  D001               	goto	l4134
  9285  0019EE                     l317:
  9286                           
  9287                           ;I2C30.c: 67: TRISBbits.RB0=1;;
  9288  0019EE  8093               	bsf	3987,0,c	;volatile
  9289  0019F0                     l4134:
  9290                           
  9291                           ;I2C30.c: 68: }
  9292                           ;I2C30.c: 69: I2CByte = I2CByte << 1;
  9293  0019F0  90D8               	bcf	status,0,c
  9294  0019F2  3425               	rlcf	I2CEscByte@I2CByte,w,c
  9295  0019F4  6E25               	movwf	I2CEscByte@I2CByte,c
  9296  0019F6  3426               	rlcf	I2CEscByte@I2CByte+1,w,c
  9297  0019F8  6E26               	movwf	I2CEscByte@I2CByte+1,c
  9298                           
  9299                           ;I2C30.c: 70: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9300  0019FA  0E0C               	movlw	12
  9301  0019FC                     u3877:
  9302  0019FC  2EE8               	decfsz	wreg,f,c
  9303  0019FE  D7FE               	bra	u3877
  9304  001A00  D000               	nop2	
  9305                           
  9306                           ;I2C30.c: 71: TRISBbits.RB1=1;;
  9307  001A02  8293               	bsf	3987,1,c	;volatile
  9308                           
  9309                           ;I2C30.c: 72: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9310  001A04  0E0C               	movlw	12
  9311  001A06                     u3887:
  9312  001A06  2EE8               	decfsz	wreg,f,c
  9313  001A08  D7FE               	bra	u3887
  9314  001A0A  D000               	nop2	
  9315                           
  9316                           ;I2C30.c: 73: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9317  001A0C  0E0C               	movlw	12
  9318  001A0E                     u3897:
  9319  001A0E  2EE8               	decfsz	wreg,f,c
  9320  001A10  D7FE               	bra	u3897
  9321  001A12  D000               	nop2	
  9322                           
  9323                           ;I2C30.c: 74: TRISBbits.RB1=0;;
  9324  001A14  9293               	bcf	3987,1,c	;volatile
  9325                           
  9326                           ;I2C30.c: 75: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9327  001A16  0E0C               	movlw	12
  9328  001A18                     u3907:
  9329  001A18  2EE8               	decfsz	wreg,f,c
  9330  001A1A  D7FE               	bra	u3907
  9331  001A1C  D000               	nop2	
  9332  001A1E  4A27               	infsnz	I2CEscByte@Index,f,c
  9333  001A20  2A28               	incf	I2CEscByte@Index+1,f,c
  9334  001A22  BE28               	btfsc	I2CEscByte@Index+1,7,c
  9335  001A24  D7E0               	goto	l315
  9336  001A26  5028               	movf	I2CEscByte@Index+1,w,c
  9337  001A28  E101               	bnz	u2650
  9338  001A2A  D7D9               	goto	L4
  9339  001A2C                     u2650:
  9340  001A2C                     l316:
  9341                           
  9342                           ;I2C30.c: 76: }
  9343                           ;I2C30.c: 78: TRISBbits.RB0=1;
  9344  001A2C  8093               	bsf	3987,0,c	;volatile
  9345                           
  9346                           ;I2C30.c: 79: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9347  001A2E  0E0C               	movlw	12
  9348  001A30                     u3917:
  9349  001A30  2EE8               	decfsz	wreg,f,c
  9350  001A32  D7FE               	bra	u3917
  9351  001A34  D000               	nop2	
  9352                           
  9353                           ;I2C30.c: 80: TRISBbits.RB1=1;
  9354  001A36  8293               	bsf	3987,1,c	;volatile
  9355                           
  9356                           ;I2C30.c: 81: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9357  001A38  0E0C               	movlw	12
  9358  001A3A                     u3927:
  9359  001A3A  2EE8               	decfsz	wreg,f,c
  9360  001A3C  D7FE               	bra	u3927
  9361  001A3E  D000               	nop2	
  9362                           
  9363                           ;I2C30.c: 84: if (PORTBbits.RB0 == 0) {I2CAck = 1;}
  9364  001A40  B081               	btfsc	3969,0,c	;volatile
  9365  001A42  D005               	goto	l4160
  9366  001A44  0E00               	movlw	0
  9367  001A46  0100               	movlb	0	; () banked
  9368  001A48  6F8F               	movwf	(_I2CAck+1)& (0+255),b
  9369  001A4A  0E01               	movlw	1
  9370  001A4C  D004               	goto	L5
  9371  001A4E                     l4160:
  9372                           
  9373                           ;I2C30.c: 85: else {I2CAck = 0;}
  9374  001A4E  0E00               	movlw	0
  9375  001A50  0100               	movlb	0	; () banked
  9376  001A52  6F8F               	movwf	(_I2CAck+1)& (0+255),b
  9377  001A54  0E00               	movlw	0
  9378  001A56                     L5:
  9379  001A56  6F8E               	movwf	_I2CAck& (0+255),b
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;I2C30.c: 86: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9383                           
  9384                           ; BSR set to: 0
  9385  001A58  0E0C               	movlw	12
  9386  001A5A                     u3937:
  9387  001A5A  2EE8               	decfsz	wreg,f,c
  9388  001A5C  D7FE               	bra	u3937
  9389  001A5E  D000               	nop2	
  9390                           
  9391                           ;I2C30.c: 87: TRISBbits.RB1=0;
  9392  001A60  9293               	bcf	3987,1,c	;volatile
  9393                           
  9394                           ;I2C30.c: 88: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9395  001A62  0E0C               	movlw	12
  9396  001A64                     u3947:
  9397  001A64  2EE8               	decfsz	wreg,f,c
  9398  001A66  D7FE               	bra	u3947
  9399  001A68  D000               	nop2	
  9400  001A6A  0012               	return		;funcret
  9401  001A6C                     __end_of_I2CEscByte:
  9402                           	opt stack 0
  9403                           tblptru	equ	0xFF8
  9404                           tblptrh	equ	0xFF7
  9405                           tblptrl	equ	0xFF6
  9406                           tablat	equ	0xFF5
  9407                           intcon	equ	0xFF2
  9408                           postinc0	equ	0xFEE
  9409                           wreg	equ	0xFE8
  9410                           postdec1	equ	0xFE5
  9411                           fsr1l	equ	0xFE1
  9412                           indf2	equ	0xFDF
  9413                           postinc2	equ	0xFDE
  9414                           postdec2	equ	0xFDD
  9415                           fsr2h	equ	0xFDA
  9416                           fsr2l	equ	0xFD9
  9417                           status	equ	0xFD8
  9418                           
  9419 ;; *************** function _Bcd2Hex *****************
  9420 ;; Defined at:
  9421 ;;		line 19 in file "RTC21.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  Bcd1            1    wreg     unsigned char 
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;  Bcd1            1   26[COMRAM] unsigned char 
  9426 ;;  Hex1            1   25[COMRAM] unsigned char 
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  1    wreg      unsigned char 
  9429 ;; Registers used:
  9430 ;;		wreg, status,2, status,0, prodl, prodh
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9436 ;;      Params:         0       0       0       0       0       0       0       0       0
  9437 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9438 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9439 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9440 ;;Total ram usage:        3 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    5
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_RtcLee
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           	psect	text57
  9451  002614                     __ptext57:
  9452                           	opt stack 0
  9453  002614                     _Bcd2Hex:
  9454                           	opt stack 21
  9455                           
  9456                           ;incstack = 0
  9457                           ;Bcd2Hex@Bcd1 stored from wreg
  9458  002614  6E1B               	movwf	Bcd2Hex@Bcd1,c
  9459                           
  9460                           ;RTC21.c: 20: char Hex1;
  9461                           ;RTC21.c: 21: Hex1 = ((Bcd1 >> 4)*10) +(Bcd1 & 0x0F);
  9462  002616  C01B  F019         	movff	Bcd2Hex@Bcd1,??_Bcd2Hex
  9463  00261A  0E0F               	movlw	15
  9464  00261C  1619               	andwf	??_Bcd2Hex,f,c
  9465  00261E  381B               	swapf	Bcd2Hex@Bcd1,w,c
  9466  002620  0B0F               	andlw	15
  9467  002622  0D0A               	mullw	10
  9468  002624  50F3               	movf	prodl,w,c
  9469  002626  2419               	addwf	??_Bcd2Hex,w,c
  9470  002628  6E1A               	movwf	Bcd2Hex@Hex1,c
  9471                           
  9472                           ;RTC21.c: 22: return (Hex1);
  9473  00262A  501A               	movf	Bcd2Hex@Hex1,w,c
  9474  00262C  0012               	return	
  9475  00262E                     __end_of_Bcd2Hex:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodl	equ	0xFF3
  9482                           intcon	equ	0xFF2
  9483                           postinc0	equ	0xFEE
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1l	equ	0xFE1
  9487                           indf2	equ	0xFDF
  9488                           postinc2	equ	0xFDE
  9489                           postdec2	equ	0xFDD
  9490                           fsr2h	equ	0xFDA
  9491                           fsr2l	equ	0xFD9
  9492                           status	equ	0xFD8
  9493                           
  9494 ;; *************** function _MrSeparaFecha *****************
  9495 ;; Defined at:
  9496 ;;		line 258 in file "MemoryRoller29.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;		None
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;  MrAmPm          2   36[COMRAM] unsigned short 
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  1    wreg      void 
  9503 ;; Registers used:
  9504 ;;		wreg, status,2, status,0
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9510 ;;      Params:         0       0       0       0       0       0       0       0       0
  9511 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9512 ;;      Temps:         12       0       0       0       0       0       0       0       0
  9513 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9514 ;;Total ram usage:       14 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    5
  9517 ;; This function calls:
  9518 ;;		Nothing
  9519 ;; This function is called by:
  9520 ;;		_MrFormat
  9521 ;;		_MrAgregaReg
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           	psect	text58
  9526  001190                     __ptext58:
  9527                           	opt stack 0
  9528  001190                     _MrSeparaFecha:
  9529                           	opt stack 21
  9530                           
  9531                           ;MemoryRoller29.c: 259: unsigned short MrAmPm;
  9532                           ;MemoryRoller29.c: 260: MrHora12 = RtcFechaHora[3] & 0x1F;
  9533                           
  9534                           ;incstack = 0
  9535  001190  C0EB  F019         	movff	_RtcFechaHora+3,??_MrSeparaFecha
  9536  001194  0E1F               	movlw	31
  9537  001196  1619               	andwf	??_MrSeparaFecha,f,c
  9538  001198  5019               	movf	??_MrSeparaFecha,w,c
  9539  00119A  0100               	movlb	0	; () banked
  9540  00119C  6FF3               	movwf	_MrHora12& (0+255),b
  9541  00119E  6BF4               	clrf	(_MrHora12+1)& (0+255),b
  9542                           
  9543                           ;MemoryRoller29.c: 261: if (MrHora12 < 12) {MrAmPm = 0;}
  9544  0011A0  0100               	movlb	0	; () banked
  9545  0011A2  51F4               	movf	(_MrHora12+1)& (0+255),w,b
  9546  0011A4  E10A               	bnz	l4540
  9547  0011A6  0E0C               	movlw	12
  9548  0011A8  0100               	movlb	0	; () banked
  9549  0011AA  5DF3               	subwf	_MrHora12& (0+255),w,b
  9550  0011AC  B0D8               	btfsc	status,0,c
  9551  0011AE  D005               	goto	l4540
  9552                           
  9553                           ; BSR set to: 0
  9554  0011B0  0E00               	movlw	0
  9555  0011B2  6E26               	movwf	MrSeparaFecha@MrAmPm+1,c
  9556  0011B4  0E00               	movlw	0
  9557  0011B6  6E25               	movwf	MrSeparaFecha@MrAmPm,c
  9558  0011B8  D009               	goto	l4544
  9559  0011BA                     l4540:
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;MemoryRoller29.c: 262: else {MrAmPm = 1; MrHora12 -= 12;}
  9563  0011BA  0E00               	movlw	0
  9564  0011BC  6E26               	movwf	MrSeparaFecha@MrAmPm+1,c
  9565  0011BE  0E01               	movlw	1
  9566  0011C0  6E25               	movwf	MrSeparaFecha@MrAmPm,c
  9567                           
  9568                           ; BSR set to: 0
  9569  0011C2  0E0C               	movlw	12
  9570  0011C4  0100               	movlb	0	; () banked
  9571  0011C6  5FF3               	subwf	_MrHora12& (0+255),f,b
  9572  0011C8  0E00               	movlw	0
  9573  0011CA  5BF4               	subwfb	(_MrHora12+1)& (0+255),f,b
  9574  0011CC                     l4544:
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;MemoryRoller29.c: 263: MrFecha12 = RtcFechaHora[0];
  9578  0011CC  0100               	movlb	0	; () banked
  9579  0011CE  51E8               	movf	_RtcFechaHora& (0+255),w,b
  9580  0011D0  6E3D               	movwf	_MrFecha12,c
  9581  0011D2  6A3E               	clrf	_MrFecha12+1,c
  9582  0011D4  6A3F               	clrf	_MrFecha12+2,c
  9583  0011D6  6A40               	clrf	_MrFecha12+3,c
  9584                           
  9585                           ;MemoryRoller29.c: 264: MrFecha12 = (MrFecha12<<8) + RtcFechaHora[1];
  9586  0011D8  0100               	movlb	0	; () banked
  9587  0011DA  51E9               	movf	(_RtcFechaHora+1)& (0+255),w,b
  9588  0011DC  C03D  F01A         	movff	_MrFecha12,??_MrSeparaFecha+1
  9589  0011E0  C03E  F01B         	movff	_MrFecha12+1,??_MrSeparaFecha+2
  9590  0011E4  C03F  F01C         	movff	_MrFecha12+2,??_MrSeparaFecha+3
  9591  0011E8  6A19               	clrf	??_MrSeparaFecha& (0+255),c
  9592  0011EA  2419               	addwf	??_MrSeparaFecha,w,c
  9593  0011EC  6E3D               	movwf	_MrFecha12,c
  9594  0011EE  0E00               	movlw	0
  9595  0011F0  201A               	addwfc	??_MrSeparaFecha+1,w,c
  9596  0011F2  6E3E               	movwf	_MrFecha12+1,c
  9597  0011F4  0E00               	movlw	0
  9598  0011F6  201B               	addwfc	??_MrSeparaFecha+2,w,c
  9599  0011F8  6E3F               	movwf	_MrFecha12+2,c
  9600  0011FA  0E00               	movlw	0
  9601  0011FC  201C               	addwfc	??_MrSeparaFecha+3,w,c
  9602  0011FE  6E40               	movwf	_MrFecha12+3,c
  9603                           
  9604                           ;MemoryRoller29.c: 265: MrFecha12 = (MrFecha12<<8) + (RtcFechaHora[2]<<1) + MrAmPm;
  9605  001200  90D8               	bcf	status,0,c
  9606  001202  0100               	movlb	0	; () banked
  9607  001204  35EA               	rlcf	(_RtcFechaHora+2)& (0+255),w,b
  9608  001206  6E19               	movwf	??_MrSeparaFecha& (0+255),c
  9609  001208  6A1A               	clrf	(??_MrSeparaFecha+1)& (0+255),c
  9610  00120A  361A               	rlcf	(??_MrSeparaFecha+1)& (0+255),f,c
  9611  00120C  6A1B               	clrf	(??_MrSeparaFecha+2)& (0+255),c
  9612  00120E  BE1A               	btfsc	(??_MrSeparaFecha+1)& (0+255),7,c
  9613  001210  061B               	decf	(??_MrSeparaFecha+2)& (0+255),f,c
  9614  001212  501B               	movf	(??_MrSeparaFecha+2)& (0+255),w,c
  9615  001214  6E1C               	movwf	(??_MrSeparaFecha+3)& (0+255),c
  9616  001216  C03D  F01E         	movff	_MrFecha12,??_MrSeparaFecha+5
  9617  00121A  C03E  F01F         	movff	_MrFecha12+1,??_MrSeparaFecha+6
  9618  00121E  C03F  F020         	movff	_MrFecha12+2,??_MrSeparaFecha+7
  9619  001222  6A1D               	clrf	(??_MrSeparaFecha+4)& (0+255),c
  9620  001224  5019               	movf	??_MrSeparaFecha,w,c
  9621  001226  241D               	addwf	??_MrSeparaFecha+4,w,c
  9622  001228  6E21               	movwf	(??_MrSeparaFecha+8)& (0+255),c
  9623  00122A  501A               	movf	??_MrSeparaFecha+1,w,c
  9624  00122C  201E               	addwfc	??_MrSeparaFecha+5,w,c
  9625  00122E  6E22               	movwf	(??_MrSeparaFecha+9)& (0+255),c
  9626  001230  501B               	movf	??_MrSeparaFecha+2,w,c
  9627  001232  201F               	addwfc	??_MrSeparaFecha+6,w,c
  9628  001234  6E23               	movwf	(??_MrSeparaFecha+10)& (0+255),c
  9629  001236  501C               	movf	??_MrSeparaFecha+3,w,c
  9630  001238  2020               	addwfc	??_MrSeparaFecha+7,w,c
  9631  00123A  6E24               	movwf	(??_MrSeparaFecha+11)& (0+255),c
  9632  00123C  5025               	movf	MrSeparaFecha@MrAmPm,w,c
  9633  00123E  2421               	addwf	??_MrSeparaFecha+8,w,c
  9634  001240  6E3D               	movwf	_MrFecha12,c
  9635  001242  5026               	movf	MrSeparaFecha@MrAmPm+1,w,c
  9636  001244  2022               	addwfc	??_MrSeparaFecha+9,w,c
  9637  001246  6E3E               	movwf	_MrFecha12+1,c
  9638  001248  0E00               	movlw	0
  9639  00124A  2023               	addwfc	??_MrSeparaFecha+10,w,c
  9640  00124C  6E3F               	movwf	_MrFecha12+2,c
  9641  00124E  0E00               	movlw	0
  9642  001250  2024               	addwfc	??_MrSeparaFecha+11,w,c
  9643  001252  6E40               	movwf	_MrFecha12+3,c
  9644                           
  9645                           ;MemoryRoller29.c: 266: MrHora12 = (( (MrHora12<<6)+RtcFechaHora[4] ) <<6) +RtcFechaHora
      +                          [5];
  9646  001254  C0F3  F019         	movff	_MrHora12,??_MrSeparaFecha
  9647  001258  C0F4  F01A         	movff	_MrHora12+1,??_MrSeparaFecha+1
  9648  00125C  0E06               	movlw	6
  9649  00125E                     u3045:
  9650  00125E  90D8               	bcf	status,0,c
  9651  001260  3619               	rlcf	??_MrSeparaFecha,f,c
  9652  001262  361A               	rlcf	??_MrSeparaFecha+1,f,c
  9653  001264  2EE8               	decfsz	wreg,f,c
  9654  001266  D7FB               	goto	u3045
  9655  001268  0100               	movlb	0	; () banked
  9656  00126A  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  9657  00126C  2619               	addwf	??_MrSeparaFecha,f,c
  9658  00126E  0E00               	movlw	0
  9659  001270  221A               	addwfc	??_MrSeparaFecha+1,f,c
  9660  001272  0E06               	movlw	6
  9661  001274                     u3055:
  9662  001274  90D8               	bcf	status,0,c
  9663  001276  3619               	rlcf	??_MrSeparaFecha,f,c
  9664  001278  361A               	rlcf	??_MrSeparaFecha+1,f,c
  9665  00127A  2EE8               	decfsz	wreg,f,c
  9666  00127C  D7FB               	goto	u3055
  9667  00127E  0100               	movlb	0	; () banked
  9668  001280  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  9669  001282  2419               	addwf	??_MrSeparaFecha,w,c
  9670  001284  0100               	movlb	0	; () banked
  9671  001286  6FF3               	movwf	_MrHora12& (0+255),b
  9672  001288  0100               	movlb	0	; () banked
  9673  00128A  0E00               	movlw	0
  9674  00128C  201A               	addwfc	??_MrSeparaFecha+1,w,c
  9675  00128E  0100               	movlb	0	; () banked
  9676  001290  6FF4               	movwf	(_MrHora12+1)& (0+255),b
  9677                           
  9678                           ; BSR set to: 0
  9679  001292  0012               	return		;funcret
  9680  001294                     __end_of_MrSeparaFecha:
  9681                           	opt stack 0
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           postinc0	equ	0xFEE
  9689                           wreg	equ	0xFE8
  9690                           postdec1	equ	0xFE5
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _LeeRAM *****************
  9700 ;; Defined at:
  9701 ;;		line 10 in file "RsComando14.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;  Dir             2   34[COMRAM] int 
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      unsigned char 
  9708 ;; Registers used:
  9709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9715 ;;      Params:         2       0       0       0       0       0       0       0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9718 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9719 ;;Total ram usage:        2 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    6
  9722 ;; This function calls:
  9723 ;;		_memcpy
  9724 ;; This function is called by:
  9725 ;;		_MstRsComando
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text59
  9730  00253C                     __ptext59:
  9731                           	opt stack 0
  9732  00253C                     _LeeRAM:
  9733                           	opt stack 21
  9734                           
  9735                           ;RsComando14.c: 11: Ptr1 = (void *) Dir;
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;incstack = 0
  9739  00253C  C023  F0A6         	movff	LeeRAM@Dir,_Ptr1
  9740  002540  C024  F0A7         	movff	LeeRAM@Dir+1,_Ptr1+1
  9741                           
  9742                           ;RsComando14.c: 12: memcpy(&Car1, Ptr1, 1);
  9743  002544  0E45               	movlw	low _Car1
  9744  002546  6E19               	movwf	memcpy@d1,c
  9745  002548  0E00               	movlw	high _Car1
  9746  00254A  6E1A               	movwf	memcpy@d1+1,c
  9747  00254C  C0A6  F01B         	movff	_Ptr1,memcpy@s1
  9748  002550  C0A7  F01C         	movff	_Ptr1+1,memcpy@s1+1
  9749  002554  0E00               	movlw	0
  9750  002556  6E1E               	movwf	memcpy@n+1,c
  9751  002558  0E01               	movlw	1
  9752  00255A  6E1D               	movwf	memcpy@n,c
  9753  00255C  ECE9  F010         	call	_memcpy	;wreg free
  9754                           
  9755                           ;RsComando14.c: 13: return (Car1);
  9756  002560  5045               	movf	_Car1,w,c
  9757  002562  0012               	return	
  9758  002564                     __end_of_LeeRAM:
  9759                           	opt stack 0
  9760                           tblptru	equ	0xFF8
  9761                           tblptrh	equ	0xFF7
  9762                           tblptrl	equ	0xFF6
  9763                           tablat	equ	0xFF5
  9764                           prodl	equ	0xFF3
  9765                           intcon	equ	0xFF2
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           postdec1	equ	0xFE5
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           fsr2h	equ	0xFDA
  9774                           fsr2l	equ	0xFD9
  9775                           status	equ	0xFD8
  9776                           
  9777 ;; *************** function _EscRAM *****************
  9778 ;; Defined at:
  9779 ;;		line 16 in file "RsComando14.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  Dir             2   34[COMRAM] int 
  9782 ;;  Car2P           2   36[COMRAM] PTR void 
  9783 ;;		 -> RsRxBuffer(30), 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9795 ;;      Params:         4       0       0       0       0       0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9798 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9799 ;;Total ram usage:        4 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    6
  9802 ;; This function calls:
  9803 ;;		_memcpy
  9804 ;; This function is called by:
  9805 ;;		_MstRsComando
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	text60
  9810  0025B0                     __ptext60:
  9811                           	opt stack 0
  9812  0025B0                     _EscRAM:
  9813                           	opt stack 21
  9814                           
  9815                           ;RsComando14.c: 17: Ptr1 = (void *) Dir;
  9816                           
  9817                           ;incstack = 0
  9818  0025B0  C023  F0A6         	movff	EscRAM@Dir,_Ptr1
  9819  0025B4  C024  F0A7         	movff	EscRAM@Dir+1,_Ptr1+1
  9820                           
  9821                           ;RsComando14.c: 19: memcpy(Ptr1, Car2P, 1);
  9822  0025B8  C0A6  F019         	movff	_Ptr1,memcpy@d1
  9823  0025BC  C0A7  F01A         	movff	_Ptr1+1,memcpy@d1+1
  9824  0025C0  C025  F01B         	movff	EscRAM@Car2P,memcpy@s1
  9825  0025C4  C026  F01C         	movff	EscRAM@Car2P+1,memcpy@s1+1
  9826  0025C8  0E00               	movlw	0
  9827  0025CA  6E1E               	movwf	memcpy@n+1,c
  9828  0025CC  0E01               	movlw	1
  9829  0025CE  6E1D               	movwf	memcpy@n,c
  9830  0025D0  ECE9  F010         	call	_memcpy	;wreg free
  9831  0025D4  0012               	return	
  9832  0025D6                     __end_of_EscRAM:
  9833                           	opt stack 0
  9834                           tblptru	equ	0xFF8
  9835                           tblptrh	equ	0xFF7
  9836                           tblptrl	equ	0xFF6
  9837                           tablat	equ	0xFF5
  9838                           prodl	equ	0xFF3
  9839                           intcon	equ	0xFF2
  9840                           postinc0	equ	0xFEE
  9841                           wreg	equ	0xFE8
  9842                           postdec1	equ	0xFE5
  9843                           fsr1l	equ	0xFE1
  9844                           indf2	equ	0xFDF
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function _memcpy *****************
  9852 ;; Defined at:
  9853 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memcpy.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  d1              2   24[COMRAM] PTR void 
  9856 ;;		 -> NULL(0), MrDirV(2), MrRegAux(13), MrReg(13), 
  9857 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), Car1(1), RAM(2047), 
  9858 ;;		 -> RsTxBuffer(30), 
  9859 ;;  s1              2   26[COMRAM] PTR const void 
  9860 ;;		 -> NULL(0), MIOAdcAct(10), MIOAdcLeido(10), MrHora12(2), 
  9861 ;;		 -> MrFecha12(4), MrDirV(2), MrUltV(2), MrReg(13), 
  9862 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), RAM(2047), RsRxBuffer(30), 
  9863 ;;  n               2   28[COMRAM] unsigned int 
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;  s               2   32[COMRAM] PTR const unsigned char 
  9866 ;;		 -> NULL(0), MIOAdcAct(10), MIOAdcLeido(10), MrHora12(2), 
  9867 ;;		 -> MrFecha12(4), MrDirV(2), MrUltV(2), MrReg(13), 
  9868 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), RAM(2047), RsRxBuffer(30), 
  9869 ;;  d               2   30[COMRAM] PTR unsigned char 
  9870 ;;		 -> NULL(0), MrDirV(2), MrRegAux(13), MrReg(13), 
  9871 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), Car1(1), RAM(2047), 
  9872 ;;		 -> RsTxBuffer(30), 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  2   24[COMRAM] PTR void 
  9875 ;; Registers used:
  9876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9882 ;;      Params:         6       0       0       0       0       0       0       0       0
  9883 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9885 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9886 ;;Total ram usage:       10 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    5
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_LeeRAM
  9893 ;;		_EscRAM
  9894 ;;		_MrInit
  9895 ;;		_MrAgregaReg
  9896 ;;		__MrPreparaFecha
  9897 ;;		_Ppal_RsComando
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           	psect	text61
  9902  0021D2                     __ptext61:
  9903                           	opt stack 0
  9904  0021D2                     _memcpy:
  9905                           	opt stack 22
  9906                           
  9907                           ;incstack = 0
  9908  0021D2  C01B  F021         	movff	memcpy@s1,memcpy@s
  9909  0021D6  C01C  F022         	movff	memcpy@s1+1,memcpy@s+1
  9910  0021DA  C019  F01F         	movff	memcpy@d1,memcpy@d
  9911  0021DE  C01A  F020         	movff	memcpy@d1+1,memcpy@d+1
  9912  0021E2  D00E               	goto	l4316
  9913  0021E4                     l4310:
  9914  0021E4  C021  FFD9         	movff	memcpy@s,fsr2l
  9915  0021E8  C022  FFDA         	movff	memcpy@s+1,fsr2h
  9916  0021EC  C01F  FFE1         	movff	memcpy@d,fsr1l
  9917  0021F0  C020  FFE2         	movff	memcpy@d+1,fsr1h
  9918  0021F4  CFDF FFE7          	movff	indf2,indf1
  9919  0021F8  4A21               	infsnz	memcpy@s,f,c
  9920  0021FA  2A22               	incf	memcpy@s+1,f,c
  9921  0021FC  4A1F               	infsnz	memcpy@d,f,c
  9922  0021FE  2A20               	incf	memcpy@d+1,f,c
  9923  002200                     l4316:
  9924  002200  061D               	decf	memcpy@n,f,c
  9925  002202  A0D8               	btfss	status,0,c
  9926  002204  061E               	decf	memcpy@n+1,f,c
  9927  002206  281D               	incf	memcpy@n,w,c
  9928  002208  E1ED               	bnz	l4310
  9929  00220A  281E               	incf	memcpy@n+1,w,c
  9930  00220C  B4D8               	btfsc	status,2,c
  9931  00220E  0012               	return	
  9932  002210  D7E9               	goto	l4310
  9933  002212                     __end_of_memcpy:
  9934                           	opt stack 0
  9935                           tblptru	equ	0xFF8
  9936                           tblptrh	equ	0xFF7
  9937                           tblptrl	equ	0xFF6
  9938                           tablat	equ	0xFF5
  9939                           prodl	equ	0xFF3
  9940                           intcon	equ	0xFF2
  9941                           postinc0	equ	0xFEE
  9942                           wreg	equ	0xFE8
  9943                           indf1	equ	0xFE7
  9944                           postdec1	equ	0xFE5
  9945                           fsr1h	equ	0xFE2
  9946                           fsr1l	equ	0xFE1
  9947                           indf2	equ	0xFDF
  9948                           postinc2	equ	0xFDE
  9949                           postdec2	equ	0xFDD
  9950                           fsr2h	equ	0xFDA
  9951                           fsr2l	equ	0xFD9
  9952                           status	equ	0xFD8
  9953                           
  9954 ;; *************** function _Interr *****************
  9955 ;; Defined at:
  9956 ;;		line 378 in file "ModIO24.c"
  9957 ;; Parameters:    Size  Location     Type
  9958 ;;		None
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;		None
  9961 ;; Return value:  Size  Location     Type
  9962 ;;                  1    wreg      void 
  9963 ;; Registers used:
  9964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9970 ;;      Params:         0       0       0       0       0       0       0       0       0
  9971 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9972 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9973 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9974 ;;Total ram usage:       14 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    4
  9977 ;; This function calls:
  9978 ;;		_MstInterr
  9979 ;;		_Ppal_Interr
  9980 ;; This function is called by:
  9981 ;;		Interrupt level 2
  9982 ;; This function uses a non-reentrant model
  9983 ;;
  9984                           
  9985                           	psect	intcode
  9986  000008                     __pintcode:
  9987                           	opt stack 0
  9988  000008                     _Interr:
  9989                           	opt stack 17
  9990                           
  9991                           ;incstack = 0
  9992  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9993  00000A  CFFA F00B          	movff	pclath,??_Interr
  9994  00000E  CFFB F00C          	movff	pclatu,??_Interr+1
  9995  000012  CFE9 F00D          	movff	fsr0l,??_Interr+2
  9996  000016  CFEA F00E          	movff	fsr0h,??_Interr+3
  9997  00001A  CFE1 F00F          	movff	fsr1l,??_Interr+4
  9998  00001E  CFE2 F010          	movff	fsr1h,??_Interr+5
  9999  000022  CFD9 F011          	movff	fsr2l,??_Interr+6
 10000  000026  CFDA F012          	movff	fsr2h,??_Interr+7
 10001  00002A  CFF3 F013          	movff	prodl,??_Interr+8
 10002  00002E  CFF4 F014          	movff	prodh,??_Interr+9
 10003  000032  CFF6 F015          	movff	tblptrl,??_Interr+10
 10004  000036  CFF7 F016          	movff	tblptrh,??_Interr+11
 10005  00003A  CFF8 F017          	movff	tblptru,??_Interr+12
 10006  00003E  CFF5 F018          	movff	tablat,??_Interr+13
 10007                           
 10008                           ;ModIO24.c: 379: TMR2IF = 0;
 10009  000042  929E               	bcf	3998,1,c	;volatile
 10010                           
 10011                           ;ModIO24.c: 381: MstInterr();
 10012  000044  EC6B  F013         	call	_MstInterr	;wreg free
 10013                           
 10014                           ;ModIO24.c: 382: if (MstPpEjecutaF == 1) {
 10015  000048  0100               	movlb	0	; () banked
 10016  00004A  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
 10017  00004C  A4D8               	btfss	status,2,c
 10018  00004E  D004               	goto	i2l613
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;ModIO24.c: 383: if (MstPpInicializadoF == 1) {
 10022  000050  042F               	decf	_MstPpInicializadoF,w,c
 10023  000052  B4D8               	btfsc	status,2,c
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;ModIO24.c: 384: Ppal_Interr();
 10027  000054  EC52  F013         	call	_Ppal_Interr	;wreg free
 10028  000058                     i2l613:
 10029  000058  C018  FFF5         	movff	??_Interr+13,tablat
 10030  00005C  C017  FFF8         	movff	??_Interr+12,tblptru
 10031  000060  C016  FFF7         	movff	??_Interr+11,tblptrh
 10032  000064  C015  FFF6         	movff	??_Interr+10,tblptrl
 10033  000068  C014  FFF4         	movff	??_Interr+9,prodh
 10034  00006C  C013  FFF3         	movff	??_Interr+8,prodl
 10035  000070  C012  FFDA         	movff	??_Interr+7,fsr2h
 10036  000074  C011  FFD9         	movff	??_Interr+6,fsr2l
 10037  000078  C010  FFE2         	movff	??_Interr+5,fsr1h
 10038  00007C  C00F  FFE1         	movff	??_Interr+4,fsr1l
 10039  000080  C00E  FFEA         	movff	??_Interr+3,fsr0h
 10040  000084  C00D  FFE9         	movff	??_Interr+2,fsr0l
 10041  000088  C00C  FFFB         	movff	??_Interr+1,pclatu
 10042  00008C  C00B  FFFA         	movff	??_Interr,pclath
 10043  000090  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10044  000092  0011               	retfie		f
 10045  000094                     __end_of_Interr:
 10046                           	opt stack 0
 10047                           pclatu	equ	0xFFB
 10048                           pclath	equ	0xFFA
 10049                           tblptru	equ	0xFF8
 10050                           tblptrh	equ	0xFF7
 10051                           tblptrl	equ	0xFF6
 10052                           tablat	equ	0xFF5
 10053                           prodh	equ	0xFF4
 10054                           prodl	equ	0xFF3
 10055                           intcon	equ	0xFF2
 10056                           postinc0	equ	0xFEE
 10057                           fsr0h	equ	0xFEA
 10058                           fsr0l	equ	0xFE9
 10059                           wreg	equ	0xFE8
 10060                           indf1	equ	0xFE7
 10061                           postdec1	equ	0xFE5
 10062                           fsr1h	equ	0xFE2
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function _Ppal_Interr *****************
 10072 ;; Defined at:
 10073 ;;		line 133 in file "ModIO24.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;		None
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;		None
 10078 ;; Return value:  Size  Location     Type
 10079 ;;                  1    wreg      void 
 10080 ;; Registers used:
 10081 ;;		wreg, status,2, status,0, cstack
 10082 ;; Tracked objects:
 10083 ;;		On entry : 0/0
 10084 ;;		On exit  : 0/0
 10085 ;;		Unchanged: 0/0
 10086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10087 ;;      Params:         0       0       0       0       0       0       0       0       0
 10088 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10089 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10090 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10091 ;;Total ram usage:        0 bytes
 10092 ;; Hardware stack levels used:    1
 10093 ;; Hardware stack levels required when called:    2
 10094 ;; This function calls:
 10095 ;;		_LedAmarilloInterr
 10096 ;;		_MioInterr
 10097 ;;		_Tpo_interr
 10098 ;; This function is called by:
 10099 ;;		_Interr
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           	psect	text63
 10104  0026A4                     __ptext63:
 10105                           	opt stack 0
 10106  0026A4                     _Ppal_Interr:
 10107                           	opt stack 18
 10108                           
 10109                           ;ModIO24.c: 139: MioInterr();
 10110                           
 10111                           ;incstack = 0
 10112  0026A4  EC33  F010         	call	_MioInterr	;wreg free
 10113                           
 10114                           ;ModIO24.c: 143: Tpo_interr();
 10115  0026A8  EC36  F012         	call	_Tpo_interr	;wreg free
 10116                           
 10117                           ;ModIO24.c: 145: LedAmarilloInterr();
 10118  0026AC  EC09  F011         	call	_LedAmarilloInterr	;wreg free
 10119  0026B0  0012               	return		;funcret
 10120  0026B2                     __end_of_Ppal_Interr:
 10121                           	opt stack 0
 10122                           pclatu	equ	0xFFB
 10123                           pclath	equ	0xFFA
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           postinc0	equ	0xFEE
 10132                           fsr0h	equ	0xFEA
 10133                           fsr0l	equ	0xFE9
 10134                           wreg	equ	0xFE8
 10135                           indf1	equ	0xFE7
 10136                           postdec1	equ	0xFE5
 10137                           fsr1h	equ	0xFE2
 10138                           fsr1l	equ	0xFE1
 10139                           indf2	equ	0xFDF
 10140                           postinc2	equ	0xFDE
 10141                           postdec2	equ	0xFDD
 10142                           fsr2h	equ	0xFDA
 10143                           fsr2l	equ	0xFD9
 10144                           status	equ	0xFD8
 10145                           
 10146 ;; *************** function _Tpo_interr *****************
 10147 ;; Defined at:
 10148 ;;		line 30 in file "RutinaTpo20.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;		None
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;		None
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		wreg, status,2, status,0
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0
 10163 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10164 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10165 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10166 ;;Total ram usage:        0 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_Ppal_Interr
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           	psect	text64
 10176  00246C                     __ptext64:
 10177                           	opt stack 0
 10178  00246C                     _Tpo_interr:
 10179                           	opt stack 19
 10180                           
 10181                           ;RutinaTpo20.c: 32: TpoMsCont++;
 10182                           
 10183                           ;incstack = 0
 10184  00246C  0100               	movlb	0	; () banked
 10185  00246E  4BC4               	infsnz	_TpoMsCont& (0+255),f,b
 10186  002470  2BC5               	incf	(_TpoMsCont+1)& (0+255),f,b
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;RutinaTpo20.c: 34: if (TpoMsCont >= 50) {
 10190  002472  0100               	movlb	0	; () banked
 10191  002474  51C5               	movf	(_TpoMsCont+1)& (0+255),w,b
 10192  002476  E105               	bnz	i2u256_40
 10193  002478  0E32               	movlw	50
 10194  00247A  0100               	movlb	0	; () banked
 10195  00247C  5DC4               	subwf	_TpoMsCont& (0+255),w,b
 10196  00247E  A0D8               	btfss	status,0,c
 10197  002480  0012               	return	
 10198  002482                     i2u256_40:
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;RutinaTpo20.c: 35: TpoMsCont = 0;
 10202  002482  0E00               	movlw	0
 10203  002484  0100               	movlb	0	; () banked
 10204  002486  6FC5               	movwf	(_TpoMsCont+1)& (0+255),b
 10205  002488  0E00               	movlw	0
 10206  00248A  6FC4               	movwf	_TpoMsCont& (0+255),b
 10207                           
 10208                           ;RutinaTpo20.c: 36: Tpo50msF = 1;
 10209  00248C  0E00               	movlw	0
 10210  00248E  0100               	movlb	0	; () banked
 10211  002490  6FBD               	movwf	(_Tpo50msF+1)& (0+255),b
 10212  002492  0E01               	movlw	1
 10213  002494  6FBC               	movwf	_Tpo50msF& (0+255),b
 10214  002496  0012               	return	
 10215  002498                     __end_of_Tpo_interr:
 10216                           	opt stack 0
 10217                           pclatu	equ	0xFFB
 10218                           pclath	equ	0xFFA
 10219                           tblptru	equ	0xFF8
 10220                           tblptrh	equ	0xFF7
 10221                           tblptrl	equ	0xFF6
 10222                           tablat	equ	0xFF5
 10223                           prodh	equ	0xFF4
 10224                           prodl	equ	0xFF3
 10225                           intcon	equ	0xFF2
 10226                           postinc0	equ	0xFEE
 10227                           fsr0h	equ	0xFEA
 10228                           fsr0l	equ	0xFE9
 10229                           wreg	equ	0xFE8
 10230                           indf1	equ	0xFE7
 10231                           postdec1	equ	0xFE5
 10232                           fsr1h	equ	0xFE2
 10233                           fsr1l	equ	0xFE1
 10234                           indf2	equ	0xFDF
 10235                           postinc2	equ	0xFDE
 10236                           postdec2	equ	0xFDD
 10237                           fsr2h	equ	0xFDA
 10238                           fsr2l	equ	0xFD9
 10239                           status	equ	0xFD8
 10240                           
 10241 ;; *************** function _MioInterr *****************
 10242 ;; Defined at:
 10243 ;;		line 84 in file "RutinaModIO15.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;		None
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;		None
 10248 ;; Return value:  Size  Location     Type
 10249 ;;                  1    wreg      void 
 10250 ;; Registers used:
 10251 ;;		wreg, status,2, status,0, cstack
 10252 ;; Tracked objects:
 10253 ;;		On entry : 0/0
 10254 ;;		On exit  : 0/0
 10255 ;;		Unchanged: 0/0
 10256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10257 ;;      Params:         0       0       0       0       0       0       0       0       0
 10258 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10259 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10260 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10261 ;;Total ram usage:        0 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    1
 10264 ;; This function calls:
 10265 ;;		_ADC_Lee
 10266 ;; This function is called by:
 10267 ;;		_Ppal_Interr
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           	psect	text65
 10272  002066                     __ptext65:
 10273                           	opt stack 0
 10274  002066                     _MioInterr:
 10275                           	opt stack 18
 10276                           
 10277                           ;RutinaModIO15.c: 90: MIOAdcLeido[0] = ADC_Lee(0);
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;incstack = 0
 10281  002066  0E00               	movlw	0
 10282  002068  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10283  00206A  0E00               	movlw	0
 10284  00206C  6E01               	movwf	ADC_Lee@AdcCanal,c
 10285  00206E  EC5C  F010         	call	_ADC_Lee	;wreg free
 10286  002072  C001  F0DE         	movff	?_ADC_Lee,_MIOAdcLeido
 10287  002076  C002  F0DF         	movff	?_ADC_Lee+1,_MIOAdcLeido+1
 10288                           
 10289                           ;RutinaModIO15.c: 91: MIOAdcLeido[1] = ADC_Lee(1);
 10290  00207A  0E00               	movlw	0
 10291  00207C  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10292  00207E  0E01               	movlw	1
 10293  002080  6E01               	movwf	ADC_Lee@AdcCanal,c
 10294  002082  EC5C  F010         	call	_ADC_Lee	;wreg free
 10295  002086  C001  F0E0         	movff	?_ADC_Lee,_MIOAdcLeido+2
 10296  00208A  C002  F0E1         	movff	?_ADC_Lee+1,_MIOAdcLeido+3
 10297                           
 10298                           ;RutinaModIO15.c: 92: MIOAdcLeido[2] = ADC_Lee(2);
 10299  00208E  0E00               	movlw	0
 10300  002090  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10301  002092  0E02               	movlw	2
 10302  002094  6E01               	movwf	ADC_Lee@AdcCanal,c
 10303  002096  EC5C  F010         	call	_ADC_Lee	;wreg free
 10304  00209A  C001  F0E2         	movff	?_ADC_Lee,_MIOAdcLeido+4
 10305  00209E  C002  F0E3         	movff	?_ADC_Lee+1,_MIOAdcLeido+5
 10306                           
 10307                           ;RutinaModIO15.c: 94: MIOAdcLeido[3] = ADC_Lee(4);
 10308  0020A2  0E00               	movlw	0
 10309  0020A4  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10310  0020A6  0E04               	movlw	4
 10311  0020A8  6E01               	movwf	ADC_Lee@AdcCanal,c
 10312  0020AA  EC5C  F010         	call	_ADC_Lee	;wreg free
 10313  0020AE  C001  F0E4         	movff	?_ADC_Lee,_MIOAdcLeido+6
 10314  0020B2  C002  F0E5         	movff	?_ADC_Lee+1,_MIOAdcLeido+7
 10315  0020B6  0012               	return		;funcret
 10316  0020B8                     __end_of_MioInterr:
 10317                           	opt stack 0
 10318                           pclatu	equ	0xFFB
 10319                           pclath	equ	0xFFA
 10320                           tblptru	equ	0xFF8
 10321                           tblptrh	equ	0xFF7
 10322                           tblptrl	equ	0xFF6
 10323                           tablat	equ	0xFF5
 10324                           prodh	equ	0xFF4
 10325                           prodl	equ	0xFF3
 10326                           intcon	equ	0xFF2
 10327                           postinc0	equ	0xFEE
 10328                           fsr0h	equ	0xFEA
 10329                           fsr0l	equ	0xFE9
 10330                           wreg	equ	0xFE8
 10331                           indf1	equ	0xFE7
 10332                           postdec1	equ	0xFE5
 10333                           fsr1h	equ	0xFE2
 10334                           fsr1l	equ	0xFE1
 10335                           indf2	equ	0xFDF
 10336                           postinc2	equ	0xFDE
 10337                           postdec2	equ	0xFDD
 10338                           fsr2h	equ	0xFDA
 10339                           fsr2l	equ	0xFD9
 10340                           status	equ	0xFD8
 10341                           
 10342 ;; *************** function _ADC_Lee *****************
 10343 ;; Defined at:
 10344 ;;		line 19 in file "ADC30.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  AdcCanal        2    0[COMRAM] short 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  ind             2    4[COMRAM] short 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  2    0[COMRAM] int 
 10351 ;; Registers used:
 10352 ;;		wreg, status,2, status,0
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10358 ;;      Params:         2       0       0       0       0       0       0       0       0
 10359 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10360 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10361 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10362 ;;Total ram usage:        6 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; This function calls:
 10365 ;;		Nothing
 10366 ;; This function is called by:
 10367 ;;		_MioInterr
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text66
 10372  0020B8                     __ptext66:
 10373                           	opt stack 0
 10374  0020B8                     _ADC_Lee:
 10375                           	opt stack 18
 10376                           
 10377                           ;ADC30.c: 20: short ind;
 10378                           ;ADC30.c: 22: ADCON0 = 1+(AdcCanal << 2);
 10379                           
 10380                           ;incstack = 0
 10381  0020B8  C001  F003         	movff	ADC_Lee@AdcCanal,??_ADC_Lee
 10382  0020BC  90D8               	bcf	status,0,c
 10383  0020BE  3603               	rlcf	??_ADC_Lee,f,c
 10384  0020C0  90D8               	bcf	status,0,c
 10385  0020C2  3603               	rlcf	??_ADC_Lee,f,c
 10386  0020C4  2803               	incf	??_ADC_Lee,w,c
 10387  0020C6  6EC2               	movwf	4034,c	;volatile
 10388                           
 10389                           ;ADC30.c: 23: _delay((unsigned long)((3)*(8000000/4000000.0)));
 10390  0020C8  D000               	nop2		;2 cycle nop
 10391  0020CA  D000               	nop2		;2 cycle nop
 10392  0020CC  D000               	nop2		;2 cycle nop
 10393                           
 10394                           ;ADC30.c: 24: GO = 1;
 10395  0020CE  82C2               	bsf	4034,1,c	;volatile
 10396                           
 10397                           ;ADC30.c: 25: for (ind = 0; ind <= 60; ind++) {
 10398  0020D0  0E00               	movlw	0
 10399  0020D2  6E06               	movwf	ADC_Lee@ind+1,c
 10400  0020D4  0E00               	movlw	0
 10401  0020D6  6E05               	movwf	ADC_Lee@ind,c
 10402  0020D8                     i2l3858:
 10403  0020D8  BE06               	btfsc	ADC_Lee@ind+1,7,c
 10404  0020DA  D006               	goto	i2l515
 10405  0020DC  5006               	movf	ADC_Lee@ind+1,w,c
 10406  0020DE  E109               	bnz	i2l3868
 10407  0020E0  0E3D               	movlw	61
 10408  0020E2  5C05               	subwf	ADC_Lee@ind,w,c
 10409  0020E4  B0D8               	btfsc	status,0,c
 10410  0020E6  D005               	goto	i2l3868
 10411  0020E8                     i2l515:
 10412                           
 10413                           ;ADC30.c: 26: if (GO == 0) {break;}
 10414  0020E8  A2C2               	btfss	4034,1,c	;volatile
 10415  0020EA  D003               	goto	i2l3868
 10416  0020EC  4A05               	infsnz	ADC_Lee@ind,f,c
 10417  0020EE  2A06               	incf	ADC_Lee@ind+1,f,c
 10418  0020F0  D7F3               	goto	i2l3858
 10419  0020F2                     i2l3868:
 10420                           
 10421                           ;ADC30.c: 27: }
 10422                           ;ADC30.c: 28: return ( (ADRESH * 256) + ADRESL );
 10423  0020F2  50C4               	movf	4036,w,c	;volatile
 10424  0020F4  6E04               	movwf	(??_ADC_Lee+1)& (0+255),c
 10425  0020F6  6A03               	clrf	??_ADC_Lee& (0+255),c
 10426  0020F8  50C3               	movf	4035,w,c	;volatile
 10427  0020FA  2403               	addwf	??_ADC_Lee,w,c
 10428  0020FC  6E01               	movwf	?_ADC_Lee,c
 10429  0020FE  0E00               	movlw	0
 10430  002100  2004               	addwfc	??_ADC_Lee+1,w,c
 10431  002102  6E02               	movwf	?_ADC_Lee+1,c
 10432  002104  0012               	return	
 10433  002106                     __end_of_ADC_Lee:
 10434                           	opt stack 0
 10435                           pclatu	equ	0xFFB
 10436                           pclath	equ	0xFFA
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           intcon	equ	0xFF2
 10444                           postinc0	equ	0xFEE
 10445                           fsr0h	equ	0xFEA
 10446                           fsr0l	equ	0xFE9
 10447                           wreg	equ	0xFE8
 10448                           indf1	equ	0xFE7
 10449                           postdec1	equ	0xFE5
 10450                           fsr1h	equ	0xFE2
 10451                           fsr1l	equ	0xFE1
 10452                           indf2	equ	0xFDF
 10453                           postinc2	equ	0xFDE
 10454                           postdec2	equ	0xFDD
 10455                           fsr2h	equ	0xFDA
 10456                           fsr2l	equ	0xFD9
 10457                           status	equ	0xFD8
 10458                           
 10459 ;; *************** function _MstInterr *****************
 10460 ;; Defined at:
 10461 ;;		line 18 in file "Maestro21.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10477 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10478 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10479 ;;Total ram usage:        0 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    3
 10482 ;; This function calls:
 10483 ;;		_IntDelay_ms
 10484 ;;		_IntLedParpadea
 10485 ;;		_LedAmarilloInterr
 10486 ;;		_RsInterr
 10487 ;; This function is called by:
 10488 ;;		_Interr
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           	psect	text67
 10493  0026D6                     __ptext67:
 10494                           	opt stack 0
 10495  0026D6                     _MstInterr:
 10496                           	opt stack 17
 10497                           
 10498                           ;Maestro21.c: 19: RsInterr ();
 10499                           
 10500                           ;incstack = 0
 10501  0026D6  EC5E  F013         	call	_RsInterr	;wreg free
 10502                           
 10503                           ;Maestro21.c: 21: if (0) {
 10504  0026DA  0012               	return	
 10505  0026DC                     __end_of_MstInterr:
 10506                           	opt stack 0
 10507                           pclatu	equ	0xFFB
 10508                           pclath	equ	0xFFA
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           intcon	equ	0xFF2
 10516                           postinc0	equ	0xFEE
 10517                           fsr0h	equ	0xFEA
 10518                           fsr0l	equ	0xFE9
 10519                           wreg	equ	0xFE8
 10520                           indf1	equ	0xFE7
 10521                           postdec1	equ	0xFE5
 10522                           fsr1h	equ	0xFE2
 10523                           fsr1l	equ	0xFE1
 10524                           indf2	equ	0xFDF
 10525                           postinc2	equ	0xFDE
 10526                           postdec2	equ	0xFDD
 10527                           fsr2h	equ	0xFDA
 10528                           fsr2l	equ	0xFD9
 10529                           status	equ	0xFD8
 10530                           
 10531 ;; *************** function _RsInterr *****************
 10532 ;; Defined at:
 10533 ;;		line 156 in file "RedSerie13.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1    wreg      void 
 10540 ;; Registers used:
 10541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10550 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10551 ;;Total ram usage:        0 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    2
 10554 ;; This function calls:
 10555 ;;		_PsRxInterrupt
 10556 ;;		_PsTxInterrupt
 10557 ;; This function is called by:
 10558 ;;		_MstInterr
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           	psect	text68
 10563  0026BC                     __ptext68:
 10564                           	opt stack 0
 10565  0026BC                     _RsInterr:
 10566                           	opt stack 17
 10567                           
 10568                           ;RedSerie13.c: 157: PsRxInterrupt ();
 10569                           
 10570                           ;incstack = 0
 10571  0026BC  EC4A  F009         	call	_PsRxInterrupt	;wreg free
 10572                           
 10573                           ;RedSerie13.c: 158: PsTxInterrupt ();
 10574  0026C0  EC8D  F00C         	call	_PsTxInterrupt	;wreg free
 10575  0026C4  0012               	return		;funcret
 10576  0026C6                     __end_of_RsInterr:
 10577                           	opt stack 0
 10578                           pclatu	equ	0xFFB
 10579                           pclath	equ	0xFFA
 10580                           tblptru	equ	0xFF8
 10581                           tblptrh	equ	0xFF7
 10582                           tblptrl	equ	0xFF6
 10583                           tablat	equ	0xFF5
 10584                           prodh	equ	0xFF4
 10585                           prodl	equ	0xFF3
 10586                           intcon	equ	0xFF2
 10587                           postinc0	equ	0xFEE
 10588                           fsr0h	equ	0xFEA
 10589                           fsr0l	equ	0xFE9
 10590                           wreg	equ	0xFE8
 10591                           indf1	equ	0xFE7
 10592                           postdec1	equ	0xFE5
 10593                           fsr1h	equ	0xFE2
 10594                           fsr1l	equ	0xFE1
 10595                           indf2	equ	0xFDF
 10596                           postinc2	equ	0xFDE
 10597                           postdec2	equ	0xFDD
 10598                           fsr2h	equ	0xFDA
 10599                           fsr2l	equ	0xFD9
 10600                           status	equ	0xFD8
 10601                           
 10602 ;; *************** function _PsTxInterrupt *****************
 10603 ;; Defined at:
 10604 ;;		line 131 in file "RedSerie13.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;		None
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;		None
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  1    wreg      void 
 10611 ;; Registers used:
 10612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : 0/0
 10615 ;;		On exit  : 0/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10618 ;;      Params:         0       0       0       0       0       0       0       0       0
 10619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10620 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10621 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10622 ;;Total ram usage:        1 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    1
 10625 ;; This function calls:
 10626 ;;		_PsTxEnviaCar
 10627 ;; This function is called by:
 10628 ;;		_RsInterr
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           	psect	text69
 10633  00191A                     __ptext69:
 10634                           	opt stack 0
 10635  00191A                     _PsTxInterrupt:
 10636                           	opt stack 17
 10637                           
 10638                           ;RedSerie13.c: 132: if ( (!RsTxTransmitiendoF) || (!TXIF) ) {return;}
 10639                           
 10640                           ;incstack = 0
 10641  00191A  0100               	movlb	0	; () banked
 10642  00191C  51B8               	movf	_RsTxTransmitiendoF& (0+255),w,b
 10643  00191E  0100               	movlb	0	; () banked
 10644  001920  11B9               	iorwf	(_RsTxTransmitiendoF+1)& (0+255),w,b
 10645  001922  B4D8               	btfsc	status,2,c
 10646  001924  0012               	return	
 10647                           
 10648                           ; BSR set to: 0
 10649  001926  A89E               	btfss	3998,4,c	;volatile
 10650  001928  0012               	return	
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;RedSerie13.c: 135: if (RsTxIndex < 0) {PsTxEnviaCar(254); RsTxIndex ++;}
 10654                           
 10655                           ; BSR set to: 0
 10656                           
 10657                           ; BSR set to: 0
 10658  00192A  0100               	movlb	0	; () banked
 10659  00192C  AFB5               	btfss	(_RsTxIndex+1)& (0+255),7,b
 10660  00192E  D007               	goto	i2l3700
 10661                           
 10662                           ; BSR set to: 0
 10663  001930  0EFE               	movlw	254
 10664  001932  EC67  F013         	call	_PsTxEnviaCar
 10665  001936  0100               	movlb	0	; () banked
 10666  001938  4BB4               	infsnz	_RsTxIndex& (0+255),f,b
 10667  00193A  2BB5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10668  00193C  0012               	return	
 10669  00193E                     i2l3700:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;RedSerie13.c: 136: else if (RsTxIndex <= RsTxBufferLen) {
 10673  00193E  0100               	movlb	0	; () banked
 10674  001940  51B4               	movf	_RsTxIndex& (0+255),w,b
 10675  001942  0100               	movlb	0	; () banked
 10676  001944  5DB0               	subwf	_RsTxBufferLen& (0+255),w,b
 10677  001946  0100               	movlb	0	; () banked
 10678  001948  51B1               	movf	(_RsTxBufferLen+1)& (0+255),w,b
 10679  00194A  0A80               	xorlw	128
 10680  00194C  6E02               	movwf	??_PsTxInterrupt& (0+255),c
 10681  00194E  0100               	movlb	0	; () banked
 10682  001950  51B5               	movf	(_RsTxIndex+1)& (0+255),w,b
 10683  001952  0A80               	xorlw	128
 10684  001954  5802               	subwfb	??_PsTxInterrupt& (0+255),w,c
 10685  001956  A0D8               	btfss	status,0,c
 10686  001958  D030               	goto	i2l3722
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;RedSerie13.c: 137: RsTxCar = RsTxBuffer[RsTxIndex];
 10690  00195A  0E4E               	movlw	low _RsTxBuffer
 10691  00195C  0100               	movlb	0	; () banked
 10692  00195E  25B4               	addwf	_RsTxIndex& (0+255),w,b
 10693  001960  6ED9               	movwf	fsr2l,c
 10694  001962  0E01               	movlw	high _RsTxBuffer
 10695  001964  0100               	movlb	0	; () banked
 10696  001966  21B5               	addwfc	(_RsTxIndex+1)& (0+255),w,b
 10697  001968  6EDA               	movwf	fsr2h,c
 10698  00196A  50DF               	movf	indf2,w,c
 10699  00196C  6E32               	movwf	_RsTxCar,c
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;RedSerie13.c: 138: if (RsTxCar >= 250) {
 10703  00196E  0EF9               	movlw	249
 10704  001970  6432               	cpfsgt	_RsTxCar,c
 10705  001972  D01C               	goto	i2l3718
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;RedSerie13.c: 139: if (!RsTxCarDobleF) {
 10709  001974  0100               	movlb	0	; () banked
 10710  001976  51B2               	movf	_RsTxCarDobleF& (0+255),w,b
 10711  001978  0100               	movlb	0	; () banked
 10712  00197A  11B3               	iorwf	(_RsTxCarDobleF+1)& (0+255),w,b
 10713  00197C  A4D8               	btfss	status,2,c
 10714  00197E  D009               	goto	i2l3712
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;RedSerie13.c: 140: PsTxEnviaCar (250);
 10718  001980  0EFA               	movlw	250
 10719  001982  EC67  F013         	call	_PsTxEnviaCar
 10720                           
 10721                           ;RedSerie13.c: 141: RsTxCarDobleF = 1;
 10722  001986  0E00               	movlw	0
 10723  001988  0100               	movlb	0	; () banked
 10724  00198A  6FB3               	movwf	(_RsTxCarDobleF+1)& (0+255),b
 10725  00198C  0E01               	movlw	1
 10726  00198E  6FB2               	movwf	_RsTxCarDobleF& (0+255),b
 10727                           
 10728                           ;RedSerie13.c: 142: }
 10729  001990  0012               	return	
 10730  001992                     i2l3712:
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;RedSerie13.c: 143: else{
 10734                           ;RedSerie13.c: 144: PsTxEnviaCar(RsTxCar - 250);
 10735  001992  5032               	movf	_RsTxCar,w,c
 10736  001994  0F06               	addlw	6
 10737  001996  EC67  F013         	call	_PsTxEnviaCar
 10738                           
 10739                           ;RedSerie13.c: 145: RsTxCarDobleF = 0;
 10740  00199A  0E00               	movlw	0
 10741  00199C  0100               	movlb	0	; () banked
 10742  00199E  6FB3               	movwf	(_RsTxCarDobleF+1)& (0+255),b
 10743  0019A0  0E00               	movlw	0
 10744  0019A2  6FB2               	movwf	_RsTxCarDobleF& (0+255),b
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;RedSerie13.c: 146: RsTxIndex++;
 10748  0019A4  0100               	movlb	0	; () banked
 10749  0019A6  4BB4               	infsnz	_RsTxIndex& (0+255),f,b
 10750  0019A8  2BB5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;RedSerie13.c: 147: }
 10754                           ;RedSerie13.c: 148: }
 10755  0019AA  0012               	return	
 10756  0019AC                     i2l3718:
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;RedSerie13.c: 149: else {PsTxEnviaCar(RsTxCar); RsTxIndex ++;}
 10760  0019AC  5032               	movf	_RsTxCar,w,c
 10761  0019AE  EC67  F013         	call	_PsTxEnviaCar
 10762  0019B2  0100               	movlb	0	; () banked
 10763  0019B4  4BB4               	infsnz	_RsTxIndex& (0+255),f,b
 10764  0019B6  2BB5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;RedSerie13.c: 150: }
 10768  0019B8  0012               	return	
 10769  0019BA                     i2l3722:
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;RedSerie13.c: 151: else {
 10773                           ;RedSerie13.c: 152: PsTxEnviaCar (255);
 10774  0019BA  0EFF               	movlw	255
 10775  0019BC  EC67  F013         	call	_PsTxEnviaCar
 10776                           
 10777                           ;RedSerie13.c: 153: RsTxTransmitiendoF = 0;
 10778  0019C0  0E00               	movlw	0
 10779  0019C2  0100               	movlb	0	; () banked
 10780  0019C4  6FB9               	movwf	(_RsTxTransmitiendoF+1)& (0+255),b
 10781  0019C6  0E00               	movlw	0
 10782  0019C8  6FB8               	movwf	_RsTxTransmitiendoF& (0+255),b
 10783                           
 10784                           ; BSR set to: 0
 10785  0019CA  0012               	return	
 10786  0019CC                     __end_of_PsTxInterrupt:
 10787                           	opt stack 0
 10788                           pclatu	equ	0xFFB
 10789                           pclath	equ	0xFFA
 10790                           tblptru	equ	0xFF8
 10791                           tblptrh	equ	0xFF7
 10792                           tblptrl	equ	0xFF6
 10793                           tablat	equ	0xFF5
 10794                           prodh	equ	0xFF4
 10795                           prodl	equ	0xFF3
 10796                           intcon	equ	0xFF2
 10797                           postinc0	equ	0xFEE
 10798                           fsr0h	equ	0xFEA
 10799                           fsr0l	equ	0xFE9
 10800                           wreg	equ	0xFE8
 10801                           indf1	equ	0xFE7
 10802                           postdec1	equ	0xFE5
 10803                           fsr1h	equ	0xFE2
 10804                           fsr1l	equ	0xFE1
 10805                           indf2	equ	0xFDF
 10806                           postinc2	equ	0xFDE
 10807                           postdec2	equ	0xFDD
 10808                           fsr2h	equ	0xFDA
 10809                           fsr2l	equ	0xFD9
 10810                           status	equ	0xFD8
 10811                           
 10812 ;; *************** function _PsTxEnviaCar *****************
 10813 ;; Defined at:
 10814 ;;		line 48 in file "RedSerie13.c"
 10815 ;; Parameters:    Size  Location     Type
 10816 ;;  car             1    wreg     unsigned char 
 10817 ;; Auto vars:     Size  Location     Type
 10818 ;;  car             1    0[COMRAM] unsigned char 
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  1    wreg      void 
 10821 ;; Registers used:
 10822 ;;		wreg
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10828 ;;      Params:         0       0       0       0       0       0       0       0       0
 10829 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10830 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10831 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10832 ;;Total ram usage:        1 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; This function calls:
 10835 ;;		Nothing
 10836 ;; This function is called by:
 10837 ;;		_PsTxInterrupt
 10838 ;; This function uses a non-reentrant model
 10839 ;;
 10840                           
 10841                           	psect	text70
 10842  0026CE                     __ptext70:
 10843                           	opt stack 0
 10844  0026CE                     _PsTxEnviaCar:
 10845                           	opt stack 17
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;incstack = 0
 10849                           ;PsTxEnviaCar@car stored from wreg
 10850  0026CE  6E01               	movwf	PsTxEnviaCar@car,c
 10851                           
 10852                           ;RedSerie13.c: 49: TXREG1 = car;
 10853  0026D0  C001  FFAD         	movff	PsTxEnviaCar@car,4013	;volatile
 10854  0026D4  0012               	return		;funcret
 10855  0026D6                     __end_of_PsTxEnviaCar:
 10856                           	opt stack 0
 10857                           pclatu	equ	0xFFB
 10858                           pclath	equ	0xFFA
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           postinc0	equ	0xFEE
 10867                           fsr0h	equ	0xFEA
 10868                           fsr0l	equ	0xFE9
 10869                           wreg	equ	0xFE8
 10870                           indf1	equ	0xFE7
 10871                           postdec1	equ	0xFE5
 10872                           fsr1h	equ	0xFE2
 10873                           fsr1l	equ	0xFE1
 10874                           indf2	equ	0xFDF
 10875                           postinc2	equ	0xFDE
 10876                           postdec2	equ	0xFDD
 10877                           fsr2h	equ	0xFDA
 10878                           fsr2l	equ	0xFD9
 10879                           status	equ	0xFD8
 10880                           
 10881 ;; *************** function _PsRxInterrupt *****************
 10882 ;; Defined at:
 10883 ;;		line 85 in file "RedSerie13.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;		None
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;		None
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10897 ;;      Params:         0       0       0       0       0       0       0       0       0
 10898 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10900 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10901 ;;Total ram usage:        0 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; Hardware stack levels required when called:    1
 10904 ;; This function calls:
 10905 ;;		_PsRxRecibeCar
 10906 ;; This function is called by:
 10907 ;;		_RsInterr
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text71
 10912  001294                     __ptext71:
 10913                           	opt stack 0
 10914  001294                     _PsRxInterrupt:
 10915                           	opt stack 17
 10916                           
 10917                           ;RedSerie13.c: 86: if (RCIF){
 10918                           
 10919                           ;incstack = 0
 10920  001294  AA9E               	btfss	3998,5,c	;volatile
 10921  001296  0012               	return	
 10922                           
 10923                           ;RedSerie13.c: 88: RsRxCar = PsRxRecibeCar();
 10924  001298  EC70  F013         	call	_PsRxRecibeCar	;wreg free
 10925  00129C  6E31               	movwf	_RsRxCar,c
 10926                           
 10927                           ;RedSerie13.c: 89: if (!RsRxRecibioMsgF) {
 10928  00129E  0100               	movlb	0	; () banked
 10929  0012A0  51AE               	movf	_RsRxRecibioMsgF& (0+255),w,b
 10930  0012A2  0100               	movlb	0	; () banked
 10931  0012A4  11AF               	iorwf	(_RsRxRecibioMsgF+1)& (0+255),w,b
 10932  0012A6  A4D8               	btfss	status,2,c
 10933  0012A8  0012               	return	
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;RedSerie13.c: 90: if (RsRxIndex == -1) {
 10937  0012AA  0100               	movlb	0	; () banked
 10938  0012AC  29AC               	incf	_RsRxIndex& (0+255),w,b
 10939  0012AE  E113               	bnz	i2l3660
 10940  0012B0  0100               	movlb	0	; () banked
 10941  0012B2  29AD               	incf	(_RsRxIndex+1)& (0+255),w,b
 10942  0012B4  A4D8               	btfss	status,2,c
 10943  0012B6  D00F               	goto	i2l3660
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;RedSerie13.c: 91: if (RsRxCar == 254) {
 10947  0012B8  0EFE               	movlw	254
 10948  0012BA  1831               	xorwf	_RsRxCar,w,c
 10949  0012BC  A4D8               	btfss	status,2,c
 10950  0012BE  0012               	return	
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;RedSerie13.c: 92: RsRxIndex = 0;
 10954  0012C0  0E00               	movlw	0
 10955  0012C2  0100               	movlb	0	; () banked
 10956  0012C4  6FAD               	movwf	(_RsRxIndex+1)& (0+255),b
 10957  0012C6  0E00               	movlw	0
 10958  0012C8  6FAC               	movwf	_RsRxIndex& (0+255),b
 10959                           
 10960                           ;RedSerie13.c: 93: RsRxCarDobleF = 0;
 10961  0012CA  0E00               	movlw	0
 10962  0012CC  0100               	movlb	0	; () banked
 10963  0012CE  6FAB               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 10964  0012D0  0E00               	movlw	0
 10965  0012D2  6FAA               	movwf	_RsRxCarDobleF& (0+255),b
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;RedSerie13.c: 94: }
 10969                           ;RedSerie13.c: 95: }
 10970  0012D4  0012               	return	
 10971  0012D6                     i2l3660:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;RedSerie13.c: 96: else if (RsRxCar != 255) {
 10975  0012D6  2831               	incf	_RsRxCar,w,c
 10976  0012D8  B4D8               	btfsc	status,2,c
 10977  0012DA  D043               	goto	i2l3684
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;RedSerie13.c: 97: if (RsRxCar == 254){
 10981  0012DC  0EFE               	movlw	254
 10982  0012DE  1831               	xorwf	_RsRxCar,w,c
 10983  0012E0  A4D8               	btfss	status,2,c
 10984  0012E2  D00B               	goto	i2l3666
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;RedSerie13.c: 98: RsRxIndex = 0;
 10988  0012E4  0E00               	movlw	0
 10989  0012E6  0100               	movlb	0	; () banked
 10990  0012E8  6FAD               	movwf	(_RsRxIndex+1)& (0+255),b
 10991  0012EA  0E00               	movlw	0
 10992  0012EC  6FAC               	movwf	_RsRxIndex& (0+255),b
 10993                           
 10994                           ;RedSerie13.c: 99: RsRxCarDobleF = 0;
 10995  0012EE  0E00               	movlw	0
 10996  0012F0  0100               	movlb	0	; () banked
 10997  0012F2  6FAB               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 10998  0012F4  0E00               	movlw	0
 10999  0012F6  6FAA               	movwf	_RsRxCarDobleF& (0+255),b
 11000                           
 11001                           ;RedSerie13.c: 100: }
 11002  0012F8  0012               	return	
 11003  0012FA                     i2l3666:
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;RedSerie13.c: 101: else {
 11007                           ;RedSerie13.c: 102: if (
 11008                           ;RedSerie13.c: 103: RsRxCar == 250) {RsRxCarDobleF = 1;}
 11009  0012FA  0EFA               	movlw	250
 11010  0012FC  1831               	xorwf	_RsRxCar,w,c
 11011  0012FE  A4D8               	btfss	status,2,c
 11012  001300  D006               	goto	i2l3670
 11013                           
 11014                           ; BSR set to: 0
 11015  001302  0E00               	movlw	0
 11016  001304  0100               	movlb	0	; () banked
 11017  001306  6FAB               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 11018  001308  0E01               	movlw	1
 11019  00130A  6FAA               	movwf	_RsRxCarDobleF& (0+255),b
 11020  00130C  0012               	return	
 11021  00130E                     i2l3670:
 11022                           
 11023                           ; BSR set to: 0
 11024                           ;RedSerie13.c: 104: else {
 11025                           ;RedSerie13.c: 105: if (RsRxCarDobleF) {RsRxCar += 250; RsRxCarDobleF=0;}
 11026  00130E  0100               	movlb	0	; () banked
 11027  001310  51AA               	movf	_RsRxCarDobleF& (0+255),w,b
 11028  001312  0100               	movlb	0	; () banked
 11029  001314  11AB               	iorwf	(_RsRxCarDobleF+1)& (0+255),w,b
 11030  001316  B4D8               	btfsc	status,2,c
 11031  001318  D007               	goto	i2l3676
 11032                           
 11033                           ; BSR set to: 0
 11034  00131A  0EFA               	movlw	250
 11035  00131C  2631               	addwf	_RsRxCar,f,c
 11036                           
 11037                           ; BSR set to: 0
 11038  00131E  0E00               	movlw	0
 11039  001320  0100               	movlb	0	; () banked
 11040  001322  6FAB               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 11041  001324  0E00               	movlw	0
 11042  001326  6FAA               	movwf	_RsRxCarDobleF& (0+255),b
 11043  001328                     i2l3676:
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;RedSerie13.c: 106: if (RsRxIndex >= 30){RsRxIndex = -1;}
 11047  001328  0100               	movlb	0	; () banked
 11048  00132A  BFAD               	btfsc	(_RsRxIndex+1)& (0+255),7,b
 11049  00132C  D00C               	goto	i2l3680
 11050  00132E  0100               	movlb	0	; () banked
 11051  001330  51AD               	movf	(_RsRxIndex+1)& (0+255),w,b
 11052  001332  E105               	bnz	i2u223_40
 11053  001334  0E1E               	movlw	30
 11054  001336  0100               	movlb	0	; () banked
 11055  001338  5DAC               	subwf	_RsRxIndex& (0+255),w,b
 11056  00133A  A0D8               	btfss	status,0,c
 11057  00133C  D004               	goto	i2l3680
 11058  00133E                     i2u223_40:
 11059                           
 11060                           ; BSR set to: 0
 11061  00133E  0100               	movlb	0	; () banked
 11062  001340  69AC               	setf	_RsRxIndex& (0+255),b
 11063  001342  69AD               	setf	(_RsRxIndex+1)& (0+255),b
 11064  001344  0012               	return	
 11065  001346                     i2l3680:
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;RedSerie13.c: 107: else {
 11069                           ;RedSerie13.c: 108: RsRxBuffer[RsRxIndex] = RsRxCar;
 11070  001346  0E30               	movlw	low _RsRxBuffer
 11071  001348  0100               	movlb	0	; () banked
 11072  00134A  25AC               	addwf	_RsRxIndex& (0+255),w,b
 11073  00134C  6ED9               	movwf	fsr2l,c
 11074  00134E  0E01               	movlw	high _RsRxBuffer
 11075  001350  0100               	movlb	0	; () banked
 11076  001352  21AD               	addwfc	(_RsRxIndex+1)& (0+255),w,b
 11077  001354  6EDA               	movwf	fsr2h,c
 11078  001356  C031  FFDF         	movff	_RsRxCar,indf2
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;RedSerie13.c: 109: RsRxIndex ++;
 11082  00135A  0100               	movlb	0	; () banked
 11083  00135C  4BAC               	infsnz	_RsRxIndex& (0+255),f,b
 11084  00135E  2BAD               	incf	(_RsRxIndex+1)& (0+255),f,b
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;RedSerie13.c: 110: }
 11088                           ;RedSerie13.c: 111: }
 11089                           ;RedSerie13.c: 112: }
 11090                           ;RedSerie13.c: 113: }
 11091                           
 11092                           ; BSR set to: 0
 11093                           
 11094                           ; BSR set to: 0
 11095  001360  0012               	return	
 11096  001362                     i2l3684:
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;RedSerie13.c: 114: else {
 11100                           ;RedSerie13.c: 119: if (RsRxBuffer[0] == 0x02) {
 11101  001362  0E02               	movlw	2
 11102  001364  0101               	movlb	1	; () banked
 11103  001366  1930               	xorwf	_RsRxBuffer& (0+255),w,b
 11104  001368  A4D8               	btfss	status,2,c
 11105  00136A  0012               	return	
 11106                           
 11107                           ; BSR set to: 1
 11108                           ;RedSerie13.c: 120: RsRxBufferLen = RsRxIndex -1;
 11109  00136C  0EFF               	movlw	255
 11110  00136E  0100               	movlb	0	; () banked
 11111  001370  25AC               	addwf	_RsRxIndex& (0+255),w,b
 11112  001372  0100               	movlb	0	; () banked
 11113  001374  6FA8               	movwf	_RsRxBufferLen& (0+255),b
 11114  001376  0EFF               	movlw	255
 11115  001378  0100               	movlb	0	; () banked
 11116  00137A  21AD               	addwfc	(_RsRxIndex+1)& (0+255),w,b
 11117  00137C  0100               	movlb	0	; () banked
 11118  00137E  6FA9               	movwf	(_RsRxBufferLen+1)& (0+255),b
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;RedSerie13.c: 121: RsRxRecibioMsgF =1;
 11122  001380  0E00               	movlw	0
 11123  001382  0100               	movlb	0	; () banked
 11124  001384  6FAF               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
 11125  001386  0E01               	movlw	1
 11126  001388  6FAE               	movwf	_RsRxRecibioMsgF& (0+255),b
 11127                           
 11128                           ; BSR set to: 0
 11129                           
 11130                           ; BSR set to: 0
 11131                           
 11132                           ; BSR set to: 0
 11133                           
 11134                           ; BSR set to: 0
 11135  00138A  0012               	return	
 11136  00138C                     __end_of_PsRxInterrupt:
 11137                           	opt stack 0
 11138                           pclatu	equ	0xFFB
 11139                           pclath	equ	0xFFA
 11140                           tblptru	equ	0xFF8
 11141                           tblptrh	equ	0xFF7
 11142                           tblptrl	equ	0xFF6
 11143                           tablat	equ	0xFF5
 11144                           prodh	equ	0xFF4
 11145                           prodl	equ	0xFF3
 11146                           intcon	equ	0xFF2
 11147                           postinc0	equ	0xFEE
 11148                           fsr0h	equ	0xFEA
 11149                           fsr0l	equ	0xFE9
 11150                           wreg	equ	0xFE8
 11151                           indf1	equ	0xFE7
 11152                           postdec1	equ	0xFE5
 11153                           fsr1h	equ	0xFE2
 11154                           fsr1l	equ	0xFE1
 11155                           indf2	equ	0xFDF
 11156                           postinc2	equ	0xFDE
 11157                           postdec2	equ	0xFDD
 11158                           fsr2h	equ	0xFDA
 11159                           fsr2l	equ	0xFD9
 11160                           status	equ	0xFD8
 11161                           
 11162 ;; *************** function _PsRxRecibeCar *****************
 11163 ;; Defined at:
 11164 ;;		line 45 in file "RedSerie13.c"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;		None
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  1    wreg      unsigned char 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11178 ;;      Params:         0       0       0       0       0       0       0       0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11180 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11181 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11182 ;;Total ram usage:        0 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; This function calls:
 11185 ;;		Nothing
 11186 ;; This function is called by:
 11187 ;;		_PsRxInterrupt
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text72
 11192  0026E0                     __ptext72:
 11193                           	opt stack 0
 11194  0026E0                     _PsRxRecibeCar:
 11195                           	opt stack 17
 11196                           
 11197                           ;RedSerie13.c: 46: return (RCREG1) ;
 11198                           
 11199                           ;incstack = 0
 11200  0026E0  50AE               	movf	4014,w,c	;volatile
 11201  0026E2  0012               	return	
 11202  0026E4                     __end_of_PsRxRecibeCar:
 11203                           	opt stack 0
 11204                           pclatu	equ	0xFFB
 11205                           pclath	equ	0xFFA
 11206                           tblptru	equ	0xFF8
 11207                           tblptrh	equ	0xFF7
 11208                           tblptrl	equ	0xFF6
 11209                           tablat	equ	0xFF5
 11210                           prodh	equ	0xFF4
 11211                           prodl	equ	0xFF3
 11212                           intcon	equ	0xFF2
 11213                           postinc0	equ	0xFEE
 11214                           fsr0h	equ	0xFEA
 11215                           fsr0l	equ	0xFE9
 11216                           wreg	equ	0xFE8
 11217                           indf1	equ	0xFE7
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           fsr2h	equ	0xFDA
 11225                           fsr2l	equ	0xFD9
 11226                           status	equ	0xFD8
 11227                           
 11228 ;; *************** function _LedAmarilloInterr *****************
 11229 ;; Defined at:
 11230 ;;		line 25 in file "PruebaLed20.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      void 
 11237 ;; Registers used:
 11238 ;;		wreg, status,2, status,0
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11244 ;;      Params:         0       0       0       0       0       0       0       0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_MstInterr
 11254 ;;		_Ppal_Interr
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text73
 11259  002212                     __ptext73:
 11260                           	opt stack 0
 11261  002212                     _LedAmarilloInterr:
 11262                           	opt stack 19
 11263                           
 11264                           ;PruebaLed20.c: 26: LedContMs -= 1;
 11265                           
 11266                           ;incstack = 0
 11267  002212  0101               	movlb	1	; () banked
 11268  002214  0791               	decf	_LedContMs& (0+255),f,b
 11269  002216  A0D8               	btfss	status,0,c
 11270  002218  0792               	decf	(_LedContMs+1)& (0+255),f,b
 11271                           
 11272                           ; BSR set to: 1
 11273                           ;PruebaLed20.c: 27: if (LedContMs <= 1) {
 11274  00221A  0101               	movlb	1	; () banked
 11275  00221C  BF92               	btfsc	(_LedContMs+1)& (0+255),7,b
 11276  00221E  D008               	goto	i2l3924
 11277  002220  0101               	movlb	1	; () banked
 11278  002222  5192               	movf	(_LedContMs+1)& (0+255),w,b
 11279  002224  E115               	bnz	i2l111
 11280  002226  0E02               	movlw	2
 11281  002228  0101               	movlb	1	; () banked
 11282  00222A  5D91               	subwf	_LedContMs& (0+255),w,b
 11283  00222C  B0D8               	btfsc	status,0,c
 11284  00222E  0012               	return	
 11285  002230                     i2l3924:
 11286                           
 11287                           ; BSR set to: 1
 11288                           ;PruebaLed20.c: 28: if (PORTCbits.RC0 == 1){
 11289  002230  A082               	btfss	3970,0,c	;volatile
 11290  002232  D007               	goto	i2l109
 11291                           
 11292                           ; BSR set to: 1
 11293                           ;PruebaLed20.c: 29: PORTCbits.RC0 = 0;
 11294  002234  9082               	bcf	3970,0,c	;volatile
 11295                           
 11296                           ; BSR set to: 1
 11297                           ;PruebaLed20.c: 30: LedContMs = 100;
 11298  002236  0E00               	movlw	0
 11299  002238  0101               	movlb	1	; () banked
 11300  00223A  6F92               	movwf	(_LedContMs+1)& (0+255),b
 11301  00223C  0E64               	movlw	100
 11302  00223E  6F91               	movwf	_LedContMs& (0+255),b
 11303                           
 11304                           ;PruebaLed20.c: 31: }
 11305  002240  0012               	return	
 11306  002242                     i2l109:
 11307                           
 11308                           ; BSR set to: 1
 11309                           ;PruebaLed20.c: 32: else {
 11310                           ;PruebaLed20.c: 33: PORTCbits.RC0 = 1;
 11311  002242  8082               	bsf	3970,0,c	;volatile
 11312                           
 11313                           ; BSR set to: 1
 11314                           ;PruebaLed20.c: 34: LedContMs = 100;
 11315  002244  0E00               	movlw	0
 11316  002246  0101               	movlb	1	; () banked
 11317  002248  6F92               	movwf	(_LedContMs+1)& (0+255),b
 11318  00224A  0E64               	movlw	100
 11319  00224C  6F91               	movwf	_LedContMs& (0+255),b
 11320                           
 11321                           ; BSR set to: 1
 11322  00224E  0012               	return	
 11323  002250                     i2l111:
 11324                           
 11325                           ; BSR set to: 1
 11326  002250  0012               	return		;funcret
 11327  002252                     __end_of_LedAmarilloInterr:
 11328                           	opt stack 0
 11329                           pclatu	equ	0xFFB
 11330                           pclath	equ	0xFFA
 11331                           tblptru	equ	0xFF8
 11332                           tblptrh	equ	0xFF7
 11333                           tblptrl	equ	0xFF6
 11334                           tablat	equ	0xFF5
 11335                           prodh	equ	0xFF4
 11336                           prodl	equ	0xFF3
 11337                           intcon	equ	0xFF2
 11338                           postinc0	equ	0xFEE
 11339                           fsr0h	equ	0xFEA
 11340                           fsr0l	equ	0xFE9
 11341                           wreg	equ	0xFE8
 11342                           indf1	equ	0xFE7
 11343                           postdec1	equ	0xFE5
 11344                           fsr1h	equ	0xFE2
 11345                           fsr1l	equ	0xFE1
 11346                           indf2	equ	0xFDF
 11347                           postinc2	equ	0xFDE
 11348                           postdec2	equ	0xFDD
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _IntLedParpadea *****************
 11354 ;; Defined at:
 11355 ;;		line 66 in file "PruebaLed20.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  Nveces          2    5[COMRAM] int 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;  I               2    8[COMRAM] int 
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      void 
 11362 ;; Registers used:
 11363 ;;		wreg, status,2, status,0, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11369 ;;      Params:         2       0       0       0       0       0       0       0       0
 11370 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11371 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11372 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11373 ;;Total ram usage:        5 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    1
 11376 ;; This function calls:
 11377 ;;		_IntDelay_ms
 11378 ;; This function is called by:
 11379 ;;		_MstInterr
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text74
 11384  001EB6                     __ptext74:
 11385                           	opt stack 0
 11386  001EB6                     _IntLedParpadea:
 11387                           	opt stack 18
 11388                           
 11389                           ;PruebaLed20.c: 67: int I;
 11390                           ;PruebaLed20.c: 68: INTCON &= 0x7F;;
 11391                           
 11392                           ; BSR set to: 1
 11393                           ;incstack = 0
 11394  001EB6  9EF2               	bcf	intcon,7,c	;volatile
 11395                           
 11396                           ;PruebaLed20.c: 69: PORTCbits.RC0 = 0;
 11397  001EB8  9082               	bcf	3970,0,c	;volatile
 11398                           
 11399                           ;PruebaLed20.c: 70: IntDelay_ms (1000);
 11400  001EBA  0E03               	movlw	3
 11401  001EBC  6E02               	movwf	IntDelay_ms@delay+1,c
 11402  001EBE  0EE8               	movlw	232
 11403  001EC0  6E01               	movwf	IntDelay_ms@delay,c
 11404  001EC2  EC06  F012         	call	_IntDelay_ms	;wreg free
 11405  001EC6                     i2l3938:
 11406                           
 11407                           ;PruebaLed20.c: 72: for (I=1; I<=Nveces; I++) {
 11408  001EC6  0E00               	movlw	0
 11409  001EC8  6E0A               	movwf	IntLedParpadea@I+1,c
 11410  001ECA  0E01               	movlw	1
 11411  001ECC  6E09               	movwf	IntLedParpadea@I,c
 11412  001ECE  D010               	goto	i2l3946
 11413  001ED0                     i2l131:
 11414                           
 11415                           ;PruebaLed20.c: 73: PORTCbits.RC0 = 1;
 11416  001ED0  8082               	bsf	3970,0,c	;volatile
 11417                           
 11418                           ;PruebaLed20.c: 74: IntDelay_ms (400);
 11419  001ED2  0E01               	movlw	1
 11420  001ED4  6E02               	movwf	IntDelay_ms@delay+1,c
 11421  001ED6  0E90               	movlw	144
 11422  001ED8  6E01               	movwf	IntDelay_ms@delay,c
 11423  001EDA  EC06  F012         	call	_IntDelay_ms	;wreg free
 11424                           
 11425                           ;PruebaLed20.c: 75: PORTCbits.RC0 = 0;
 11426  001EDE  9082               	bcf	3970,0,c	;volatile
 11427                           
 11428                           ;PruebaLed20.c: 76: IntDelay_ms (400);
 11429  001EE0  0E01               	movlw	1
 11430  001EE2  6E02               	movwf	IntDelay_ms@delay+1,c
 11431  001EE4  0E90               	movlw	144
 11432  001EE6  6E01               	movwf	IntDelay_ms@delay,c
 11433  001EE8  EC06  F012         	call	_IntDelay_ms	;wreg free
 11434  001EEC  4A09               	infsnz	IntLedParpadea@I,f,c
 11435  001EEE  2A0A               	incf	IntLedParpadea@I+1,f,c
 11436  001EF0                     i2l3946:
 11437  001EF0  5009               	movf	IntLedParpadea@I,w,c
 11438  001EF2  5C06               	subwf	IntLedParpadea@Nveces,w,c
 11439  001EF4  5007               	movf	IntLedParpadea@Nveces+1,w,c
 11440  001EF6  0A80               	xorlw	128
 11441  001EF8  6E08               	movwf	??_IntLedParpadea& (0+255),c
 11442  001EFA  500A               	movf	IntLedParpadea@I+1,w,c
 11443  001EFC  0A80               	xorlw	128
 11444  001EFE  5808               	subwfb	??_IntLedParpadea& (0+255),w,c
 11445  001F00  B0D8               	btfsc	status,0,c
 11446  001F02  D7E6               	goto	i2l131
 11447                           
 11448                           ;PruebaLed20.c: 77: }
 11449                           ;PruebaLed20.c: 78: IntDelay_ms (500);
 11450  001F04  0E01               	movlw	1
 11451  001F06  6E02               	movwf	IntDelay_ms@delay+1,c
 11452  001F08  0EF4               	movlw	244
 11453  001F0A  6E01               	movwf	IntDelay_ms@delay,c
 11454  001F0C  EC06  F012         	call	_IntDelay_ms	;wreg free
 11455  001F10  D7DA               	goto	i2l3938
 11456  001F12                     __end_of_IntLedParpadea:
 11457                           	opt stack 0
 11458                           pclatu	equ	0xFFB
 11459                           pclath	equ	0xFFA
 11460                           tblptru	equ	0xFF8
 11461                           tblptrh	equ	0xFF7
 11462                           tblptrl	equ	0xFF6
 11463                           tablat	equ	0xFF5
 11464                           prodh	equ	0xFF4
 11465                           prodl	equ	0xFF3
 11466                           intcon	equ	0xFF2
 11467                           postinc0	equ	0xFEE
 11468                           fsr0h	equ	0xFEA
 11469                           fsr0l	equ	0xFE9
 11470                           wreg	equ	0xFE8
 11471                           indf1	equ	0xFE7
 11472                           postdec1	equ	0xFE5
 11473                           fsr1h	equ	0xFE2
 11474                           fsr1l	equ	0xFE1
 11475                           indf2	equ	0xFDF
 11476                           postinc2	equ	0xFDE
 11477                           postdec2	equ	0xFDD
 11478                           fsr2h	equ	0xFDA
 11479                           fsr2l	equ	0xFD9
 11480                           status	equ	0xFD8
 11481                           
 11482 ;; *************** function _IntDelay_ms *****************
 11483 ;; Defined at:
 11484 ;;		line 83 in file "PruebaLed20.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;  delay           2    0[COMRAM] int 
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;  I               2    3[COMRAM] int 
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      void 
 11491 ;; Registers used:
 11492 ;;		wreg, status,2, status,0
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11498 ;;      Params:         2       0       0       0       0       0       0       0       0
 11499 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11500 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11501 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11502 ;;Total ram usage:        5 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; This function calls:
 11505 ;;		Nothing
 11506 ;; This function is called by:
 11507 ;;		_IntLedParpadea
 11508 ;;		_MstInterr
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text75
 11513  00240C                     __ptext75:
 11514                           	opt stack 0
 11515  00240C                     _IntDelay_ms:
 11516                           	opt stack 18
 11517                           
 11518                           ;PruebaLed20.c: 84: int I;
 11519                           ;PruebaLed20.c: 85: for (I=1; I<=delay; I++) { _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); }
 11520                           
 11521                           ;incstack = 0
 11522  00240C  0E00               	movlw	0
 11523  00240E  6E05               	movwf	IntDelay_ms@I+1,c
 11524  002410  0E01               	movlw	1
 11525  002412  6E04               	movwf	IntDelay_ms@I,c
 11526  002414  D009               	goto	i2l138
 11527  002416                     i2l3634:
 11528  002416  0E03               	movlw	3
 11529  002418  6E03               	movwf	??_IntDelay_ms& (0+255),c
 11530  00241A  0E98               	movlw	152
 11531  00241C                     i2u395_47:
 11532  00241C  2EE8               	decfsz	wreg,f,c
 11533  00241E  D7FE               	bra	i2u395_47
 11534  002420  2E03               	decfsz	??_IntDelay_ms& (0+255),f,c
 11535  002422  D7FC               	bra	i2u395_47
 11536  002424  4A04               	infsnz	IntDelay_ms@I,f,c
 11537  002426  2A05               	incf	IntDelay_ms@I+1,f,c
 11538  002428                     i2l138:
 11539  002428  5004               	movf	IntDelay_ms@I,w,c
 11540  00242A  5C01               	subwf	IntDelay_ms@delay,w,c
 11541  00242C  5002               	movf	IntDelay_ms@delay+1,w,c
 11542  00242E  0A80               	xorlw	128
 11543  002430  6E03               	movwf	??_IntDelay_ms& (0+255),c
 11544  002432  5005               	movf	IntDelay_ms@I+1,w,c
 11545  002434  0A80               	xorlw	128
 11546  002436  5803               	subwfb	??_IntDelay_ms& (0+255),w,c
 11547  002438  A0D8               	btfss	status,0,c
 11548  00243A  0012               	return	
 11549  00243C  D7EC               	goto	i2l3634
 11550  00243E                     __end_of_IntDelay_ms:
 11551                           	opt stack 0
 11552  0000                     pclatu	equ	0xFFB
 11553                           pclath	equ	0xFFA
 11554                           tblptru	equ	0xFF8
 11555                           tblptrh	equ	0xFF7
 11556                           tblptrl	equ	0xFF6
 11557                           tablat	equ	0xFF5
 11558                           prodh	equ	0xFF4
 11559                           prodl	equ	0xFF3
 11560                           intcon	equ	0xFF2
 11561                           postinc0	equ	0xFEE
 11562                           fsr0h	equ	0xFEA
 11563                           fsr0l	equ	0xFE9
 11564                           wreg	equ	0xFE8
 11565                           indf1	equ	0xFE7
 11566                           postdec1	equ	0xFE5
 11567                           fsr1h	equ	0xFE2
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           pclatu	equ	0xFFB
 11576                           pclath	equ	0xFFA
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           postinc0	equ	0xFEE
 11585                           fsr0h	equ	0xFEA
 11586                           fsr0l	equ	0xFE9
 11587                           wreg	equ	0xFE8
 11588                           indf1	equ	0xFE7
 11589                           postdec1	equ	0xFE5
 11590                           fsr1h	equ	0xFE2
 11591                           fsr1l	equ	0xFE1
 11592                           indf2	equ	0xFDF
 11593                           postinc2	equ	0xFDE
 11594                           postdec2	equ	0xFDD
 11595                           fsr2h	equ	0xFDA
 11596                           fsr2l	equ	0xFD9
 11597                           status	equ	0xFD8
 11598                           
 11599                           	psect	rparam
 11600  0000                     pclatu	equ	0xFFB
 11601                           pclath	equ	0xFFA
 11602                           tblptru	equ	0xFF8
 11603                           tblptrh	equ	0xFF7
 11604                           tblptrl	equ	0xFF6
 11605                           tablat	equ	0xFF5
 11606                           prodh	equ	0xFF4
 11607                           prodl	equ	0xFF3
 11608                           intcon	equ	0xFF2
 11609                           postinc0	equ	0xFEE
 11610                           fsr0h	equ	0xFEA
 11611                           fsr0l	equ	0xFE9
 11612                           wreg	equ	0xFE8
 11613                           indf1	equ	0xFE7
 11614                           postdec1	equ	0xFE5
 11615                           fsr1h	equ	0xFE2
 11616                           fsr1l	equ	0xFE1
 11617                           indf2	equ	0xFDF
 11618                           postinc2	equ	0xFDE
 11619                           postdec2	equ	0xFDD
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624                           	psect	temp
 11625  000047                     btemp:
 11626                           	opt stack 0
 11627  000047                     	ds	1
 11628  0000                     int$flags	set	btemp
 11629                           pclatu	equ	0xFFB
 11630                           pclath	equ	0xFFA
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           postinc0	equ	0xFEE
 11639                           fsr0h	equ	0xFEA
 11640                           fsr0l	equ	0xFE9
 11641                           wreg	equ	0xFE8
 11642                           indf1	equ	0xFE7
 11643                           postdec1	equ	0xFE5
 11644                           fsr1h	equ	0xFE2
 11645                           fsr1l	equ	0xFE1
 11646                           indf2	equ	0xFDF
 11647                           postinc2	equ	0xFDE
 11648                           postdec2	equ	0xFDD
 11649                           fsr2h	equ	0xFDA
 11650                           fsr2l	equ	0xFD9
 11651                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         293
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      70
    BANK0           160      6     160
    BANK1           256     24     147
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    memcpy@s1	PTR const void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MIOAdcAct(COMRAM[10]), MIOAdcLeido(BANK0[10]), MrHora12(BANK0[2]), 
		 -> MrFecha12(COMRAM[4]), MrDirV(COMRAM[2]), MrUltV(COMRAM[2]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), RAM(DATA[2047]), RsRxBuffer(BANK1[30]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MIOAdcAct(COMRAM[10]), MIOAdcLeido(BANK0[10]), MrHora12(BANK0[2]), 
		 -> MrFecha12(COMRAM[4]), MrDirV(COMRAM[2]), MrUltV(COMRAM[2]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), RAM(DATA[2047]), RsRxBuffer(BANK1[30]), 

    _MrEsc@MrReg1	PTR unsigned char  size(2) Largest target is 13
		 -> MrRegAux(BANK1[13]), MrReg(BANK0[13]), 

    _MrLee@MrReg1	PTR unsigned char  size(2) Largest target is 13
		 -> MrReg(BANK0[13]), 

    MseLee@Datos	PTR unsigned char  size(2) Largest target is 30
		 -> MrReg(BANK0[13]), RsTxBuffer(BANK1[30]), 

    MseEsc@Datos	PTR unsigned char  size(2) Largest target is 30
		 -> MrRegAux(BANK1[13]), MrReg(BANK0[13]), RsRxBuffer(BANK1[30]), 

    EscRAM@Car2P	PTR void  size(2) Largest target is 30
		 -> RsRxBuffer(BANK1[30]), 

    sp__memcpy	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    Ptr1	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), RAM(DATA[2047]), 

    RsCheckSum@RsBuffer	PTR unsigned char  size(2) Largest target is 30
		 -> RsTxBuffer(BANK1[30]), 


Critical Paths under _main in COMRAM

    _Tpo_init->_RtcLee
    _RtcInit->_RtcEsc
    _RtcInit->_RtcLee
    _Tpo_Ciclo->_RtcLee
    _MIOAdcAjuste2_5->___aldiv
    ___aldiv->___lmul
    _MstInit->_LedParpadea
    _RsInit->_PsInit
    _LedParpadea->_Delay_ms
    _Ppal_RsComando->_MseEsc
    _Ppal_RsComando->_MseLee
    _RtcEsc->_I2CEscByte
    _Hex2Bcd->___awdiv
    _RsTxEnviaMsg->_RsCheckSum
    _MrSgte->__MrSgte
    __MrLee->_MseLee
    _MseLee->_I2CEscByte
    __MrPreparaFecha->_memcpy
    __MrEsc->_MseEsc
    __CalculaRegPos->___lwdiv
    _MseEsc->_I2CEscByte
    _RtcLee->_I2CEscByte
    _I2CEscByte->_Hex2Bcd
    _LeeRAM->_memcpy
    _EscRAM->_memcpy

Critical Paths under _Interr in COMRAM

    _MioInterr->_ADC_Lee
    _MstInterr->_IntLedParpadea
    _RsInterr->_PsTxInterrupt
    _PsTxInterrupt->_PsTxEnviaCar
    _IntLedParpadea->_IntDelay_ms

Critical Paths under _main in BANK0

    _MIOAdcAjuste2_5->___aldiv
    _Ppal_RsComando->_MseEsc
    _Ppal_RsComando->_MseLee
    __MrLee->_MseLee
    __MrEsc->_MseEsc

Critical Paths under _Interr in BANK0

    None.

Critical Paths under _main in BANK1

    _Ppal_Ciclo->_MioCiclo
    _MioCiclo->_MrAgregaReg
    _MstCiclo->_MstRsComando
    _MstRsComando->_Ppal_RsComando
    _Ppal_RsComando->_MrAgregaReg
    _MrInit->__MrEsc
    _MrLeeReg->__MrLee
    __MrLee->_MseLee
    _MrFormat->__MrEsc
    _MrAgregaReg->__MrEsc
    __MrEsc->_MseEsc

Critical Paths under _Interr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  190512
                                             19 BANK1      5     0      5
                            _MstMain
 ---------------------------------------------------------------------------------
 (1) _MstMain                                              0     0      0  190512
                           _MstCiclo
                            _MstInit
                         _Ppal_Ciclo
                          _Ppal_Init
 ---------------------------------------------------------------------------------
 (2) _Ppal_Init                                            0     0      0   31149
                           _ADC_Init
                           _Delay_ms
                            _I2CInit
                            _MIOInit
                       _MrInicializa
                             _MrInit
                       _RsTxEnviaMsg
                            _RtcInit
                           _Tpo_init
 ---------------------------------------------------------------------------------
 (3) _Tpo_init                                             0     0      0    2285
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _RtcInit                                              0     0      0    5317
                             _RtcEsc
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _MIOInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Ppal_Ciclo                                           0     0      0   34897
                           _MioCiclo
                          _Tpo_Ciclo
 ---------------------------------------------------------------------------------
 (3) _Tpo_Ciclo                                            2     2      0    2285
                                             41 COMRAM     2     2      0
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _MioCiclo                                             5     5      0   32612
                                             10 BANK1      3     3      0
                    _MIOAdcAjuste2_5
                      _MioPreparaReg
                        _MrAgregaReg
                                _abs
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     322
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _MioPreparaReg                                        3     3      0       0
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _MIOAdcAjuste2_5                                      4     4      0    2054
                                              0 BANK1      4     4      0
                    _MIOAdcLeido2Act
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     866
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8    1061
                                             36 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _MIOAdcLeido2Act                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MstInit                                              0     0      0    1270
                           _Delay_ms
                    _LedAmarilloInit
                        _LedParpadea
                             _RsInit
 ---------------------------------------------------------------------------------
 (3) _RsInit                                               4     0      4     172
                                             28 COMRAM     4     0      4
                             _PsInit
 ---------------------------------------------------------------------------------
 (4) _PsInit                                               4     0      4      86
                                             24 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _LedParpadea                                          5     3      2     604
                                             29 COMRAM     5     3      2
                           _Delay_ms
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             5     3      2     494
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _LedAmarilloInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MstCiclo                                             0     0      0  123196
                       _MstRsComando
 ---------------------------------------------------------------------------------
 (3) _MstRsComando                                         5     5      0  123196
                                             14 BANK1      5     5      0
                             _EscRAM
                             _LeeRAM
                     _Ppal_RsComando
                       _RsTxEnviaMsg
 ---------------------------------------------------------------------------------
 (4) _Ppal_RsComando                                       4     4      0   98174
                                             10 BANK1      4     4      0
                        _MrAgregaReg
                              _MrAnt
                           _MrFormat
                             _MrInit
                           _MrLeeReg
                             _MrSgte
                              _MrUlt
                             _MseEsc
                             _MseLee
                       _RsTxEnviaMsg
                             _RtcEsc
                             _RtcLee
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _RtcEsc                                               1     1      0    3032
                                             40 COMRAM     1     1      0
                            _Hex2Bcd
                         _I2CEscByte
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _Hex2Bcd                                              4     4      0    1282
                                             32 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     587
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     599
                                             24 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RsTxEnviaMsg                                         5     3      2    2506
                                             36 COMRAM     5     3      2
                         _RsCheckSum
 ---------------------------------------------------------------------------------
 (4) _RsCheckSum                                          12     8      4     454
                                             24 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (5) _MrUlt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MrSgte                                               0     0      0     450
                            __MrSgte
 ---------------------------------------------------------------------------------
 (3) _MrInit                                               0     0      0   20417
                       _MrInicializa
                           _MrLeeReg
                             __MrEsc
                      __MrPreparaPor
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MrLeeReg                                             0     0      0    4117
                             __MrLee
 ---------------------------------------------------------------------------------
 (5) __MrLee                                               4     0      4    4117
                                              4 BANK1      4     0      4
                             _MseLee
                     __CalculaRegPos
 ---------------------------------------------------------------------------------
 (6) _MseLee                                              15     9      6    2904
                                             40 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                                              0 BANK1      4     4      0
                         _I2CEscByte
                         _I2CLeeByte
                         _I2CSendAck
                        _I2CSendNAck
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _MrFormat                                             0     0      0   18721
                       _MrInicializa
                      _MrSeparaFecha
                             _RtcLee
                             __MrEsc
                    __MrPreparaFecha
                      __MrPreparaPor
 ---------------------------------------------------------------------------------
 (4) _MrInicializa                                         2     2      0     130
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _MrAnt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MrAgregaReg                                          2     2      0   30236
                                              8 BANK1      2     2      0
                      _MrSeparaFecha
                             _RtcLee
                             __MrEsc
                    __MrPreparaFecha
                      __MrPreparaPor
                            __MrSgte
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) __MrSgte                                              2     0      2     450
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) __MrPreparaPor                                        2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) __MrPreparaFecha                                      2     2      0   11130
                                             34 COMRAM     2     2      0
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) __MrEsc                                               4     0      4    5040
                                              4 BANK1      4     0      4
                             _MseEsc
                     __CalculaRegPos
 ---------------------------------------------------------------------------------
 (5) __CalculaRegPos                                       6     4      2     997
                                             31 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     395
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _MseEsc                                              15     9      6    2441
                                             40 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                                              0 BANK1      4     4      0
                         _I2CEscByte
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (4) _RtcLee                                               1     1      0    2285
                                             40 COMRAM     1     1      0
                            _Bcd2Hex
                         _I2CEscByte
                         _I2CLeeByte
                         _I2CSendAck
                        _I2CSendNAck
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CSendNAck                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CSendAck                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CLeeByte                                           6     4      2     139
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _I2CEscByte                                           4     2      2    1750
                                             36 COMRAM     4     2      2
                            _Hex2Bcd (ARG)
 ---------------------------------------------------------------------------------
 (5) _Bcd2Hex                                              3     3      0      96
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _MrSeparaFecha                                       14    14      0      37
                                             24 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (4) _LeeRAM                                               2     0      2   11139
                                             34 COMRAM     2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _EscRAM                                               4     0      4   11247
                                             34 COMRAM     4     0      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     4      6   11031
                                             24 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _Interr                                             14    14      0    1188
                                             10 COMRAM    14    14      0
                          _MstInterr
                        _Ppal_Interr
 ---------------------------------------------------------------------------------
 (11) _Ppal_Interr                                         0     0      0     324
                  _LedAmarilloInterr
                          _MioInterr
                         _Tpo_interr
 ---------------------------------------------------------------------------------
 (12) _Tpo_interr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MioInterr                                           0     0      0     324
                            _ADC_Lee
 ---------------------------------------------------------------------------------
 (13) _ADC_Lee                                             6     4      2     324
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (11) _MstInterr                                           0     0      0     864
                        _IntDelay_ms
                     _IntLedParpadea
                  _LedAmarilloInterr
                           _RsInterr
 ---------------------------------------------------------------------------------
 (12) _RsInterr                                            0     0      0      22
                      _PsRxInterrupt
                      _PsTxInterrupt
 ---------------------------------------------------------------------------------
 (13) _PsTxInterrupt                                       1     1      0      22
                                              1 COMRAM     1     1      0
                       _PsTxEnviaCar
 ---------------------------------------------------------------------------------
 (14) _PsTxEnviaCar                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _PsRxInterrupt                                       0     0      0       0
                      _PsRxRecibeCar
 ---------------------------------------------------------------------------------
 (14) _PsRxRecibeCar                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _LedAmarilloInterr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IntLedParpadea                                      5     3      2     476
                                              5 COMRAM     5     3      2
                        _IntDelay_ms
 ---------------------------------------------------------------------------------
 (13) _IntDelay_ms                                         5     3      2     366
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MstMain
     _MstCiclo
       _MstRsComando
         _EscRAM
           _memcpy
         _LeeRAM
           _memcpy
         _Ppal_RsComando
           _MrAgregaReg
             _MrSeparaFecha
             _RtcLee
               _Bcd2Hex
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaFecha
               _memcpy
             __MrPreparaPor
             __MrSgte
             _memcpy
           _MrAnt
           _MrFormat
             _MrInicializa
             _MrSeparaFecha
             _RtcLee
               _Bcd2Hex
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaFecha
               _memcpy
             __MrPreparaPor
           _MrInit
             _MrInicializa
             _MrLeeReg
               __MrLee
                 _MseLee
                   _I2CEscByte
                     _Hex2Bcd (ARG)
                       ___awdiv
                       ___awmod
                   _I2CLeeByte
                   _I2CSendAck
                   _I2CSendNAck
                   _I2CStart
                   _I2CStop
                 __CalculaRegPos
                   ___lwdiv
                   ___lwmod
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaPor
             _memcpy
           _MrLeeReg
             __MrLee
               _MseLee
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CLeeByte
                 _I2CSendAck
                 _I2CSendNAck
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
           _MrSgte
             __MrSgte
           _MrUlt
           _MseEsc
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           _MseLee
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           _RsTxEnviaMsg
             _RsCheckSum
           _RtcEsc
             _Hex2Bcd
               ___awdiv
               ___awmod
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           _RtcLee
             _Bcd2Hex
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           _memcpy
         _RsTxEnviaMsg
           _RsCheckSum
     _MstInit
       _Delay_ms
       _LedAmarilloInit
       _LedParpadea
         _Delay_ms
       _RsInit
         _PsInit
     _Ppal_Ciclo
       _MioCiclo
         _MIOAdcAjuste2_5
           _MIOAdcLeido2Act
           ___aldiv
             ___lmul (ARG)
           ___lmul
         _MioPreparaReg
         _MrAgregaReg
           _MrSeparaFecha
           _RtcLee
             _Bcd2Hex
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           __MrEsc
             _MseEsc
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CStart
               _I2CStop
             __CalculaRegPos
               ___lwdiv
               ___lwmod
           __MrPreparaFecha
             _memcpy
           __MrPreparaPor
           __MrSgte
           _memcpy
         _abs
       _Tpo_Ciclo
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop
     _Ppal_Init
       _ADC_Init
       _Delay_ms
       _I2CInit
       _MIOInit
       _MrInicializa
       _MrInit
         _MrInicializa
         _MrLeeReg
           __MrLee
             _MseLee
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __CalculaRegPos
               ___lwdiv
               ___lwmod
         __MrEsc
           _MseEsc
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           __CalculaRegPos
             ___lwdiv
             ___lwmod
         __MrPreparaPor
         _memcpy
       _RsTxEnviaMsg
         _RsCheckSum
       _RtcInit
         _RtcEsc
           _Hex2Bcd
             ___awdiv
             ___awmod
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CStart
           _I2CStop
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop
       _Tpo_init
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop

 _Interr (ROOT)
   _MstInterr
     _IntDelay_ms
     _IntLedParpadea
       _IntDelay_ms
     _LedAmarilloInterr
     _RsInterr
       _PsRxInterrupt
         _PsRxRecibeCar
       _PsTxInterrupt
         _PsTxEnviaCar
   _Ppal_Interr
     _LedAmarilloInterr
     _MioInterr
       _ADC_Lee
     _Tpo_interr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     18      93       8       57.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2E      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     179       6        0.0%
DATA                 0      0     179       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Sep 27 09:43:51 2019

    __end_of_IntLedParpadea 1F12             PsTxEnviaCar@car 0001              __CalculaRegPos 1AF0  
       __size_of_I2CSendAck 003C                          _GO 007E11      __size_of_MioPreparaReg 00B2  
              ___awdiv@sign 001E             _MIOAdcAjuste2_5 07BA                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
             ?_MrInicializa 0001                         l123 23C4                         l116 1E74  
                       l315 19E6                         l316 1A2C                         l317 19EE  
                       l325 1BD6                         l421 0F30                         l191 245A  
                       l178 1E3A                         l435 236E                         l453 25F0  
                       l375 15A4                         l607 06A8                         l570 0ADC  
                       l666 250A                         l588 00F0        __size_of_I2CSendNAck 0034  
                       _GIE 007F97                __CFG_CPB$OFF 000000                         _PR2 000FBB  
              __CFG_CPD$OFF 000000                         _abs 24EC             __end_of_I2CInit 2644  
           _MIOAdcLeido2Act 258A             __end_of_ADC_Lee 2106                ___awmod@sign 001E  
           __end_of_I2CStop 253C                         wreg 000FE8               ??_IntDelay_ms 0003  
              __CFG_LVP$OFF 000000                        l1023 205C                        l1033 21C8  
                      ?_abs 0019                        l5010 095A                        l5002 0936  
                      l5100 168C                        l4310 21E4                        l4134 19F0  
                      l5006 0948                        l4160 1A4E                        l4320 1090  
                      l4240 2036                        l5040 0FFE                        l5024 0F80  
                      l4330 10DC                        l5026 0F8A                        l4316 2200  
                      l4180 1B9A                        l4236 202A                        l4260 21AA  
                      l4420 1C38                        l4412 1C18                        l4404 1BFE  
                      l5036 0FE6                        l3620 1E6A                        l5116 16E4  
                      l5108 16B8                        l4334 1116                        l4326 10AE  
                      l4238 2032                        l4270 0B2E                        l4414 1C20  
                      l5046 102A                        l5054 1048                        l5150 0AD8  
                      l5222 2170                        l4192 1BBE                        l4328 10D0  
                      l4248 2052                        l4264 21BE                        l4256 219E  
                      l4280 0B7A                        l4440 1E2A                        l4360 1A80  
                      l4416 1C24                        l4424 1C42                        l4408 1C0A  
                      l5056 106C                        l3376 23B2                        l5232 218A  
                      l4338 1146                        l4258 21A6                        l4434 1E0C  
                      l4540 11BA                        l4508 1CE0                        l4276 0B4C  
                      l4372 1AA6                        l4428 1C50                        l3628 1E94  
                      l5092 1660                        l4470 15A8                        l4518 1D12  
                      l4294 0BEE                        l4278 0B6E                        l4702 0F28  
                      l4374 1AAE                        l4366 1A90                        l4544 11CC  
                      l4288 0BC4                        l4392 1AE6                        l4384 1ACE  
                      l4376 1AB2                        l4650 0E2C                        l4810 154E  
                      l4802 1522                        l4548 1D36                        l4740 0DA0  
                      l4388 1AD8                        l4558 1D58                        l4662 0E6C  
                      l4646 0E1C                        l4806 1532                        l4728 0D44  
                      l4658 0E46                        l4666 0E72                        l4834 00CE  
                      l4762 1F7A                        l4684 0ED4                        l4676 0E96  
                      l4940 0538                        l4924 046C                        l4916 0422  
                      l4908 03D8                        l4852 01A0                        l4678 0E9E  
                      l4950 05C0                        l4942 0562                        l4870 0262  
                      l4846 0172                        l4790 14DC                        l4766 1F8E  
                      l4688 0EF0                        l4944 058C                        l4928 04CE  
                      l4792 14EA                        l4784 14B6                        l4954 063E  
                      l4866 0218                        l4858 01CE                        l4794 14EE  
                      l4778 149C                        l4964 068A                        l4884 0300  
                      l4958 0656                        l4898 0372                        l4978 072A  
         ??_LedAmarilloInit 0019                        u2105 1802                        u2115 1822  
                      u3020 236E                        u3220 0CE0                        u3045 125E  
                      u2085 17C2                        u3055 1274                        u2095 17E2  
                      u2650 1A2C                        u3370 0F5C                        u3607 263C  
                      u3617 23B8                        u2690 1BD6                        u3707 2404  
                      u3627 2518                        u3717 2378                        u3637 2522  
                      u3807 22BA                        u3727 2382                        u3647 252A  
                      u3817 22C4                        u3737 238C                        u3657 2534  
                      u3907 1A18                        u3827 1B74                        u3747 2394  
                      u3667 23E0                        u2795 1B4C                        _RCIF 007CF5  
                      u3917 1A30                        u3837 1BA8                        u3757 239E  
                      u3677 23E8                        u3927 1A3A                        u3847 1BB0  
                      u3767 2294                        u3687 23F2                        u3937 1A5A  
                      u3857 1BC2                        u3777 229E                        u3697 23FA  
                      u3947 1A64                        u3867 1BDA                        u3787 22A8  
                      u3877 19FC                        u3797 22B0                        u3887 1A06  
                      u3897 1A0E             __end_of_MIOInit 147C                        _Car1 0045  
                      _TXIF 007CF4                        _Dir1 0088             __end_of_Bcd2Hex 262E  
                      _Ptr1 00A6         __end_of_LedParpadea 1EB6                        abs@a 0019  
                      _main 26C6                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf1 000FE7  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0047               __CFG_BORV$190 000000            __end_of_I2CStart 240C  
          __end_of_ADC_Init 265A                        prodh 000FF4                        prodl 000FF3  
                      start 0094             __end_of_Hex2Bcd 2340               __CFG_IESO$OFF 000000  
    __end_of__CalculaRegPos 1B6E               __CFG_MCLRE$ON 000000                ___param_bank 000000  
           ?_IntLedParpadea 0006          _RsTxTransmitiendoF 00B8                       ??_abs 001B  
           __end_of__MrSgte 25FA             __end_of_MstMain 2190             __end_of_MstInit 214C  
           __end_of_RtcInit 2290                IntDelay_ms@I 0004              ??_MrInicializa 0019  
           __end_of___aldiv 1560         __end_of_MrAgregaReg 0DF2                       ?_main 018C  
           __end_of___awdiv 1AF0             __end_of___awmod 1C5A             ___awdiv@divisor 001B  
                     _T2CON 000FBA             __end_of___lwdiv 2066                       i2l111 2250  
           __end_of___lwmod 21D2                       i2l131 1ED0                       i2l109 2242  
                     i2l138 2428                       i2l515 20E8                       i2l613 0058  
           ___awdiv@counter 001D                       _RCSTA 000FAB                       _Adc5v 0084  
                     _SPBRG 000FAF                       _PORTB 000F81                       _TRISA 000F92  
                     _TRISB 000F93               _MrSeparaFecha 1190                       _TXSTA 000FAC  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000                       _Hora1 0125  
                     _MrAnt 2670               __CFG_WRT2$OFF 000000         ___lmul@multiplicand 001D  
             __CFG_WRT3$OFF 000000                       _MrGpo 009A                       _MrReg 00D1  
                     _Dummy 008A                       _MrUlt 26B2              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000               _MioPreparaReg 17B6  
            __pbitbssCOMRAM 0230                       pclath 000FFA                       tablat 000FF5  
       __end_of_IntDelay_ms 243E                       status 000FD8              __CFG_T3CMX$RC0 000000  
          __end_of_Delay_ms 23DA              __CFG_PBADEN$ON 000000                 MseEsc@Datos 002B  
               MseEsc@Index 0179             ?__CalculaRegPos 0020                 MseLee@Datos 002B  
                _MrRegsXGpo 009E                 MseLee@Index 0179             __initialization 1FC0  
   __end_of_MIOAdcAjuste2_5 096E                __end_of_main 26CE            __end_of_MrLeeReg 2614  
          __end_of_MioCiclo 0B10            __end_of_MrFormat 191A              __CFG_PCLKEN$ON 000000  
   __end_of_MIOAdcLeido2Act 25B0                   ??_I2CInit 0019                  _RsCheckSum 1DFA  
                 ??_ADC_Lee 0003                   ??_I2CStop 0019               ??_Ppal_Interr 0007  
                    ??_main 002F            __end_of_MstCiclo 2696           _LedAmarilloInterr 2212  
          __end_of_RsInterr 26C6               __activetblptr 000002              ?_MrSeparaFecha 0001  
              ??_I2CEscByte 0027          ?_LedAmarilloInterr 0001                ??_I2CLeeByte 001B  
                    ?_MrAnt 0001              __CFG_SDOMX$RB3 000000                      ?_MrUlt 0001  
                 ??_MIOInit 0019             __CFG_CCP2MX$RC1 000000                   ??_Bcd2Hex 0019  
               _LedParpadea 1E5A            __end_of_Tpo_init 1DFA                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADCON2 000FC0                      _I2CAck 008E  
              ??_I2CSendAck 0019              ?_MioPreparaReg 0001                      _ADRESH 000FC4  
                    _ADRESL 000FC3                  _Ppal_Ciclo 2564            ___awdiv@dividend 0019  
                    _ANSELA 000F5B                      _ANSELB 000F5C                      _ANSELC 000F5D  
       ??_LedAmarilloInterr 0001                      _EEByte 011E                   ??_Hex2Bcd 0021  
            __CFG_WDTEN$OFF 000000                      i2l3700 193E                      i2l3712 1992  
                    i2l3634 2416                      i2l3722 19BA                      i2l3660 12D6  
                    i2l3670 130E                      i2l3718 19AC                      i2l3680 1346  
                    i2l3666 12FA                      i2l3924 2230                      i2l3676 1328  
                    i2l3684 1362                      _INTCON 000FF2                      i2l3946 1EF0  
                    i2l3938 1EC6                      i2l3858 20D8                      i2l3868 20F2  
                    _RCREG1 000FAE                  _RsRxBuffer 0130                      _OSCCON 000FD3  
                    _Adc2_5 0082                      _Adc5v1 0086                      _TMR2IE 007CE9  
                    _TMR2IF 007CF1                      _SPBRGH 000FB0          __size_of_MioInterr 0052  
                _RsTxBuffer 014E                      _TXREG1 000FAD                      _EscRAM 25B0  
                    _LeeRAM 253C                 _MrNRegEnGpo 009C                      _MrDirV 0041  
                _RsTxTransF 00B6                      _MrInit 0DF2                      _MrSgte 265A  
                    _MonDir 0096                      _MseEsc 1072                      _MrUltV 0043  
                    _MseLee 0B10                   ??__MrSgte 001B                      _PsInit 243E  
                 ??_MstMain 002F                      _Interr 0008                   ??_MstInit 0023  
                    __MrEsc 24C2              __CFG_XINST$OFF 000000                      __MrLee 2498  
                    _RsInit 22CC                      _RsRxCS 0030                      _RsTxCS 00D0  
                 ??_RtcInit 002A                      _RtcEsc 16F8                      _RtcLee 1560  
               _MrAgregaReg 0C8E          __end_of_I2CEscByte 1A6C                      ___lmul 1F6A  
        __end_of_I2CLeeByte 1BEA                   ??___aldiv 002D                   ??___awdiv 001D  
                 ??___awmod 001D          __size_of_Ppal_Init 006A                   ??___lwdiv 001D  
                 ??___lwmod 001D               Delay_ms@delay 0019          __size_of_MstInterr 0006  
 __end_of_LedAmarilloInterr 2252                      _memcpy 21D2               ?_PsTxEnviaCar 0001  
                    clear_0 1FE6                      clear_1 1FF2                      clear_2 2000  
        __end_of_I2CSendAck 22CC            ___awdiv@quotient 001F             ___awmod@divisor 001B  
          ??_Ppal_RsComando 0183             ___awmod@counter 001D          __size_of_Tpo_Ciclo 00C2  
                 ?_I2CStart 0001                   ?_ADC_Init 0001                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8              RsCheckSum@Car1 0023  
               _IntDelay_ms 240C         __end_of_Ppal_Interr 26B2                  _Tpo_interr 246C  
      __CFG_LS48MHZ$SYS24X4 000000                  __accesstop 0060     __end_of__initialization 2006  
    __size_of_PsRxRecibeCar 0004        __end_of_MrInicializa 1D2E                MseEsc@NBytes 002D  
             _MIOAdcDivisor 0114                MseLee@NBytes 002D               ___rparam_used 000001  
    __size_of_PsRxInterrupt 00F8               __end_of_MrAnt 2684               __end_of_MrUlt 26BC  
            __pcstackCOMRAM 0001            ?_MIOAdcAjuste2_5 0001            __CFG_nPWRTEN$OFF 000000  
              __pidataBANK0 26DC        IntLedParpadea@Nveces 0006               ?_MstRsComando 0001  
             __MrEsc@MrNReg 017D               __MrEsc@MrReg1 017F              ??_PsTxEnviaCar 0001  
          ?_MIOAdcLeido2Act 0001               __MrLee@MrNReg 017D                 ?_RsCheckSum 0019  
             __MrLee@MrReg1 017F               ?_RsTxEnviaMsg 0025             ??_MrSeparaFecha 0019  
         __end_of_MioInterr 20B8             _LedAmarilloInit 2696      __size_of_PsTxInterrupt 00B2  
       MrSeparaFecha@MrAmPm 0025                  ??_I2CStart 0019                  ??_ADC_Init 0019  
            PsInit@Baudrate 0019                     ??_MrAnt 0019                 RtcLee@Char1 0029  
                 ?_Delay_ms 0019                     ??_MrUlt 0019             ??_MioPreparaReg 0019  
          IntDelay_ms@delay 0001                 ?_Ppal_Ciclo 0001           __end_of_Ppal_Init 1CC4  
                 ?_MrLeeReg 0001                  __pbssBANK0 0060                  __pbssBANK1 0100  
                 ?_MioCiclo 0001           __end_of_MstInterr 26DC                   ?_MrFormat 0001  
          ??_IntLedParpadea 0008                     ?_EscRAM 0023                     ?_LeeRAM 0023  
                 ?_MstCiclo 0001                   ?_RsInterr 0001                     ?_MrInit 0001  
               Bcd2Hex@Bcd1 001B                     ?_MrSgte 0001                     ?_MseEsc 0029  
         __end_of_Tpo_Ciclo 16F8                     ?_MseLee 0029                 Bcd2Hex@Hex1 001A  
                   ?_PsInit 0019    __size_of__MrPreparaFecha 006A                     ?_Interr 0001  
                   ?__MrEsc 017D                     ?__MrLee 017D                     ?_RsInit 001D  
                   ?_RtcEsc 0001                     ?_RtcLee 0001      __size_of__MrPreparaPor 0034  
         __CFG_PLLSEL$PLL4X 000000              ??_MstRsComando 0187                     ?___lmul 0019  
                ADC_Lee@ind 0005                   ?_Tpo_init 0001               ??_I2CSendNAck 0019  
__size_of_LedAmarilloInterr 0040              ??_RsTxEnviaMsg 0027                     _I2CInit 262E  
                   ?_memcpy 0019                     _BAUDCON 000FB8              ___lmul@product 0021  
                   _ADC_Lee 20B8                     _I2CStop 2514               _PsRxRecibeCar 26E0  
               _Ppal_Interr 26A4           MrAgregaReg@MrTemp 0181               _PsRxInterrupt 1294  
                ??_Delay_ms 001B                     _MIOInit 138C                     _Bcd2Hex 2614  
               ?_Tpo_interr 0001                  ??_MrLeeReg 002F                     _NBytes1 00A2  
                ??_MioCiclo 0183                     _Hex2Bcd 2306                  ??_MrFormat 002F  
          ??__CalculaRegPos 0022         __size_of_RsCheckSum 0060                     _Buffer1 0100  
             _PsTxInterrupt 191A                _MrFecha12Ult 00EF                  ??_MstCiclo 002F  
           __size_of_EscRAM 0026             __size_of_LeeRAM 0028                  ??_RsInterr 0003  
                   __Hparam 0000                     _RsRxCar 0031                     __MrSgte 25D6  
                   _MstMain 214C             __size_of_MrInit 0148                     _RsTxCar 0032  
                   _MstInit 2106                     __Lparam 0000             __size_of_MrSgte 0016  
           __size_of_MseEsc 011E             __size_of_MseLee 017E                     _TempSeg 00BA  
                   _RtcInit 2252             __size_of_PsInit 002E             __size_of_Interr 008C  
           __size_of__MrEsc 002A             __size_of__MrLee 002A                     _TpoDiaF 00BE  
           __size_of_RsInit 003A             __size_of_RtcEsc 00BE             __size_of_RtcLee 00D6  
                   _TpoMinF 00C2                     _TpoSegF 00CE     __end_of_LedAmarilloInit 26A4  
                   ___aldiv 147C                     ___awdiv 1A6C             __size_of___lmul 0056  
                   ___awmod 1BEA           RsTxEnviaMsg@Temp1 0028                     ___lwdiv 2014  
                ??_Tpo_init 002A                     ___lwmod 2190         __size_of_Ppal_Ciclo 0026  
            ?_PsRxRecibeCar 0001             __CFG_STVREN$OFF 000000                     __pcinit 1FC0  
             _RsRxCarDobleF 00AA             __size_of_memcpy 0040                     __ramtop 0800  
                   __ptext0 26C6                     __ptext1 214C                     __ptext2 1C5A  
                   __ptext3 1D98                     __ptext4 2252                     __ptext5 138C  
                   __ptext6 262E                     __ptext7 2644                     __ptext8 2564  
                   __ptext9 1636              ?_PsRxInterrupt 0001                __size_of_abs 0028  
          ___awmod@dividend 0019         __end_of_I2CSendNAck 23A8            ___aldiv@dividend 0025  
             __MrPreparaPor 2340                ?_LedParpadea 001E                 _TpoSegEnDia 012C  
     __size_of_MrInicializa 006A                   EscRAM@Dir 0023        end_of_initialization 2006  
                 LeeRAM@Dir 0023        __end_of_PsTxEnviaCar 26D6               _RsTxCarDobleF 00B2  
                   memcpy@d 001F                     memcpy@n 001D                     memcpy@s 0021  
                 Delay_ms@I 001C               __Lmediumconst 0000          _MioCicloHabilitado 0094  
                 _MIOAdcAct 0033                   _MIOAdcAnt 0060               _MstPpEjecutaF 00FF  
            ?_PsTxInterrupt 0001                   _MIOAdcMin 0074               _RsRxBufferLen 00A8  
         MIOAdcAjuste2_5@k1 0179                ?_MrAgregaReg 0001            ___aldiv@quotient 00F7  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE             RsCheckSum@RsLen 0019         __size_of_Tpo_interr 002C  
         ??__MrPreparaFecha 0023                   _PORTBbits 000F81                   _PORTCbits 000F82  
              _MrInicializa 1CC4               _RsTxBufferLen 00B0              ?__MrPreparaPor 0001  
                 _TRISBbits 000F93                   _TRISCbits 000F94                ?_IntDelay_ms 0001  
         __size_of_I2CStart 0032           __size_of_ADC_Init 0016        __end_of_MstRsComando 1072  
      __end_of_RsTxEnviaMsg 1F6A              __end_of_EscRAM 25D6              __end_of_LeeRAM 2564  
                 MseEsc@Dir 0029                   MseLee@Dir 0029              __end_of_MrInit 0F3A  
            __end_of_MrSgte 2670              __end_of_MseEsc 1190              __end_of_MseLee 0C8E  
            __end_of_PsInit 246C              __end_of_Interr 0094              __end_of__MrEsc 24EC  
            __end_of__MrLee 24C2                   _LedContMs 0191              __end_of_RsInit 2306  
           ??_PsRxRecibeCar 0001              __end_of_RtcEsc 17B6              __end_of_RtcLee 1636  
          ?_LedAmarilloInit 0001              __end_of___lmul 1FC0                ??_RsCheckSum 001D  
           ??_PsRxInterrupt 0001                 _I2CSendNAck 2374                   _MrFecha12 003D  
            __end_of_memcpy 2212                   _EntradaAN 008C         start_initialization 1FC0  
                 _LecturaAN 0090                   _MioInterr 2066                 __end_of_abs 2514  
         I2CEscByte@I2CByte 0025              _MseUltDirLeido 00A0                ??_Ppal_Ciclo 002F  
       RsCheckSum@CheckSum1 001F         RsCheckSum@CheckSum2 001E           __size_of_Delay_ms 0032  
           ??_PsTxInterrupt 0002             __CFG_nLPBOR$OFF 000000                   _PpalRsCMD 00A4  
         __size_of_MrLeeReg 001A          __end_of_RsCheckSum 1E5A                   _Ppal_Init 1C5A  
         __size_of_MioCiclo 01A2           __size_of_MrFormat 00B2                    ??_EscRAM 0027  
                  ??_LeeRAM 0025                   _RsRxIndex 00AC                   _MstInterr 26D6  
                 _RsTxIndex 00B4                    ??_MrInit 002F                    ??_MrSgte 001B  
                  ??_MseEsc 00F5                    ??_MseLee 00F5                    ??_PsInit 001D  
                  ??_Interr 000B                    ??__MrEsc 002F                    ??__MrLee 002F  
                  ??_RsInit 0021                    ??_RtcEsc 0029                    ??_RtcLee 0029  
       __MrPreparaFecha@Ind 0023           __size_of_MstCiclo 0012           __size_of_RsInterr 000A  
                  ??___lmul 0021                   _TpoMsCont 00C4                   _Tpo_Ciclo 1636  
               __pdataBANK0 00FB                    ?_I2CInit 0001                    ??_memcpy 001F  
                  ?_ADC_Lee 0001                    ?_I2CStop 0001          __end_of_Ppal_Ciclo 258A  
             RsCheckSum@Ind 0021           __size_of_Tpo_init 0062                ?_Ppal_Interr 0001  
           ??__MrPreparaPor 0019    __size_of_MIOAdcAjuste2_5 01B4       __end_of_MrSeparaFecha 1294  
               __pbssCOMRAM 002F         RsTxEnviaMsg@RsTxLen 0025               __pcstackBANK0 00F5  
             __pcstackBANK1 0179    __size_of_MIOAdcLeido2Act 0026                    ?_MIOInit 0001  
                ?_MioInterr 0001       __size_of_PsTxEnviaCar 0008                    ?_Bcd2Hex 0001  
     __end_of_MioPreparaReg 1868                ??_Tpo_interr 0001     __size_of_Ppal_RsComando 0722  
      __size_of_LedParpadea 005C                    ?_Hex2Bcd 0001                  ?_Ppal_Init 0001  
                 __pnvBANK0 00FF                   __pnvBANK1 0191                  ?_MstInterr 0001  
                  ?__MrSgte 0019                    ?_MstMain 0001                    ?_MstInit 0001  
          ___lwdiv@dividend 0019                    ?_RtcInit 0001                   __pintcode 0008  
                  ?___aldiv 0025                    ?___awdiv 0019                    ?___awmod 0019  
                ?_Tpo_Ciclo 0001                    ?___lwdiv 0019                    ?___lwmod 0019  
      __size_of_MrAgregaReg 0164                _PsTxEnviaCar 26CE          __end_of_Tpo_interr 2498  
     __size_of_MstRsComando 0138                    _I2CStart 23DA                    _ADC_Init 2644  
            __size_of_MrAnt 0014              __size_of_MrUlt 000A       __size_of_RsTxEnviaMsg 0058  
          ___lwdiv@quotient 001E           I2CLeeByte@I2CByte 001D                 Hex2Bcd@Bcd1 0023  
               Hex2Bcd@Hex1 0024        __size_of_IntDelay_ms 0032             ___aldiv@divisor 0029  
           ___aldiv@counter 00F5             __MrPreparaFecha 1D2E                _RtcFechaHora 00E8  
                  i2u223_40 133E                    i2u256_40 2482                    i2u395_47 241C  
          __CFG_WDTPS$32768 000000                    _SSP1CON1 000FC6           Ppal_RsComando@ind 0185  
              _MstRsComando 0F3A     __size_of_IntLedParpadea 005C            __size_of_I2CInit 0016  
              _RsTxEnviaMsg 1F12            __size_of_ADC_Lee 004E            __size_of_I2CStop 0028  
               EscRAM@Car2P 0025                  _I2CEscByte 19CC                  _I2CLeeByte 1B6E  
         __CFG_CFGPLLEN$OFF 000000                    _Delay_ms 23A8                 ??_MioInterr 0007  
          __size_of_MIOInit 00F0            __size_of_Bcd2Hex 001A           ??_MIOAdcAjuste2_5 002D  
                _I2CSendAck 2290           ___lmul@multiplier 0019                   copy_data0 1FD4  
                  _MrLeeReg 25FA                    _MrHora12 00F3                    _MioCiclo 096E  
                  _MrFormat 1868                    _MrRegAux 016C                    _MrRegPos 007E  
         ??_MIOAdcLeido2Act 0019            __size_of_Hex2Bcd 003A                    _MonRsCMD 0098  
               ??_Ppal_Init 002F                    _Tpo50msF 00BC                 ??_MstInterr 000B  
                  _MstCiclo 2684                    _RsInterr 26BC                    __Hrparam 0000  
                  __Lrparam 0000            __size_of__MrSgte 0024          __CFG_BOREN$SBORDIS 000000  
          __size_of_MstMain 0044            __size_of_MstInit 0046            __size_of_RtcInit 003E  
                  _TpoHoraF 00C0     __size_of__CalculaRegPos 007E               _TpoRtcHoraAnt 00C8  
              LedParpadea@I 0021                 ??_Tpo_Ciclo 002A            __size_of___aldiv 00E4  
                  _Tpo_init 1D98              __MrSgte@MrDirX 0019            __size_of___awdiv 0084  
          __size_of___awmod 0070                ?_I2CSendNAck 0001                 _MIOAdcDelta 006A  
          __size_of___lwdiv 0052                 _MIOAdcLeido 00DE            __size_of___lwmod 0042  
        RsCheckSum@RsBuffer 001B        __size_of_Ppal_Interr 000E             ___lwdiv@divisor 001B  
           ___lwdiv@counter 001D                    __ptext10 096E                    __ptext11 24EC  
                  __ptext20 1E5A                    __ptext12 17B6                    __ptext21 23A8  
                  __ptext13 07BA                    __ptext30 1F12                    __ptext22 2696  
                  __ptext14 1F6A                    __ptext31 1DFA                    __ptext23 2684  
                  __ptext15 147C                    __ptext40 2670                    __ptext32 26B2  
                  __ptext24 0F3A                    __ptext16 258A                    __ptext41 0C8E  
                  __ptext33 265A                    __ptext25 0098                    __ptext17 2106  
                  __ptext50 1560                    __ptext42 25D6                    __ptext34 0DF2  
                  __ptext26 16F8                    __ptext18 22CC                    __ptext51 2514  
                  __ptext43 2340                    __ptext35 25FA                    __ptext27 2306  
                  __ptext19 243E                    __ptext60 25B0                    __ptext52 23DA  
                  __ptext44 1D2E                    __ptext36 2498                    __ptext28 1BEA  
                  __ptext61 21D2                    __ptext53 2374                    __ptext45 24C2  
                  __ptext37 0B10                    __ptext29 1A6C                    __ptext70 26CE  
                  __ptext54 2290                    __ptext46 1AF0                    __ptext38 1868  
                  __ptext71 1294                    __ptext63 26A4                    __ptext55 1B6E  
                  __ptext47 2190                    __ptext39 1CC4                    __ptext72 26E0  
                  __ptext64 246C                    __ptext56 19CC                    __ptext48 2014  
                  __ptext73 2212                    __ptext65 2066                    __ptext57 2614  
                  __ptext49 1072                    __ptext74 1EB6                    __ptext66 20B8  
                  __ptext58 1190                    __ptext75 240C                    __ptext67 26D6  
                  __ptext59 253C                    __ptext68 26BC                    __ptext69 191A  
            RsInit@Baudrate 001D              _Ppal_RsComando 0098     __end_of__MrPreparaFecha 1D98  
           IntLedParpadea@I 0009               __size_of_main 0008           LedParpadea@Nveces 001E  
                  int$flags 0047       __end_of_PsRxRecibeCar 26E4                    main@argc 018C  
                  main@argv 018E             ADC_Lee@AdcCanal 0001       __end_of_PsRxInterrupt 138C  
  __size_of_LedAmarilloInit 000E                 ?_I2CEscByte 0025                 ?_I2CLeeByte 0019  
              _TpoRtcDiaAnt 00C6      __end_of_Ppal_RsComando 07BA                    memcpy@d1 0019  
                  memcpy@s1 001B             MrInicializa@Ind 0019                _TpoRtcMinAnt 00CA  
           I2CEscByte@Index 0027                _TpoRtcSegAnt 00CC                 ?_I2CSendAck 0001  
                  intlevel2 0000           __MrPreparaPor@Ind 0019            ___lwmod@dividend 0019  
     __end_of_PsTxInterrupt 19CC      __CalculaRegPos@MrNReg1 0020                  _MIOSegCont 0092  
        _MstPpInicializadoF 002F             I2CLeeByte@Index 001B        __CFG_CPUDIV$NOCLKDIV 000000  
            _IntLedParpadea 1EB6             _RsRxRecibioMsgF 00AE              _MrInicializado 0230  
           ___lwmod@divisor 001B       __end_of__MrPreparaPor 2374             ___lwmod@counter 001D  
           ?_Ppal_RsComando 0001               ??_LedParpadea 0020                ___aldiv@sign 00F6  
           MstRsComando@Ind 018A            ?__MrPreparaFecha 0001              _MIOTpoDeltaMax 00FB  
            _MIOTpoDeltaMin 00FD          __CFG_FOSC$INTOSCIO 000000      __size_of_MrSeparaFecha 0104  
       __size_of_I2CEscByte 00A0               ??_MrAgregaReg 002F         __size_of_I2CLeeByte 007C  
