

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 21 13:48:34 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.41
    98                           ; Generated 25/01/2017 GMT
    99                           ; 
   100                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F25K50 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataBANK0
   133  0026E0                     __pidataBANK0:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _MIOTpoDeltaMin
   137  0026E0  003C               	dw	60
   138                           
   139                           ;initializer for _MIOTpoDeltaMax
   140  0026E2  00B4               	dw	180
   141                           
   142                           	psect	nvBANK0
   143  0000FF                     __pnvBANK0:
   144                           	opt stack 0
   145  0000FF                     _MstPpEjecutaF:
   146                           	opt stack 0
   147  0000FF                     	ds	1
   148                           
   149                           	psect	nvBANK1
   150  000191                     __pnvBANK1:
   151                           	opt stack 0
   152  000191                     _LedContMs:
   153                           	opt stack 0
   154  000191                     	ds	2
   155  0000                     _ANSELC	set	3933
   156  0000                     _ANSELB	set	3932
   157  0000                     _ANSELA	set	3931
   158  0000                     _ADRESL	set	4035
   159  0000                     _ADRESH	set	4036
   160  0000                     _ADCON0	set	4034
   161  0000                     _ADCON1	set	4033
   162  0000                     _ADCON2	set	4032
   163  0000                     _TRISA	set	3986
   164  0000                     _TRISBbits	set	3987
   165  0000                     _PORTBbits	set	3969
   166  0000                     _SSP1CON1	set	4038
   167  0000                     _T2CON	set	4026
   168  0000                     _PR2	set	4027
   169  0000                     _OSCCON	set	4051
   170  0000                     _TRISB	set	3987
   171  0000                     _PORTB	set	3969
   172  0000                     _TXSTA	set	4012
   173  0000                     _RCSTA	set	4011
   174  0000                     _BAUDCON	set	4024
   175  0000                     _SPBRGH	set	4016
   176  0000                     _SPBRG	set	4015
   177  0000                     _TXREG1	set	4013
   178  0000                     _RCREG1	set	4014
   179  0000                     _INTCON	set	4082
   180  0000                     _PORTCbits	set	3970
   181  0000                     _TRISCbits	set	3988
   182  0000                     _TMR2IF	set	31985
   183  0000                     _GIE	set	32663
   184  0000                     _GO	set	32273
   185  0000                     _TMR2IE	set	31977
   186  0000                     _TXIF	set	31988
   187  0000                     _RCIF	set	31989
   188                           
   189                           ; #config settings
   190  0000                     
   191                           	psect	cinit
   192  001FC4                     __pcinit:
   193                           	opt stack 0
   194  001FC4                     start_initialization:
   195                           	opt stack 0
   196  001FC4                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Initialize objects allocated to BANK0 (4 bytes)
   200                           ; load TBLPTR registers with __pidataBANK0
   201  001FC4  0EE0               	movlw	low __pidataBANK0
   202  001FC6  6EF6               	movwf	tblptrl,c
   203  001FC8  0E26               	movlw	high __pidataBANK0
   204  001FCA  6EF7               	movwf	tblptrh,c
   205  001FCC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   206  001FCE  6EF8               	movwf	tblptru,c
   207  001FD0  EE00  F0FB         	lfsr	0,__pdataBANK0
   208  001FD4  EE10 F004          	lfsr	1,4
   209  001FD8                     copy_data0:
   210  001FD8  0009               	tblrd		*+
   211  001FDA  CFF5 FFEE          	movff	tablat,postinc0
   212  001FDE  50E5               	movf	postdec1,w,c
   213  001FE0  50E1               	movf	fsr1l,w,c
   214  001FE2  E1FA               	bnz	copy_data0
   215                           
   216                           ; Clear objects allocated to BANK1 (121 bytes)
   217  001FE4  EE01  F000         	lfsr	0,__pbssBANK1
   218  001FE8  0E79               	movlw	121
   219  001FEA                     clear_0:
   220  001FEA  6AEE               	clrf	postinc0,c
   221  001FEC  06E8               	decf	wreg,f,c
   222  001FEE  E1FD               	bnz	clear_0
   223                           
   224                           ; Clear objects allocated to BANK0 (149 bytes)
   225  001FF0  EE00  F060         	lfsr	0,__pbssBANK0
   226  001FF4  0E95               	movlw	149
   227  001FF6                     clear_1:
   228  001FF6  6AEE               	clrf	postinc0,c
   229  001FF8  06E8               	decf	wreg,f,c
   230  001FFA  E1FD               	bnz	clear_1
   231                           
   232                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   233  001FFC  6A46               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   234                           
   235                           ; Clear objects allocated to COMRAM (23 bytes)
   236  001FFE  EE00  F02F         	lfsr	0,__pbssCOMRAM
   237  002002  0E17               	movlw	23
   238  002004                     clear_2:
   239  002004  6AEE               	clrf	postinc0,c
   240  002006  06E8               	decf	wreg,f,c
   241  002008  E1FD               	bnz	clear_2
   242  00200A                     end_of_initialization:
   243                           	opt stack 0
   244  00200A                     __end_of__initialization:
   245                           	opt stack 0
   246  00200A  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247  00200C  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248  00200E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   249  002010  6EF8               	movwf	tblptru,c
   250  002012  0100               	movlb	0
   251  002014  EF65  F013         	goto	_main	;jump to C main() function
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	bitbssCOMRAM
   262  000230                     __pbitbssCOMRAM:
   263                           	opt stack 0
   264  000230                     _MrInicializado:
   265                           	opt stack 0
   266  000230                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssCOMRAM
   277  00002F                     __pbssCOMRAM:
   278                           	opt stack 0
   279  00002F                     _MstPpInicializadoF:
   280                           	opt stack 0
   281  00002F                     	ds	1
   282  000030                     _RsRxCS:
   283                           	opt stack 0
   284  000030                     	ds	1
   285  000031                     _RsTxCar:
   286                           	opt stack 0
   287  000031                     	ds	1
   288  000032                     _RsRxCar:
   289                           	opt stack 0
   290  000032                     	ds	1
   291  000033                     _MIOAdcAct:
   292                           	opt stack 0
   293  000033                     	ds	10
   294  00003D                     _MrFecha12:
   295                           	opt stack 0
   296  00003D                     	ds	4
   297  000041                     _MrDirV:
   298                           	opt stack 0
   299  000041                     	ds	2
   300  000043                     _MrUltV:
   301                           	opt stack 0
   302  000043                     	ds	2
   303  000045                     _Car1:
   304                           	opt stack 0
   305  000045                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	bssBANK0
   316  000060                     __pbssBANK0:
   317                           	opt stack 0
   318  000060                     _MIOAdcDelta:
   319                           	opt stack 0
   320  000060                     	ds	10
   321  00006A                     _MIOAdcMin:
   322                           	opt stack 0
   323  00006A                     	ds	10
   324  000074                     _MIOAdcAnt:
   325                           	opt stack 0
   326  000074                     	ds	10
   327  00007E                     _MrRegPos:
   328                           	opt stack 0
   329  00007E                     	ds	4
   330  000082                     _TempSeg:
   331                           	opt stack 0
   332  000082                     	ds	2
   333  000084                     _MIOSegCont:
   334                           	opt stack 0
   335  000084                     	ds	2
   336  000086                     _Adc5v1:
   337                           	opt stack 0
   338  000086                     	ds	2
   339  000088                     _Adc5v:
   340                           	opt stack 0
   341  000088                     	ds	2
   342  00008A                     _Adc2_5:
   343                           	opt stack 0
   344  00008A                     	ds	2
   345  00008C                     _TpoRtcDiaAnt:
   346                           	opt stack 0
   347  00008C                     	ds	2
   348  00008E                     _TpoRtcHoraAnt:
   349                           	opt stack 0
   350  00008E                     	ds	2
   351  000090                     _TpoRtcMinAnt:
   352                           	opt stack 0
   353  000090                     	ds	2
   354  000092                     _TpoRtcSegAnt:
   355                           	opt stack 0
   356  000092                     	ds	2
   357  000094                     _TpoDiaF:
   358                           	opt stack 0
   359  000094                     	ds	2
   360  000096                     _TpoHoraF:
   361                           	opt stack 0
   362  000096                     	ds	2
   363  000098                     _TpoMinF:
   364                           	opt stack 0
   365  000098                     	ds	2
   366  00009A                     _TpoSegF:
   367                           	opt stack 0
   368  00009A                     	ds	2
   369  00009C                     _Tpo50msF:
   370                           	opt stack 0
   371  00009C                     	ds	2
   372  00009E                     _TpoMsCont:
   373                           	opt stack 0
   374  00009E                     	ds	2
   375  0000A0                     _MrNRegEnGpo:
   376                           	opt stack 0
   377  0000A0                     	ds	2
   378  0000A2                     _MrGpo:
   379                           	opt stack 0
   380  0000A2                     	ds	2
   381  0000A4                     _MrRegsXGpo:
   382                           	opt stack 0
   383  0000A4                     	ds	2
   384  0000A6                     _MseUltDirLeido:
   385                           	opt stack 0
   386  0000A6                     	ds	2
   387  0000A8                     _I2CAck:
   388                           	opt stack 0
   389  0000A8                     	ds	2
   390  0000AA                     _MonRsCMD:
   391                           	opt stack 0
   392  0000AA                     	ds	2
   393  0000AC                     _NBytes1:
   394                           	opt stack 0
   395  0000AC                     	ds	2
   396  0000AE                     _Dir1:
   397                           	opt stack 0
   398  0000AE                     	ds	2
   399  0000B0                     _Ptr1:
   400                           	opt stack 0
   401  0000B0                     	ds	2
   402  0000B2                     _EntradaAN:
   403                           	opt stack 0
   404  0000B2                     	ds	2
   405  0000B4                     _LecturaAN:
   406                           	opt stack 0
   407  0000B4                     	ds	2
   408  0000B6                     _Dummy:
   409                           	opt stack 0
   410  0000B6                     	ds	2
   411  0000B8                     _MonDir:
   412                           	opt stack 0
   413  0000B8                     	ds	2
   414  0000BA                     _RsTxCarDobleF:
   415                           	opt stack 0
   416  0000BA                     	ds	2
   417  0000BC                     _RsTxTransmitiendoF:
   418                           	opt stack 0
   419  0000BC                     	ds	2
   420  0000BE                     _RsRxCarDobleF:
   421                           	opt stack 0
   422  0000BE                     	ds	2
   423  0000C0                     _RsRxRecibioMsgF:
   424                           	opt stack 0
   425  0000C0                     	ds	2
   426  0000C2                     _RsTxTransF:
   427                           	opt stack 0
   428  0000C2                     	ds	2
   429  0000C4                     _RsTxIndex:
   430                           	opt stack 0
   431  0000C4                     	ds	2
   432  0000C6                     _RsRxIndex:
   433                           	opt stack 0
   434  0000C6                     	ds	2
   435  0000C8                     _RsTxBufferLen:
   436                           	opt stack 0
   437  0000C8                     	ds	2
   438  0000CA                     _RsRxBufferLen:
   439                           	opt stack 0
   440  0000CA                     	ds	2
   441  0000CC                     _MioCicloHabilitado:
   442                           	opt stack 0
   443  0000CC                     	ds	2
   444  0000CE                     _PpalRsCMD:
   445                           	opt stack 0
   446  0000CE                     	ds	2
   447  0000D0                     _RsTxCS:
   448                           	opt stack 0
   449  0000D0                     	ds	1
   450  0000D1                     _MrReg:
   451                           	opt stack 0
   452  0000D1                     	ds	13
   453  0000DE                     _MIOAdcLeido:
   454                           	opt stack 0
   455  0000DE                     	ds	10
   456  0000E8                     _RtcFechaHora:
   457                           	opt stack 0
   458  0000E8                     	ds	7
   459  0000EF                     _MrFecha12Ult:
   460                           	opt stack 0
   461  0000EF                     	ds	4
   462  0000F3                     _MrHora12:
   463                           	opt stack 0
   464  0000F3                     	ds	2
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           
   474                           	psect	dataBANK0
   475  0000FB                     __pdataBANK0:
   476                           	opt stack 0
   477  0000FB                     _MIOTpoDeltaMin:
   478                           	opt stack 0
   479  0000FB                     	ds	2
   480  0000FD                     _MIOTpoDeltaMax:
   481                           	opt stack 0
   482  0000FD                     	ds	2
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	bssBANK1
   493  000100                     __pbssBANK1:
   494                           	opt stack 0
   495  000100                     _Buffer1:
   496                           	opt stack 0
   497  000100                     	ds	20
   498  000114                     _MIOAdcDivisor:
   499                           	opt stack 0
   500  000114                     	ds	10
   501  00011E                     _EEByte:
   502                           	opt stack 0
   503  00011E                     	ds	7
   504  000125                     _Hora1:
   505                           	opt stack 0
   506  000125                     	ds	7
   507  00012C                     _TpoSegEnDia:
   508                           	opt stack 0
   509  00012C                     	ds	4
   510  000130                     _RsTxBuffer:
   511                           	opt stack 0
   512  000130                     	ds	30
   513  00014E                     _RsRxBuffer:
   514                           	opt stack 0
   515  00014E                     	ds	30
   516  00016C                     _MrRegAux:
   517                           	opt stack 0
   518  00016C                     	ds	13
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	cstackBANK1
   529  000179                     __pcstackBANK1:
   530                           	opt stack 0
   531  000179                     MseEsc@Index:
   532                           	opt stack 0
   533  000179                     MseLee@Index:
   534                           	opt stack 0
   535  000179                     MIOAdcAjuste2_5@k1:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x0
   539  000179                     	ds	4
   540  00017D                     __MrLee@MrNReg:
   541                           	opt stack 0
   542  00017D                     __MrEsc@MrNReg:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x4
   546  00017D                     	ds	2
   547  00017F                     __MrLee@MrReg1:
   548                           	opt stack 0
   549  00017F                     __MrEsc@MrReg1:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x6
   553  00017F                     	ds	2
   554  000181                     MrAgregaReg@MrTemp:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x8
   558  000181                     	ds	2
   559  000183                     ??_Ppal_RsComando:
   560  000183                     ??_MioCiclo:
   561                           
   562                           ; 1 bytes @ 0xA
   563  000183                     	ds	2
   564  000185                     Ppal_RsComando@ind:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0xC
   568  000185                     	ds	2
   569  000187                     ??_MstRsComando:
   570                           
   571                           ; 1 bytes @ 0xE
   572  000187                     	ds	3
   573  00018A                     MstRsComando@Ind:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x11
   577  00018A                     	ds	2
   578  00018C                     
   579                           ; 2 bytes @ 0x13
   580  00018C                     	ds	2
   581  00018E                     
   582                           ; 3 bytes @ 0x15
   583  00018E                     	ds	3
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	cstackBANK0
   594  0000F5                     __pcstackBANK0:
   595                           	opt stack 0
   596  0000F5                     ??_MseEsc:
   597  0000F5                     ??_MseLee:
   598  0000F5                     ___aldiv@counter:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x0
   602  0000F5                     	ds	1
   603  0000F6                     ___aldiv@sign:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x1
   607  0000F6                     	ds	1
   608  0000F7                     ___aldiv@quotient:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x2
   612  0000F7                     	ds	4
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	cstackCOMRAM
   623  000001                     __pcstackCOMRAM:
   624                           	opt stack 0
   625  000001                     ?_ADC_Lee:
   626                           	opt stack 0
   627  000001                     PsTxEnviaCar@car:
   628                           	opt stack 0
   629  000001                     IntDelay_ms@delay:
   630                           	opt stack 0
   631  000001                     ADC_Lee@AdcCanal:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x0
   635  000001                     	ds	1
   636  000002                     ??_PsTxInterrupt:
   637                           
   638                           ; 1 bytes @ 0x1
   639  000002                     	ds	1
   640  000003                     ??_IntDelay_ms:
   641  000003                     ??_ADC_Lee:
   642                           
   643                           ; 1 bytes @ 0x2
   644  000003                     	ds	1
   645  000004                     IntDelay_ms@I:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x3
   649  000004                     	ds	1
   650  000005                     ADC_Lee@ind:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x4
   654  000005                     	ds	1
   655  000006                     IntLedParpadea@Nveces:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x5
   659  000006                     	ds	1
   660  000007                     
   661                           ; 1 bytes @ 0x6
   662  000007                     	ds	1
   663  000008                     ??_IntLedParpadea:
   664                           
   665                           ; 1 bytes @ 0x7
   666  000008                     	ds	1
   667  000009                     IntLedParpadea@I:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x8
   671  000009                     	ds	2
   672  00000B                     ??_Interr:
   673                           
   674                           ; 1 bytes @ 0xA
   675  00000B                     	ds	14
   676  000019                     ??_MrSeparaFecha:
   677  000019                     ??_Bcd2Hex:
   678  000019                     ??_MioPreparaReg:
   679  000019                     ?__MrSgte:
   680                           	opt stack 0
   681  000019                     ?_abs:
   682                           	opt stack 0
   683  000019                     ?_I2CLeeByte:
   684                           	opt stack 0
   685  000019                     ?___awdiv:
   686                           	opt stack 0
   687  000019                     ?___awmod:
   688                           	opt stack 0
   689  000019                     ?___lwdiv:
   690                           	opt stack 0
   691  000019                     ?___lwmod:
   692                           	opt stack 0
   693  000019                     ?___lmul:
   694                           	opt stack 0
   695  000019                     Delay_ms@delay:
   696                           	opt stack 0
   697  000019                     RsCheckSum@RsLen:
   698                           	opt stack 0
   699  000019                     MrInicializa@Ind:
   700                           	opt stack 0
   701  000019                     __MrPreparaPor@Ind:
   702                           	opt stack 0
   703  000019                     __MrSgte@MrDirX:
   704                           	opt stack 0
   705  000019                     abs@a:
   706                           	opt stack 0
   707  000019                     ___awdiv@dividend:
   708                           	opt stack 0
   709  000019                     ___awmod@dividend:
   710                           	opt stack 0
   711  000019                     ___lwdiv@dividend:
   712                           	opt stack 0
   713  000019                     ___lwmod@dividend:
   714                           	opt stack 0
   715  000019                     memcpy@d1:
   716                           	opt stack 0
   717  000019                     PsInit@Baudrate:
   718                           	opt stack 0
   719  000019                     ___lmul@multiplier:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x18
   723  000019                     	ds	1
   724  00001A                     Bcd2Hex@Hex1:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x19
   728  00001A                     	ds	1
   729  00001B                     ??_Delay_ms:
   730  00001B                     ??_abs:
   731  00001B                     Bcd2Hex@Bcd1:
   732                           	opt stack 0
   733  00001B                     RsCheckSum@RsBuffer:
   734                           	opt stack 0
   735  00001B                     I2CLeeByte@Index:
   736                           	opt stack 0
   737  00001B                     ___awdiv@divisor:
   738                           	opt stack 0
   739  00001B                     ___awmod@divisor:
   740                           	opt stack 0
   741  00001B                     ___lwdiv@divisor:
   742                           	opt stack 0
   743  00001B                     ___lwmod@divisor:
   744                           	opt stack 0
   745  00001B                     memcpy@s1:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x1A
   749  00001B                     	ds	1
   750  00001C                     Delay_ms@I:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x1B
   754  00001C                     	ds	1
   755  00001D                     ??_RsCheckSum:
   756  00001D                     ___awdiv@counter:
   757                           	opt stack 0
   758  00001D                     ___awmod@counter:
   759                           	opt stack 0
   760  00001D                     ___lwdiv@counter:
   761                           	opt stack 0
   762  00001D                     ___lwmod@counter:
   763                           	opt stack 0
   764  00001D                     I2CLeeByte@I2CByte:
   765                           	opt stack 0
   766  00001D                     memcpy@n:
   767                           	opt stack 0
   768  00001D                     RsInit@Baudrate:
   769                           	opt stack 0
   770  00001D                     ___lmul@multiplicand:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x1C
   774  00001D                     	ds	1
   775  00001E                     RsCheckSum@CheckSum2:
   776                           	opt stack 0
   777  00001E                     ___awdiv@sign:
   778                           	opt stack 0
   779  00001E                     ___awmod@sign:
   780                           	opt stack 0
   781  00001E                     LedParpadea@Nveces:
   782                           	opt stack 0
   783  00001E                     ___lwdiv@quotient:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1D
   787  00001E                     	ds	1
   788  00001F                     RsCheckSum@CheckSum1:
   789                           	opt stack 0
   790  00001F                     ___awdiv@quotient:
   791                           	opt stack 0
   792  00001F                     memcpy@d:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x1E
   796  00001F                     	ds	1
   797  000020                     ??_LedParpadea:
   798  000020                     __CalculaRegPos@MrNReg1:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x1F
   802  000020                     	ds	1
   803  000021                     ??_Hex2Bcd:
   804  000021                     LedParpadea@I:
   805                           	opt stack 0
   806  000021                     RsCheckSum@Ind:
   807                           	opt stack 0
   808  000021                     memcpy@s:
   809                           	opt stack 0
   810  000021                     ___lmul@product:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x20
   814  000021                     	ds	1
   815  000022                     ??__CalculaRegPos:
   816                           
   817                           ; 1 bytes @ 0x21
   818  000022                     	ds	1
   819  000023                     Hex2Bcd@Bcd1:
   820                           	opt stack 0
   821  000023                     RsCheckSum@Car1:
   822                           	opt stack 0
   823  000023                     LeeRAM@Dir:
   824                           	opt stack 0
   825  000023                     EscRAM@Dir:
   826                           	opt stack 0
   827  000023                     __MrPreparaFecha@Ind:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x22
   831  000023                     	ds	1
   832  000024                     Hex2Bcd@Hex1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x23
   836  000024                     	ds	1
   837  000025                     ?___aldiv:
   838                           	opt stack 0
   839  000025                     RsTxEnviaMsg@RsTxLen:
   840                           	opt stack 0
   841  000025                     EscRAM@Car2P:
   842                           	opt stack 0
   843  000025                     I2CEscByte@I2CByte:
   844                           	opt stack 0
   845  000025                     MrSeparaFecha@MrAmPm:
   846                           	opt stack 0
   847  000025                     ___aldiv@dividend:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x24
   851  000025                     	ds	2
   852  000027                     ??_RsTxEnviaMsg:
   853  000027                     I2CEscByte@Index:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x26
   857  000027                     	ds	1
   858  000028                     RsTxEnviaMsg@Temp1:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x27
   862  000028                     	ds	1
   863  000029                     ??_RtcEsc:
   864  000029                     RtcLee@Char1:
   865                           	opt stack 0
   866  000029                     MseEsc@Dir:
   867                           	opt stack 0
   868  000029                     MseLee@Dir:
   869                           	opt stack 0
   870  000029                     ___aldiv@divisor:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x28
   874  000029                     	ds	1
   875  00002A                     ??_Tpo_Ciclo:
   876                           
   877                           ; 1 bytes @ 0x29
   878  00002A                     	ds	1
   879  00002B                     MseEsc@Datos:
   880                           	opt stack 0
   881  00002B                     MseLee@Datos:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x2A
   885  00002B                     	ds	2
   886  00002D                     MseEsc@NBytes:
   887                           	opt stack 0
   888  00002D                     MseLee@NBytes:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x2C
   892  00002D                     	ds	2
   893  00002F                     tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1l	equ	0xFE1
   901                           
   902                           ; 1 bytes @ 0x2E
   903 ;;
   904 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   905 ;;
   906 ;; *************** function _main *****************
   907 ;; Defined at:
   908 ;;		line 391 in file "ModIO24.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  argc            2   19[BANK1 ] int 
   911 ;;  argv            3   21[BANK1 ] PTR PTR unsigned char 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  2   19[BANK1 ] int 
   916 ;; Registers used:
   917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   923 ;;      Params:         0       0       5       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0       0       0
   926 ;;      Totals:         0       0       5       0       0       0       0       0       0
   927 ;;Total ram usage:        5 bytes
   928 ;; Hardware stack levels required when called:   14
   929 ;; This function calls:
   930 ;;		_MstMain
   931 ;; This function is called by:
   932 ;;		Startup code after reset
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text0
   937  0026CA                     __ptext0:
   938                           	opt stack 0
   939  0026CA                     _main:
   940                           	opt stack 17
   941                           
   942                           ;ModIO24.c: 392: MstMain();
   943                           
   944                           ;incstack = 0
   945  0026CA  ECA8  F010         	call	_MstMain	;wreg free
   946  0026CE  EF4A  F000         	goto	start
   947  0026D2                     __end_of_main:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postdec1	equ	0xFE5
   956                           fsr1l	equ	0xFE1
   957                           
   958 ;; *************** function _MstMain *****************
   959 ;; Defined at:
   960 ;;		line 78 in file "Maestro21.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  2  294[None  ] int 
   967 ;; Registers used:
   968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       0       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       0       0       0       0       0       0       0       0
   977 ;;      Totals:         0       0       0       0       0       0       0       0       0
   978 ;;Total ram usage:        0 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:   13
   981 ;; This function calls:
   982 ;;		_MstCiclo
   983 ;;		_MstInit
   984 ;;		_Ppal_Ciclo
   985 ;;		_Ppal_Init
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text1
   992  002150                     __ptext1:
   993                           	opt stack 0
   994  002150                     _MstMain:
   995                           	opt stack 17
   996                           
   997                           ;Maestro21.c: 80: MstPpEjecutaF = 1;
   998                           
   999                           ;incstack = 0
  1000  002150  0E01               	movlw	1
  1001  002152  0100               	movlb	0	; () banked
  1002  002154  6FFF               	movwf	_MstPpEjecutaF& (0+255),b
  1003                           
  1004                           ;Maestro21.c: 81: MstPpInicializadoF = 0;
  1005  002156  0E00               	movlw	0
  1006  002158  6E2F               	movwf	_MstPpInicializadoF,c
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;Maestro21.c: 82: MstInit();
  1010  00215A  EC85  F010         	call	_MstInit	;wreg free
  1011                           
  1012                           ;Maestro21.c: 83: if ( (MstPpEjecutaF == 1) && (MstPpInicializadoF == 0) ){
  1013  00215E  0100               	movlb	0	; () banked
  1014  002160  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
  1015  002162  A4D8               	btfss	status,2,c
  1016  002164  D007               	goto	l5222
  1017                           
  1018                           ; BSR set to: 0
  1019  002166  502F               	movf	_MstPpInicializadoF,w,c
  1020  002168  A4D8               	btfss	status,2,c
  1021  00216A  D004               	goto	l5222
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;Maestro21.c: 84: Ppal_Init();
  1025  00216C  EC2F  F00E         	call	_Ppal_Init	;wreg free
  1026                           
  1027                           ;Maestro21.c: 85: MstPpInicializadoF = 1;
  1028  002170  0E01               	movlw	1
  1029  002172  6E2F               	movwf	_MstPpInicializadoF,c
  1030  002174                     l5222:
  1031                           
  1032                           ;Maestro21.c: 88: MstCiclo();
  1033  002174  EC44  F013         	call	_MstCiclo	;wreg free
  1034                           
  1035                           ;Maestro21.c: 89: if (MstPpEjecutaF == 1) {
  1036  002178  0100               	movlb	0	; () banked
  1037  00217A  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
  1038  00217C  A4D8               	btfss	status,2,c
  1039  00217E  D7FA               	goto	l5222
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;Maestro21.c: 90: if (MstPpInicializadoF == 0) {
  1043  002180  502F               	movf	_MstPpInicializadoF,w,c
  1044  002182  A4D8               	btfss	status,2,c
  1045  002184  D004               	goto	l5232
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;Maestro21.c: 91: Ppal_Init();
  1049  002186  EC2F  F00E         	call	_Ppal_Init	;wreg free
  1050                           
  1051                           ;Maestro21.c: 92: MstPpInicializadoF = 1;
  1052  00218A  0E01               	movlw	1
  1053  00218C  6E2F               	movwf	_MstPpInicializadoF,c
  1054  00218E                     l5232:
  1055                           
  1056                           ;Maestro21.c: 93: }
  1057                           ;Maestro21.c: 94: Ppal_Ciclo ();
  1058  00218E  ECB4  F012         	call	_Ppal_Ciclo	;wreg free
  1059  002192  D7F0               	goto	l5222
  1060  002194                     __end_of_MstMain:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           status	equ	0xFD8
  1071                           
  1072 ;; *************** function _Ppal_Init *****************
  1073 ;; Defined at:
  1074 ;;		line 103 in file "ModIO24.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1088 ;;      Params:         0       0       0       0       0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:   10
  1095 ;; This function calls:
  1096 ;;		_ADC_Init
  1097 ;;		_Delay_ms
  1098 ;;		_I2CInit
  1099 ;;		_MIOInit
  1100 ;;		_MrInicializa
  1101 ;;		_MrInit
  1102 ;;		_RsTxEnviaMsg
  1103 ;;		_RtcInit
  1104 ;;		_Tpo_init
  1105 ;; This function is called by:
  1106 ;;		_MstMain
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text2
  1111  001C5E                     __ptext2:
  1112                           	opt stack 0
  1113  001C5E                     _Ppal_Init:
  1114                           	opt stack 19
  1115                           
  1116                           ;ModIO24.c: 105: Delay_ms(100);
  1117                           
  1118                           ;incstack = 0
  1119  001C5E  0E00               	movlw	0
  1120  001C60  6E1A               	movwf	Delay_ms@delay+1,c
  1121  001C62  0E64               	movlw	100
  1122  001C64  6E19               	movwf	Delay_ms@delay,c
  1123  001C66  ECD6  F011         	call	_Delay_ms	;wreg free
  1124                           
  1125                           ;ModIO24.c: 107: RsTxBuffer [0] = 02;
  1126  001C6A  0E02               	movlw	2
  1127  001C6C  0101               	movlb	1	; () banked
  1128  001C6E  6F30               	movwf	_RsTxBuffer& (0+255),b
  1129                           
  1130                           ; BSR set to: 1
  1131                           ;ModIO24.c: 108: RsTxBuffer [1] = 'h';
  1132  001C70  0E68               	movlw	104
  1133  001C72  0101               	movlb	1	; () banked
  1134  001C74  6F31               	movwf	(_RsTxBuffer+1)& (0+255),b
  1135                           
  1136                           ; BSR set to: 1
  1137                           ;ModIO24.c: 109: RsTxBuffer [2] = 'p';
  1138  001C76  0E70               	movlw	112
  1139  001C78  0101               	movlb	1	; () banked
  1140  001C7A  6F32               	movwf	(_RsTxBuffer+2)& (0+255),b
  1141                           
  1142                           ; BSR set to: 1
  1143                           ;ModIO24.c: 110: RsTxBuffer [3] = 'j';
  1144  001C7C  0E6A               	movlw	106
  1145  001C7E  0101               	movlb	1	; () banked
  1146  001C80  6F33               	movwf	(_RsTxBuffer+3)& (0+255),b
  1147                           
  1148                           ; BSR set to: 1
  1149                           ;ModIO24.c: 111: RsTxBuffer [4] = 'n';
  1150  001C82  0E6E               	movlw	110
  1151  001C84  0101               	movlb	1	; () banked
  1152  001C86  6F34               	movwf	(_RsTxBuffer+4)& (0+255),b
  1153                           
  1154                           ; BSR set to: 1
  1155                           ;ModIO24.c: 112: RsTxEnviaMsg(3);
  1156  001C88  0E00               	movlw	0
  1157  001C8A  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  1158  001C8C  0E03               	movlw	3
  1159  001C8E  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  1160  001C90  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  1161                           
  1162                           ;ModIO24.c: 113: Delay_ms(1500);
  1163  001C94  0E05               	movlw	5
  1164  001C96  6E1A               	movwf	Delay_ms@delay+1,c
  1165  001C98  0EDC               	movlw	220
  1166  001C9A  6E19               	movwf	Delay_ms@delay,c
  1167  001C9C  ECD6  F011         	call	_Delay_ms	;wreg free
  1168                           
  1169                           ;ModIO24.c: 115: Tpo_init();
  1170  001CA0  ECCE  F00E         	call	_Tpo_init	;wreg free
  1171                           
  1172                           ;ModIO24.c: 116: ADC_Init();
  1173  001CA4  EC24  F013         	call	_ADC_Init	;wreg free
  1174                           
  1175                           ;ModIO24.c: 117: I2CInit();
  1176  001CA8  EC19  F013         	call	_I2CInit	;wreg free
  1177                           
  1178                           ;ModIO24.c: 118: RtcInit();
  1179  001CAC  EC2B  F011         	call	_RtcInit	;wreg free
  1180                           
  1181                           ;ModIO24.c: 119: MrInicializa();
  1182  001CB0  EC64  F00E         	call	_MrInicializa	;wreg free
  1183                           
  1184                           ;ModIO24.c: 120: MrInit();
  1185  001CB4  ECF9  F006         	call	_MrInit	;wreg free
  1186                           
  1187                           ;ModIO24.c: 121: MIOInit();
  1188  001CB8  ECC6  F009         	call	_MIOInit	;wreg free
  1189                           
  1190                           ;ModIO24.c: 126: TempSeg=0;
  1191  001CBC  0E00               	movlw	0
  1192  001CBE  0100               	movlb	0	; () banked
  1193  001CC0  6F83               	movwf	(_TempSeg+1)& (0+255),b
  1194  001CC2  0E00               	movlw	0
  1195  001CC4  6F82               	movwf	_TempSeg& (0+255),b
  1196                           
  1197                           ; BSR set to: 0
  1198  001CC6  0012               	return		;funcret
  1199  001CC8                     __end_of_Ppal_Init:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _Tpo_init *****************
  1212 ;; Defined at:
  1213 ;;		line 14 in file "RutinaTpo20.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1227 ;;      Params:         0       0       0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1230 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1231 ;;Total ram usage:        0 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    7
  1234 ;; This function calls:
  1235 ;;		_RtcLee
  1236 ;; This function is called by:
  1237 ;;		_Ppal_Init
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text3
  1242  001D9C                     __ptext3:
  1243                           	opt stack 0
  1244  001D9C                     _Tpo_init:
  1245                           	opt stack 21
  1246                           
  1247                           ;RutinaTpo20.c: 15: TpoMsCont = 0;
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;incstack = 0
  1251  001D9C  0E00               	movlw	0
  1252  001D9E  0100               	movlb	0	; () banked
  1253  001DA0  6F9F               	movwf	(_TpoMsCont+1)& (0+255),b
  1254  001DA2  0E00               	movlw	0
  1255  001DA4  6F9E               	movwf	_TpoMsCont& (0+255),b
  1256                           
  1257                           ;RutinaTpo20.c: 16: Tpo50msF = 0;
  1258  001DA6  0E00               	movlw	0
  1259  001DA8  0100               	movlb	0	; () banked
  1260  001DAA  6F9D               	movwf	(_Tpo50msF+1)& (0+255),b
  1261  001DAC  0E00               	movlw	0
  1262  001DAE  6F9C               	movwf	_Tpo50msF& (0+255),b
  1263                           
  1264                           ;RutinaTpo20.c: 17: TpoSegF = 0;
  1265  001DB0  0E00               	movlw	0
  1266  001DB2  0100               	movlb	0	; () banked
  1267  001DB4  6F9B               	movwf	(_TpoSegF+1)& (0+255),b
  1268  001DB6  0E00               	movlw	0
  1269  001DB8  6F9A               	movwf	_TpoSegF& (0+255),b
  1270                           
  1271                           ;RutinaTpo20.c: 18: TpoMinF = 0;
  1272  001DBA  0E00               	movlw	0
  1273  001DBC  0100               	movlb	0	; () banked
  1274  001DBE  6F99               	movwf	(_TpoMinF+1)& (0+255),b
  1275  001DC0  0E00               	movlw	0
  1276  001DC2  6F98               	movwf	_TpoMinF& (0+255),b
  1277                           
  1278                           ;RutinaTpo20.c: 19: TpoHoraF = 0;
  1279  001DC4  0E00               	movlw	0
  1280  001DC6  0100               	movlb	0	; () banked
  1281  001DC8  6F97               	movwf	(_TpoHoraF+1)& (0+255),b
  1282  001DCA  0E00               	movlw	0
  1283  001DCC  6F96               	movwf	_TpoHoraF& (0+255),b
  1284                           
  1285                           ;RutinaTpo20.c: 20: TpoDiaF = 0;
  1286  001DCE  0E00               	movlw	0
  1287  001DD0  0100               	movlb	0	; () banked
  1288  001DD2  6F95               	movwf	(_TpoDiaF+1)& (0+255),b
  1289  001DD4  0E00               	movlw	0
  1290  001DD6  6F94               	movwf	_TpoDiaF& (0+255),b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;RutinaTpo20.c: 21: RtcLee();
  1294  001DD8  ECB0  F00A         	call	_RtcLee	;wreg free
  1295                           
  1296                           ;RutinaTpo20.c: 22: TpoRtcSegAnt=RtcFechaHora[5];
  1297  001DDC  C0ED  F092         	movff	_RtcFechaHora+5,_TpoRtcSegAnt
  1298  001DE0  0100               	movlb	0	; () banked
  1299  001DE2  6B93               	clrf	(_TpoRtcSegAnt+1)& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;RutinaTpo20.c: 23: TpoRtcMinAnt=RtcFechaHora[4];
  1303  001DE4  C0EC  F090         	movff	_RtcFechaHora+4,_TpoRtcMinAnt
  1304  001DE8  0100               	movlb	0	; () banked
  1305  001DEA  6B91               	clrf	(_TpoRtcMinAnt+1)& (0+255),b
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;RutinaTpo20.c: 24: TpoRtcHoraAnt=RtcFechaHora[3];
  1309  001DEC  C0EB  F08E         	movff	_RtcFechaHora+3,_TpoRtcHoraAnt
  1310  001DF0  0100               	movlb	0	; () banked
  1311  001DF2  6B8F               	clrf	(_TpoRtcHoraAnt+1)& (0+255),b
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;RutinaTpo20.c: 25: TpoRtcDiaAnt=RtcFechaHora[2];
  1315  001DF4  C0EA  F08C         	movff	_RtcFechaHora+2,_TpoRtcDiaAnt
  1316  001DF8  0100               	movlb	0	; () banked
  1317  001DFA  6B8D               	clrf	(_TpoRtcDiaAnt+1)& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320  001DFC  0012               	return		;funcret
  1321  001DFE                     __end_of_Tpo_init:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           status	equ	0xFD8
  1332                           
  1333 ;; *************** function _RtcInit *****************
  1334 ;; Defined at:
  1335 ;;		line 25 in file "RTC21.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;		None
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  1    wreg      void 
  1342 ;; Registers used:
  1343 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1349 ;;      Params:         0       0       0       0       0       0       0       0       0
  1350 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1352 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1353 ;;Total ram usage:        0 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    8
  1356 ;; This function calls:
  1357 ;;		_RtcEsc
  1358 ;;		_RtcLee
  1359 ;; This function is called by:
  1360 ;;		_Ppal_Init
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text4
  1365  002256                     __ptext4:
  1366                           	opt stack 0
  1367  002256                     _RtcInit:
  1368                           	opt stack 20
  1369                           
  1370                           ;RTC21.c: 26: RtcLee();
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;incstack = 0
  1374  002256  ECB0  F00A         	call	_RtcLee	;wreg free
  1375                           
  1376                           ;RTC21.c: 27: RtcLee();
  1377  00225A  ECB0  F00A         	call	_RtcLee	;wreg free
  1378                           
  1379                           ;RTC21.c: 28: if ( ( RtcFechaHora[5] & (0x80) ) != 0 ) {
  1380  00225E  0100               	movlb	0	; () banked
  1381  002260  AFED               	btfss	(_RtcFechaHora+5)& (0+255),7,b
  1382  002262  0012               	return	
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;RTC21.c: 29: RtcFechaHora [0] = 11;
  1386  002264  0E0B               	movlw	11
  1387  002266  0100               	movlb	0	; () banked
  1388  002268  6FE8               	movwf	_RtcFechaHora& (0+255),b
  1389                           
  1390                           ;RTC21.c: 30: RtcFechaHora [1] = 5;
  1391  00226A  0E05               	movlw	5
  1392  00226C  0100               	movlb	0	; () banked
  1393  00226E  6FE9               	movwf	(_RtcFechaHora+1)& (0+255),b
  1394                           
  1395                           ;RTC21.c: 31: RtcFechaHora [2] = 10;
  1396  002270  0E0A               	movlw	10
  1397  002272  0100               	movlb	0	; () banked
  1398  002274  6FEA               	movwf	(_RtcFechaHora+2)& (0+255),b
  1399                           
  1400                           ;RTC21.c: 32: RtcFechaHora [3] = 1;
  1401  002276  0E01               	movlw	1
  1402  002278  0100               	movlb	0	; () banked
  1403  00227A  6FEB               	movwf	(_RtcFechaHora+3)& (0+255),b
  1404                           
  1405                           ;RTC21.c: 33: RtcFechaHora [4] = 2;
  1406  00227C  0E02               	movlw	2
  1407  00227E  0100               	movlb	0	; () banked
  1408  002280  6FEC               	movwf	(_RtcFechaHora+4)& (0+255),b
  1409                           
  1410                           ;RTC21.c: 34: RtcFechaHora [5] = 3;
  1411  002282  0E03               	movlw	3
  1412  002284  0100               	movlb	0	; () banked
  1413  002286  6FED               	movwf	(_RtcFechaHora+5)& (0+255),b
  1414                           
  1415                           ;RTC21.c: 35: RtcFechaHora [6] = 1;
  1416  002288  0E01               	movlw	1
  1417  00228A  0100               	movlb	0	; () banked
  1418  00228C  6FEE               	movwf	(_RtcFechaHora+6)& (0+255),b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;RTC21.c: 36: RtcEsc();
  1422  00228E  EC7C  F00B         	call	_RtcEsc	;wreg free
  1423  002292  0012               	return	
  1424  002294                     __end_of_RtcInit:
  1425                           	opt stack 0
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _MIOInit *****************
  1437 ;; Defined at:
  1438 ;;		line 34 in file "RutinaModIO15.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1452 ;;      Params:         0       0       0       0       0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    5
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_Ppal_Init
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text5
  1467  00138C                     __ptext5:
  1468                           	opt stack 0
  1469  00138C                     _MIOInit:
  1470                           	opt stack 23
  1471                           
  1472                           ;RutinaModIO15.c: 36: TRISA = 255;
  1473                           
  1474                           ;incstack = 0
  1475  00138C  6892               	setf	3986,c	;volatile
  1476                           
  1477                           ;RutinaModIO15.c: 37: ANSELA = 0x2f;
  1478  00138E  0E2F               	movlw	47
  1479  001390  010F               	movlb	15	; () banked
  1480  001392  6F5B               	movwf	91,b	;volatile
  1481                           
  1482                           ;RutinaModIO15.c: 45: MIOAdcDelta[0]=3;
  1483  001394  0E00               	movlw	0
  1484  001396  0100               	movlb	0	; () banked
  1485  001398  6F61               	movwf	(_MIOAdcDelta+1)& (0+255),b
  1486  00139A  0E03               	movlw	3
  1487  00139C  6F60               	movwf	_MIOAdcDelta& (0+255),b
  1488                           
  1489                           ;RutinaModIO15.c: 46: MIOAdcDelta[1]=3;
  1490  00139E  0E00               	movlw	0
  1491  0013A0  0100               	movlb	0	; () banked
  1492  0013A2  6F63               	movwf	(_MIOAdcDelta+3)& (0+255),b
  1493  0013A4  0E03               	movlw	3
  1494  0013A6  6F62               	movwf	(_MIOAdcDelta+2)& (0+255),b
  1495                           
  1496                           ;RutinaModIO15.c: 47: MIOAdcDelta[2]=3;
  1497  0013A8  0E00               	movlw	0
  1498  0013AA  0100               	movlb	0	; () banked
  1499  0013AC  6F65               	movwf	(_MIOAdcDelta+5)& (0+255),b
  1500  0013AE  0E03               	movlw	3
  1501  0013B0  6F64               	movwf	(_MIOAdcDelta+4)& (0+255),b
  1502                           
  1503                           ;RutinaModIO15.c: 48: MIOAdcDelta[3]=3;
  1504  0013B2  0E00               	movlw	0
  1505  0013B4  0100               	movlb	0	; () banked
  1506  0013B6  6F67               	movwf	(_MIOAdcDelta+7)& (0+255),b
  1507  0013B8  0E03               	movlw	3
  1508  0013BA  6F66               	movwf	(_MIOAdcDelta+6)& (0+255),b
  1509                           
  1510                           ;RutinaModIO15.c: 49: MIOAdcDelta[4]=3;
  1511  0013BC  0E00               	movlw	0
  1512  0013BE  0100               	movlb	0	; () banked
  1513  0013C0  6F69               	movwf	(_MIOAdcDelta+9)& (0+255),b
  1514  0013C2  0E03               	movlw	3
  1515  0013C4  6F68               	movwf	(_MIOAdcDelta+8)& (0+255),b
  1516                           
  1517                           ;RutinaModIO15.c: 51: MIOAdcDivisor[0]=1;
  1518  0013C6  0E00               	movlw	0
  1519  0013C8  0101               	movlb	1	; () banked
  1520  0013CA  6F15               	movwf	(_MIOAdcDivisor+1)& (0+255),b
  1521  0013CC  0E01               	movlw	1
  1522  0013CE  6F14               	movwf	_MIOAdcDivisor& (0+255),b
  1523                           
  1524                           ;RutinaModIO15.c: 52: MIOAdcDivisor[1]=1;
  1525  0013D0  0E00               	movlw	0
  1526  0013D2  0101               	movlb	1	; () banked
  1527  0013D4  6F17               	movwf	(_MIOAdcDivisor+3)& (0+255),b
  1528  0013D6  0E01               	movlw	1
  1529  0013D8  6F16               	movwf	(_MIOAdcDivisor+2)& (0+255),b
  1530                           
  1531                           ;RutinaModIO15.c: 53: MIOAdcDivisor[2]=1;
  1532  0013DA  0E00               	movlw	0
  1533  0013DC  0101               	movlb	1	; () banked
  1534  0013DE  6F19               	movwf	(_MIOAdcDivisor+5)& (0+255),b
  1535  0013E0  0E01               	movlw	1
  1536  0013E2  6F18               	movwf	(_MIOAdcDivisor+4)& (0+255),b
  1537                           
  1538                           ;RutinaModIO15.c: 54: MIOAdcDivisor[3]=1;
  1539  0013E4  0E00               	movlw	0
  1540  0013E6  0101               	movlb	1	; () banked
  1541  0013E8  6F1B               	movwf	(_MIOAdcDivisor+7)& (0+255),b
  1542  0013EA  0E01               	movlw	1
  1543  0013EC  6F1A               	movwf	(_MIOAdcDivisor+6)& (0+255),b
  1544                           
  1545                           ;RutinaModIO15.c: 55: MIOAdcDivisor[4]=1;
  1546  0013EE  0E00               	movlw	0
  1547  0013F0  0101               	movlb	1	; () banked
  1548  0013F2  6F1D               	movwf	(_MIOAdcDivisor+9)& (0+255),b
  1549  0013F4  0E01               	movlw	1
  1550  0013F6  6F1C               	movwf	(_MIOAdcDivisor+8)& (0+255),b
  1551                           
  1552                           ;RutinaModIO15.c: 57: MIOAdcMin[0]=0;
  1553  0013F8  0E00               	movlw	0
  1554  0013FA  0100               	movlb	0	; () banked
  1555  0013FC  6F6B               	movwf	(_MIOAdcMin+1)& (0+255),b
  1556  0013FE  0E00               	movlw	0
  1557  001400  6F6A               	movwf	_MIOAdcMin& (0+255),b
  1558                           
  1559                           ;RutinaModIO15.c: 58: MIOAdcMin[1]=0;
  1560  001402  0E00               	movlw	0
  1561  001404  0100               	movlb	0	; () banked
  1562  001406  6F6D               	movwf	(_MIOAdcMin+3)& (0+255),b
  1563  001408  0E00               	movlw	0
  1564  00140A  6F6C               	movwf	(_MIOAdcMin+2)& (0+255),b
  1565                           
  1566                           ;RutinaModIO15.c: 59: MIOAdcMin[2]=0;
  1567  00140C  0E00               	movlw	0
  1568  00140E  0100               	movlb	0	; () banked
  1569  001410  6F6F               	movwf	(_MIOAdcMin+5)& (0+255),b
  1570  001412  0E00               	movlw	0
  1571  001414  6F6E               	movwf	(_MIOAdcMin+4)& (0+255),b
  1572                           
  1573                           ;RutinaModIO15.c: 60: MIOAdcMin[3]=0;
  1574  001416  0E00               	movlw	0
  1575  001418  0100               	movlb	0	; () banked
  1576  00141A  6F71               	movwf	(_MIOAdcMin+7)& (0+255),b
  1577  00141C  0E00               	movlw	0
  1578  00141E  6F70               	movwf	(_MIOAdcMin+6)& (0+255),b
  1579                           
  1580                           ;RutinaModIO15.c: 61: MIOAdcMin[4]=0;
  1581  001420  0E00               	movlw	0
  1582  001422  0100               	movlb	0	; () banked
  1583  001424  6F73               	movwf	(_MIOAdcMin+9)& (0+255),b
  1584  001426  0E00               	movlw	0
  1585  001428  6F72               	movwf	(_MIOAdcMin+8)& (0+255),b
  1586                           
  1587                           ;RutinaModIO15.c: 63: MrReg[0]=0;
  1588  00142A  0E00               	movlw	0
  1589  00142C  0100               	movlb	0	; () banked
  1590  00142E  6FD1               	movwf	_MrReg& (0+255),b
  1591                           
  1592                           ;RutinaModIO15.c: 64: MrReg[1]=0;
  1593  001430  0E00               	movlw	0
  1594  001432  0100               	movlb	0	; () banked
  1595  001434  6FD2               	movwf	(_MrReg+1)& (0+255),b
  1596                           
  1597                           ;RutinaModIO15.c: 65: MrReg[2]=0;
  1598  001436  0E00               	movlw	0
  1599  001438  0100               	movlb	0	; () banked
  1600  00143A  6FD3               	movwf	(_MrReg+2)& (0+255),b
  1601                           
  1602                           ;RutinaModIO15.c: 66: MrReg[3]=0;
  1603  00143C  0E00               	movlw	0
  1604  00143E  0100               	movlb	0	; () banked
  1605  001440  6FD4               	movwf	(_MrReg+3)& (0+255),b
  1606                           
  1607                           ;RutinaModIO15.c: 67: MrReg[4]=0;
  1608  001442  0E00               	movlw	0
  1609  001444  0100               	movlb	0	; () banked
  1610  001446  6FD5               	movwf	(_MrReg+4)& (0+255),b
  1611                           
  1612                           ;RutinaModIO15.c: 69: MIOAdcAnt[0]=255;
  1613  001448  0E00               	movlw	0
  1614  00144A  0100               	movlb	0	; () banked
  1615  00144C  6F75               	movwf	(_MIOAdcAnt+1)& (0+255),b
  1616  00144E  6974               	setf	_MIOAdcAnt& (0+255),b
  1617                           
  1618                           ;RutinaModIO15.c: 70: MIOAdcAnt[1]=255;
  1619  001450  0E00               	movlw	0
  1620  001452  0100               	movlb	0	; () banked
  1621  001454  6F77               	movwf	(_MIOAdcAnt+3)& (0+255),b
  1622  001456  6976               	setf	(_MIOAdcAnt+2)& (0+255),b
  1623                           
  1624                           ;RutinaModIO15.c: 71: MIOAdcAnt[2]=255;
  1625  001458  0E00               	movlw	0
  1626  00145A  0100               	movlb	0	; () banked
  1627  00145C  6F79               	movwf	(_MIOAdcAnt+5)& (0+255),b
  1628  00145E  6978               	setf	(_MIOAdcAnt+4)& (0+255),b
  1629                           
  1630                           ;RutinaModIO15.c: 72: MIOAdcAnt[3]=255;
  1631  001460  0E00               	movlw	0
  1632  001462  0100               	movlb	0	; () banked
  1633  001464  6F7B               	movwf	(_MIOAdcAnt+7)& (0+255),b
  1634  001466  697A               	setf	(_MIOAdcAnt+6)& (0+255),b
  1635                           
  1636                           ;RutinaModIO15.c: 73: MIOAdcAnt[4]=255;
  1637  001468  0E00               	movlw	0
  1638  00146A  0100               	movlb	0	; () banked
  1639  00146C  6F7D               	movwf	(_MIOAdcAnt+9)& (0+255),b
  1640  00146E  697C               	setf	(_MIOAdcAnt+8)& (0+255),b
  1641                           
  1642                           ;RutinaModIO15.c: 75: MioCicloHabilitado=1;
  1643  001470  0E00               	movlw	0
  1644  001472  0100               	movlb	0	; () banked
  1645  001474  6FCD               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  1646  001476  0E01               	movlw	1
  1647  001478  6FCC               	movwf	_MioCicloHabilitado& (0+255),b
  1648                           
  1649                           ; BSR set to: 0
  1650  00147A  0012               	return		;funcret
  1651  00147C                     __end_of_MIOInit:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _I2CInit *****************
  1664 ;; Defined at:
  1665 ;;		line 28 in file "I2C30.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    5
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_Ppal_Init
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text6
  1694  002632                     __ptext6:
  1695                           	opt stack 0
  1696  002632                     _I2CInit:
  1697                           	opt stack 23
  1698                           
  1699                           ;I2C30.c: 29: SSP1CON1 = 0x3B;
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;incstack = 0
  1703  002632  0E3B               	movlw	59
  1704  002634  6EC6               	movwf	4038,c	;volatile
  1705                           
  1706                           ;I2C30.c: 30: PORTBbits.RB1 = 0;
  1707  002636  9281               	bcf	3969,1,c	;volatile
  1708                           
  1709                           ;I2C30.c: 31: PORTBbits.RB0 = 0;
  1710  002638  9081               	bcf	3969,0,c	;volatile
  1711                           
  1712                           ;I2C30.c: 32: TRISBbits.RB1=1;;
  1713  00263A  8293               	bsf	3987,1,c	;volatile
  1714                           
  1715                           ;I2C30.c: 33: TRISBbits.RB0=1;;
  1716  00263C  8093               	bsf	3987,0,c	;volatile
  1717                           
  1718                           ;I2C30.c: 34: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  1719  00263E  0E0C               	movlw	12
  1720  002640                     u3607:
  1721  002640  2EE8               	decfsz	wreg,f,c
  1722  002642  D7FE               	bra	u3607
  1723  002644  D000               	nop2	
  1724  002646  0012               	return		;funcret
  1725  002648                     __end_of_I2CInit:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postdec1	equ	0xFE5
  1734                           fsr1l	equ	0xFE1
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _ADC_Init *****************
  1738 ;; Defined at:
  1739 ;;		line 5 in file "ADC30.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_Ppal_Init
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text7
  1768  002648                     __ptext7:
  1769                           	opt stack 0
  1770  002648                     _ADC_Init:
  1771                           	opt stack 23
  1772                           
  1773                           ;ADC30.c: 7: TRISA = 255;
  1774                           
  1775                           ;incstack = 0
  1776  002648  6892               	setf	3986,c	;volatile
  1777                           
  1778                           ;ADC30.c: 8: ANSELA = 0x2f;
  1779  00264A  0E2F               	movlw	47
  1780  00264C  010F               	movlb	15	; () banked
  1781  00264E  6F5B               	movwf	91,b	;volatile
  1782                           
  1783                           ;ADC30.c: 9: ADCON2 = 0xAD;
  1784  002650  0EAD               	movlw	173
  1785  002652  6EC0               	movwf	4032,c	;volatile
  1786                           
  1787                           ;ADC30.c: 11: ADCON1 = 4;
  1788  002654  0E04               	movlw	4
  1789  002656  6EC1               	movwf	4033,c	;volatile
  1790                           
  1791                           ;ADC30.c: 12: ADCON0 = 0x01;
  1792  002658  0E01               	movlw	1
  1793  00265A  6EC2               	movwf	4034,c	;volatile
  1794                           
  1795                           ; BSR set to: 15
  1796  00265C  0012               	return		;funcret
  1797  00265E                     __end_of_ADC_Init:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1l	equ	0xFE1
  1807                           status	equ	0xFD8
  1808                           
  1809 ;; *************** function _Ppal_Ciclo *****************
  1810 ;; Defined at:
  1811 ;;		line 150 in file "ModIO24.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1825 ;;      Params:         0       0       0       0       0       0       0       0       0
  1826 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1828 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:   10
  1832 ;; This function calls:
  1833 ;;		_MioCiclo
  1834 ;;		_Tpo_Ciclo
  1835 ;; This function is called by:
  1836 ;;		_MstMain
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text8
  1841  002568                     __ptext8:
  1842                           	opt stack 0
  1843  002568                     _Ppal_Ciclo:
  1844                           	opt stack 19
  1845                           
  1846                           ;ModIO24.c: 156: Tpo_Ciclo();
  1847                           
  1848                           ; BSR set to: 15
  1849                           ;incstack = 0
  1850  002568  EC1B  F00B         	call	_Tpo_Ciclo	;wreg free
  1851                           
  1852                           ;ModIO24.c: 158: MioCiclo();
  1853  00256C  ECB7  F004         	call	_MioCiclo	;wreg free
  1854                           
  1855                           ;ModIO24.c: 163: if (TpoSegF){
  1856  002570  0100               	movlb	0	; () banked
  1857  002572  519A               	movf	_TpoSegF& (0+255),w,b
  1858  002574  0100               	movlb	0	; () banked
  1859  002576  119B               	iorwf	(_TpoSegF+1)& (0+255),w,b
  1860  002578  B4D8               	btfsc	status,2,c
  1861  00257A  0012               	return	
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;ModIO24.c: 164: TempSeg++;
  1865  00257C  0100               	movlb	0	; () banked
  1866  00257E  4B82               	infsnz	_TempSeg& (0+255),f,b
  1867  002580  2B83               	incf	(_TempSeg+1)& (0+255),f,b
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;ModIO24.c: 165: TpoSegF=0;
  1871  002582  0E00               	movlw	0
  1872  002584  0100               	movlb	0	; () banked
  1873  002586  6F9B               	movwf	(_TpoSegF+1)& (0+255),b
  1874  002588  0E00               	movlw	0
  1875  00258A  6F9A               	movwf	_TpoSegF& (0+255),b
  1876  00258C  0012               	return	
  1877  00258E                     __end_of_Ppal_Ciclo:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _Tpo_Ciclo *****************
  1890 ;; Defined at:
  1891 ;;		line 40 in file "RutinaTpo20.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1908 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        2 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    7
  1912 ;; This function calls:
  1913 ;;		_RtcLee
  1914 ;; This function is called by:
  1915 ;;		_Ppal_Ciclo
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text9
  1920  001636                     __ptext9:
  1921                           	opt stack 0
  1922  001636                     _Tpo_Ciclo:
  1923                           	opt stack 21
  1924                           
  1925                           ;RutinaTpo20.c: 41: if (!Tpo50msF) {return;}
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;incstack = 0
  1929  001636  0100               	movlb	0	; () banked
  1930  001638  519C               	movf	_Tpo50msF& (0+255),w,b
  1931  00163A  0100               	movlb	0	; () banked
  1932  00163C  119D               	iorwf	(_Tpo50msF+1)& (0+255),w,b
  1933  00163E  B4D8               	btfsc	status,2,c
  1934  001640  0012               	return	
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;RutinaTpo20.c: 43: RtcLee();
  1938                           
  1939                           ; BSR set to: 0
  1940                           
  1941                           ; BSR set to: 0
  1942  001642  ECB0  F00A         	call	_RtcLee	;wreg free
  1943                           
  1944                           ;RutinaTpo20.c: 44: if (RtcFechaHora[5] == TpoRtcSegAnt) {return;}
  1945  001646  0100               	movlb	0	; () banked
  1946  001648  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  1947  00164A  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  1948  00164C  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  1949  00164E  0100               	movlb	0	; () banked
  1950  001650  5192               	movf	_TpoRtcSegAnt& (0+255),w,b
  1951  001652  182A               	xorwf	??_Tpo_Ciclo,w,c
  1952  001654  E105               	bnz	l5092
  1953  001656  0100               	movlb	0	; () banked
  1954  001658  5193               	movf	(_TpoRtcSegAnt+1)& (0+255),w,b
  1955  00165A  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  1956  00165C  B4D8               	btfsc	status,2,c
  1957  00165E  0012               	return	
  1958  001660                     l5092:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;RutinaTpo20.c: 45: TpoSegF=1;
  1962  001660  0E00               	movlw	0
  1963  001662  0100               	movlb	0	; () banked
  1964  001664  6F9B               	movwf	(_TpoSegF+1)& (0+255),b
  1965  001666  0E01               	movlw	1
  1966  001668  6F9A               	movwf	_TpoSegF& (0+255),b
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;RutinaTpo20.c: 46: TpoRtcSegAnt = RtcFechaHora[5];
  1970  00166A  C0ED  F092         	movff	_RtcFechaHora+5,_TpoRtcSegAnt
  1971  00166E  0100               	movlb	0	; () banked
  1972  001670  6B93               	clrf	(_TpoRtcSegAnt+1)& (0+255),b
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;RutinaTpo20.c: 48: if (RtcFechaHora[4] == TpoRtcMinAnt) {return;}
  1976  001672  0100               	movlb	0	; () banked
  1977  001674  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  1978  001676  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  1979  001678  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  1980  00167A  0100               	movlb	0	; () banked
  1981  00167C  5190               	movf	_TpoRtcMinAnt& (0+255),w,b
  1982  00167E  182A               	xorwf	??_Tpo_Ciclo,w,c
  1983  001680  E105               	bnz	l5100
  1984  001682  0100               	movlb	0	; () banked
  1985  001684  5191               	movf	(_TpoRtcMinAnt+1)& (0+255),w,b
  1986  001686  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  1987  001688  B4D8               	btfsc	status,2,c
  1988  00168A  0012               	return	
  1989  00168C                     l5100:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;RutinaTpo20.c: 49: TpoMinF=1;
  1993  00168C  0E00               	movlw	0
  1994  00168E  0100               	movlb	0	; () banked
  1995  001690  6F99               	movwf	(_TpoMinF+1)& (0+255),b
  1996  001692  0E01               	movlw	1
  1997  001694  6F98               	movwf	_TpoMinF& (0+255),b
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;RutinaTpo20.c: 50: TpoRtcMinAnt = RtcFechaHora[4];
  2001  001696  C0EC  F090         	movff	_RtcFechaHora+4,_TpoRtcMinAnt
  2002  00169A  0100               	movlb	0	; () banked
  2003  00169C  6B91               	clrf	(_TpoRtcMinAnt+1)& (0+255),b
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;RutinaTpo20.c: 52: if (RtcFechaHora[3] == TpoRtcHoraAnt) {return;}
  2007  00169E  0100               	movlb	0	; () banked
  2008  0016A0  51EB               	movf	(_RtcFechaHora+3)& (0+255),w,b
  2009  0016A2  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  2010  0016A4  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  2011  0016A6  0100               	movlb	0	; () banked
  2012  0016A8  518E               	movf	_TpoRtcHoraAnt& (0+255),w,b
  2013  0016AA  182A               	xorwf	??_Tpo_Ciclo,w,c
  2014  0016AC  E105               	bnz	l5108
  2015  0016AE  0100               	movlb	0	; () banked
  2016  0016B0  518F               	movf	(_TpoRtcHoraAnt+1)& (0+255),w,b
  2017  0016B2  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  2018  0016B4  B4D8               	btfsc	status,2,c
  2019  0016B6  0012               	return	
  2020  0016B8                     l5108:
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;RutinaTpo20.c: 53: TpoHoraF=1;
  2024  0016B8  0E00               	movlw	0
  2025  0016BA  0100               	movlb	0	; () banked
  2026  0016BC  6F97               	movwf	(_TpoHoraF+1)& (0+255),b
  2027  0016BE  0E01               	movlw	1
  2028  0016C0  6F96               	movwf	_TpoHoraF& (0+255),b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;RutinaTpo20.c: 54: TpoRtcHoraAnt = RtcFechaHora[3];
  2032  0016C2  C0EB  F08E         	movff	_RtcFechaHora+3,_TpoRtcHoraAnt
  2033  0016C6  0100               	movlb	0	; () banked
  2034  0016C8  6B8F               	clrf	(_TpoRtcHoraAnt+1)& (0+255),b
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;RutinaTpo20.c: 56: if (RtcFechaHora[2] == TpoRtcDiaAnt) {return;}
  2038  0016CA  0100               	movlb	0	; () banked
  2039  0016CC  51EA               	movf	(_RtcFechaHora+2)& (0+255),w,b
  2040  0016CE  6E2A               	movwf	??_Tpo_Ciclo& (0+255),c
  2041  0016D0  6A2B               	clrf	(??_Tpo_Ciclo+1)& (0+255),c
  2042  0016D2  0100               	movlb	0	; () banked
  2043  0016D4  518C               	movf	_TpoRtcDiaAnt& (0+255),w,b
  2044  0016D6  182A               	xorwf	??_Tpo_Ciclo,w,c
  2045  0016D8  E105               	bnz	l5116
  2046  0016DA  0100               	movlb	0	; () banked
  2047  0016DC  518D               	movf	(_TpoRtcDiaAnt+1)& (0+255),w,b
  2048  0016DE  182B               	xorwf	??_Tpo_Ciclo+1,w,c
  2049  0016E0  B4D8               	btfsc	status,2,c
  2050  0016E2  0012               	return	
  2051  0016E4                     l5116:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;RutinaTpo20.c: 57: TpoDiaF=1;
  2055  0016E4  0E00               	movlw	0
  2056  0016E6  0100               	movlb	0	; () banked
  2057  0016E8  6F95               	movwf	(_TpoDiaF+1)& (0+255),b
  2058  0016EA  0E01               	movlw	1
  2059  0016EC  6F94               	movwf	_TpoDiaF& (0+255),b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;RutinaTpo20.c: 58: TpoRtcDiaAnt = RtcFechaHora[2];
  2063  0016EE  C0EA  F08C         	movff	_RtcFechaHora+2,_TpoRtcDiaAnt
  2064  0016F2  0100               	movlb	0	; () banked
  2065  0016F4  6B8D               	clrf	(_TpoRtcDiaAnt+1)& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068  0016F6  0012               	return		;funcret
  2069  0016F8                     __end_of_Tpo_Ciclo:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1l	equ	0xFE1
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _MioCiclo *****************
  2082 ;; Defined at:
  2083 ;;		line 233 in file "RutinaModIO15.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  temp2           2    0        int 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2099 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2100 ;;      Totals:         0       0       3       0       0       0       0       0       0
  2101 ;;Total ram usage:        3 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    9
  2104 ;; This function calls:
  2105 ;;		_MIOAdcAjuste2_5
  2106 ;;		_MioPreparaReg
  2107 ;;		_MrAgregaReg
  2108 ;;		_abs
  2109 ;; This function is called by:
  2110 ;;		_Ppal_Ciclo
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text10
  2115  00096E                     __ptext10:
  2116                           	opt stack 0
  2117  00096E                     _MioCiclo:
  2118                           	opt stack 19
  2119                           
  2120                           ;RutinaModIO15.c: 234: int temp2;
  2121                           ;RutinaModIO15.c: 235: if (!MioCicloHabilitado) {return;}
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;incstack = 0
  2125  00096E  0100               	movlb	0	; () banked
  2126  000970  51CC               	movf	_MioCicloHabilitado& (0+255),w,b
  2127  000972  0100               	movlb	0	; () banked
  2128  000974  11CD               	iorwf	(_MioCicloHabilitado+1)& (0+255),w,b
  2129  000976  B4D8               	btfsc	status,2,c
  2130  000978  0012               	return	
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;RutinaModIO15.c: 237: if (!TpoSegF) {
  2134                           
  2135                           ; BSR set to: 0
  2136                           
  2137                           ; BSR set to: 0
  2138  00097A  0100               	movlb	0	; () banked
  2139  00097C  519A               	movf	_TpoSegF& (0+255),w,b
  2140  00097E  0100               	movlb	0	; () banked
  2141  000980  119B               	iorwf	(_TpoSegF+1)& (0+255),w,b
  2142  000982  B4D8               	btfsc	status,2,c
  2143  000984  0012               	return	
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;RutinaModIO15.c: 239: }
  2147                           ;RutinaModIO15.c: 242: TpoSegF=0;
  2148                           
  2149                           ; BSR set to: 0
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;RutinaModIO15.c: 238: return;
  2153  000986  0E00               	movlw	0
  2154  000988  0100               	movlb	0	; () banked
  2155  00098A  6F9B               	movwf	(_TpoSegF+1)& (0+255),b
  2156  00098C  0E00               	movlw	0
  2157  00098E  6F9A               	movwf	_TpoSegF& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;RutinaModIO15.c: 243: MIOSegCont++;
  2161  000990  0100               	movlb	0	; () banked
  2162  000992  4B84               	infsnz	_MIOSegCont& (0+255),f,b
  2163  000994  2B85               	incf	(_MIOSegCont+1)& (0+255),f,b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;RutinaModIO15.c: 244: if (MIOSegCont<MIOTpoDeltaMax){
  2167  000996  0100               	movlb	0	; () banked
  2168  000998  51FD               	movf	_MIOTpoDeltaMax& (0+255),w,b
  2169  00099A  0100               	movlb	0	; () banked
  2170  00099C  5D84               	subwf	_MIOSegCont& (0+255),w,b
  2171  00099E  0100               	movlb	0	; () banked
  2172  0009A0  51FE               	movf	(_MIOTpoDeltaMax+1)& (0+255),w,b
  2173  0009A2  0100               	movlb	0	; () banked
  2174  0009A4  5985               	subwfb	(_MIOSegCont+1)& (0+255),w,b
  2175  0009A6  B0D8               	btfsc	status,0,c
  2176  0009A8  D097               	goto	l5150
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;RutinaModIO15.c: 246: if (MIOSegCont<MIOTpoDeltaMin){
  2180  0009AA  0100               	movlb	0	; () banked
  2181  0009AC  51FB               	movf	_MIOTpoDeltaMin& (0+255),w,b
  2182  0009AE  0100               	movlb	0	; () banked
  2183  0009B0  5D84               	subwf	_MIOSegCont& (0+255),w,b
  2184  0009B2  0100               	movlb	0	; () banked
  2185  0009B4  51FC               	movf	(_MIOTpoDeltaMin+1)& (0+255),w,b
  2186  0009B6  0100               	movlb	0	; () banked
  2187  0009B8  5985               	subwfb	(_MIOSegCont+1)& (0+255),w,b
  2188  0009BA  A0D8               	btfss	status,0,c
  2189  0009BC  0012               	return	
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;RutinaModIO15.c: 248: }
  2193                           ;RutinaModIO15.c: 250: MIOAdcAjuste2_5();
  2194                           
  2195                           ; BSR set to: 0
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;RutinaModIO15.c: 247: return;
  2199  0009BE  ECDD  F003         	call	_MIOAdcAjuste2_5	;wreg free
  2200                           
  2201                           ;RutinaModIO15.c: 252: if ( (abs(MIOAdcAct[0]-MIOAdcAnt[0])<MIOAdcDelta[0]) &&
  2202                           ;RutinaModIO15.c: 253: (abs(MIOAdcAct[1]-MIOAdcAnt[1])<MIOAdcDelta[1]) &&
  2203                           ;RutinaModIO15.c: 254: (abs(MIOAdcAct[2]-MIOAdcAnt[2])<MIOAdcDelta[2]) &&
  2204                           ;RutinaModIO15.c: 255: (abs(MIOAdcAct[3]-MIOAdcAnt[3])<MIOAdcDelta[3]) ) {
  2205  0009C2  C074  F183         	movff	_MIOAdcAnt,??_MioCiclo
  2206  0009C6  C075  F184         	movff	_MIOAdcAnt+1,??_MioCiclo+1
  2207  0009CA  0101               	movlb	1	; () banked
  2208  0009CC  1F83               	comf	??_MioCiclo& (0+255),f,b
  2209  0009CE  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2210  0009D0  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2211  0009D2  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2212  0009D4  5033               	movf	_MIOAdcAct,w,c
  2213  0009D6  0101               	movlb	1	; () banked
  2214  0009D8  2583               	addwf	??_MioCiclo& (0+255),w,b
  2215  0009DA  6E19               	movwf	abs@a,c
  2216  0009DC  5034               	movf	_MIOAdcAct+1,w,c
  2217  0009DE  0101               	movlb	1	; () banked
  2218  0009E0  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2219  0009E2  6E1A               	movwf	abs@a+1,c
  2220  0009E4  EC78  F012         	call	_abs	;wreg free
  2221  0009E8  0100               	movlb	0	; () banked
  2222  0009EA  5160               	movf	_MIOAdcDelta& (0+255),w,b
  2223  0009EC  5C19               	subwf	?_abs,w,c
  2224  0009EE  501A               	movf	?_abs+1,w,c
  2225  0009F0  0A80               	xorlw	128
  2226  0009F2  0101               	movlb	1	; () banked
  2227  0009F4  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2228  0009F6  0100               	movlb	0	; () banked
  2229  0009F8  5161               	movf	(_MIOAdcDelta+1)& (0+255),w,b
  2230  0009FA  0A80               	xorlw	128
  2231  0009FC  0101               	movlb	1	; () banked
  2232  0009FE  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2233  000A00  B0D8               	btfsc	status,0,c
  2234  000A02  D06C               	goto	l570
  2235                           
  2236                           ; BSR set to: 1
  2237  000A04  EE20  F076         	lfsr	2,_MIOAdcAnt+2
  2238  000A08  CFDE F183          	movff	postinc2,??_MioCiclo
  2239  000A0C  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2240  000A10  0101               	movlb	1	; () banked
  2241  000A12  1F83               	comf	??_MioCiclo& (0+255),f,b
  2242  000A14  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2243  000A16  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2244  000A18  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2245  000A1A  5035               	movf	_MIOAdcAct+2,w,c
  2246  000A1C  0101               	movlb	1	; () banked
  2247  000A1E  2583               	addwf	??_MioCiclo& (0+255),w,b
  2248  000A20  6E19               	movwf	abs@a,c
  2249  000A22  5036               	movf	_MIOAdcAct+3,w,c
  2250  000A24  0101               	movlb	1	; () banked
  2251  000A26  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2252  000A28  6E1A               	movwf	abs@a+1,c
  2253  000A2A  EC78  F012         	call	_abs	;wreg free
  2254  000A2E  0100               	movlb	0	; () banked
  2255  000A30  5162               	movf	(_MIOAdcDelta+2)& (0+255),w,b
  2256  000A32  5C19               	subwf	?_abs,w,c
  2257  000A34  501A               	movf	?_abs+1,w,c
  2258  000A36  0A80               	xorlw	128
  2259  000A38  0101               	movlb	1	; () banked
  2260  000A3A  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2261  000A3C  0100               	movlb	0	; () banked
  2262  000A3E  5163               	movf	(_MIOAdcDelta+3)& (0+255),w,b
  2263  000A40  0A80               	xorlw	128
  2264  000A42  0101               	movlb	1	; () banked
  2265  000A44  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2266  000A46  B0D8               	btfsc	status,0,c
  2267  000A48  D049               	goto	l570
  2268                           
  2269                           ; BSR set to: 1
  2270  000A4A  EE20  F078         	lfsr	2,_MIOAdcAnt+4
  2271  000A4E  CFDE F183          	movff	postinc2,??_MioCiclo
  2272  000A52  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2273  000A56  0101               	movlb	1	; () banked
  2274  000A58  1F83               	comf	??_MioCiclo& (0+255),f,b
  2275  000A5A  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2276  000A5C  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2277  000A5E  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2278  000A60  5037               	movf	_MIOAdcAct+4,w,c
  2279  000A62  0101               	movlb	1	; () banked
  2280  000A64  2583               	addwf	??_MioCiclo& (0+255),w,b
  2281  000A66  6E19               	movwf	abs@a,c
  2282  000A68  5038               	movf	_MIOAdcAct+5,w,c
  2283  000A6A  0101               	movlb	1	; () banked
  2284  000A6C  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2285  000A6E  6E1A               	movwf	abs@a+1,c
  2286  000A70  EC78  F012         	call	_abs	;wreg free
  2287  000A74  0100               	movlb	0	; () banked
  2288  000A76  5164               	movf	(_MIOAdcDelta+4)& (0+255),w,b
  2289  000A78  5C19               	subwf	?_abs,w,c
  2290  000A7A  501A               	movf	?_abs+1,w,c
  2291  000A7C  0A80               	xorlw	128
  2292  000A7E  0101               	movlb	1	; () banked
  2293  000A80  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2294  000A82  0100               	movlb	0	; () banked
  2295  000A84  5165               	movf	(_MIOAdcDelta+5)& (0+255),w,b
  2296  000A86  0A80               	xorlw	128
  2297  000A88  0101               	movlb	1	; () banked
  2298  000A8A  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2299  000A8C  B0D8               	btfsc	status,0,c
  2300  000A8E  D026               	goto	l570
  2301                           
  2302                           ; BSR set to: 1
  2303  000A90  EE20  F07A         	lfsr	2,_MIOAdcAnt+6
  2304  000A94  CFDE F183          	movff	postinc2,??_MioCiclo
  2305  000A98  CFDD F184          	movff	postdec2,??_MioCiclo+1
  2306  000A9C  0101               	movlb	1	; () banked
  2307  000A9E  1F83               	comf	??_MioCiclo& (0+255),f,b
  2308  000AA0  1F84               	comf	(??_MioCiclo+1)& (0+255),f,b
  2309  000AA2  4B83               	infsnz	??_MioCiclo& (0+255),f,b
  2310  000AA4  2B84               	incf	(??_MioCiclo+1)& (0+255),f,b
  2311  000AA6  5039               	movf	_MIOAdcAct+6,w,c
  2312  000AA8  0101               	movlb	1	; () banked
  2313  000AAA  2583               	addwf	??_MioCiclo& (0+255),w,b
  2314  000AAC  6E19               	movwf	abs@a,c
  2315  000AAE  503A               	movf	_MIOAdcAct+7,w,c
  2316  000AB0  0101               	movlb	1	; () banked
  2317  000AB2  2184               	addwfc	(??_MioCiclo+1)& (0+255),w,b
  2318  000AB4  6E1A               	movwf	abs@a+1,c
  2319  000AB6  EC78  F012         	call	_abs	;wreg free
  2320  000ABA  0100               	movlb	0	; () banked
  2321  000ABC  5166               	movf	(_MIOAdcDelta+6)& (0+255),w,b
  2322  000ABE  5C19               	subwf	?_abs,w,c
  2323  000AC0  501A               	movf	?_abs+1,w,c
  2324  000AC2  0A80               	xorlw	128
  2325  000AC4  0101               	movlb	1	; () banked
  2326  000AC6  6F85               	movwf	(??_MioCiclo+2)& (0+255),b
  2327  000AC8  0100               	movlb	0	; () banked
  2328  000ACA  5167               	movf	(_MIOAdcDelta+7)& (0+255),w,b
  2329  000ACC  0A80               	xorlw	128
  2330  000ACE  0101               	movlb	1	; () banked
  2331  000AD0  5985               	subwfb	(??_MioCiclo+2)& (0+255),w,b
  2332  000AD2  A0D8               	btfss	status,0,c
  2333  000AD4  0012               	return	
  2334  000AD6  D002               	goto	l570
  2335  000AD8                     l5150:
  2336                           
  2337                           ;RutinaModIO15.c: 259: else {MIOAdcAjuste2_5();}
  2338  000AD8  ECDD  F003         	call	_MIOAdcAjuste2_5	;wreg free
  2339  000ADC                     l570:
  2340                           
  2341                           ;RutinaModIO15.c: 263: MioPreparaReg();
  2342  000ADC  ECDB  F00B         	call	_MioPreparaReg	;wreg free
  2343                           
  2344                           ;RutinaModIO15.c: 265: MrAgregaReg();
  2345  000AE0  EC47  F006         	call	_MrAgregaReg	;wreg free
  2346                           
  2347                           ;RutinaModIO15.c: 266: MIOSegCont=0;
  2348  000AE4  0E00               	movlw	0
  2349  000AE6  0100               	movlb	0	; () banked
  2350  000AE8  6F85               	movwf	(_MIOSegCont+1)& (0+255),b
  2351  000AEA  0E00               	movlw	0
  2352  000AEC  6F84               	movwf	_MIOSegCont& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;RutinaModIO15.c: 268: MIOAdcAnt[0]=MIOAdcAct[0];
  2356  000AEE  C033  F074         	movff	_MIOAdcAct,_MIOAdcAnt
  2357  000AF2  C034  F075         	movff	_MIOAdcAct+1,_MIOAdcAnt+1
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;RutinaModIO15.c: 269: MIOAdcAnt[1]=MIOAdcAct[1];
  2361  000AF6  C035  F076         	movff	_MIOAdcAct+2,_MIOAdcAnt+2
  2362  000AFA  C036  F077         	movff	_MIOAdcAct+3,_MIOAdcAnt+3
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;RutinaModIO15.c: 270: MIOAdcAnt[2]=MIOAdcAct[2];
  2366  000AFE  C037  F078         	movff	_MIOAdcAct+4,_MIOAdcAnt+4
  2367  000B02  C038  F079         	movff	_MIOAdcAct+5,_MIOAdcAnt+5
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;RutinaModIO15.c: 271: MIOAdcAnt[3]=MIOAdcAct[3];
  2371  000B06  C039  F07A         	movff	_MIOAdcAct+6,_MIOAdcAnt+6
  2372  000B0A  C03A  F07B         	movff	_MIOAdcAct+7,_MIOAdcAnt+7
  2373  000B0E  0012               	return		;funcret
  2374  000B10                     __end_of_MioCiclo:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _abs *****************
  2389 ;; Defined at:
  2390 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  a               2   24[COMRAM] int 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  2   24[COMRAM] int 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2404 ;;      Params:         2       0       0       0       0       0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2406 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2407 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2408 ;;Total ram usage:        4 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    5
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_MioCiclo
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text11
  2419  0024F0                     __ptext11:
  2420                           	opt stack 0
  2421  0024F0                     _abs:
  2422                           	opt stack 22
  2423                           
  2424                           ;incstack = 0
  2425  0024F0  AE1A               	btfss	abs@a+1,7,c
  2426  0024F2  D00D               	goto	l666
  2427  0024F4  C019  F01B         	movff	abs@a,??_abs
  2428  0024F8  C01A  F01C         	movff	abs@a+1,??_abs+1
  2429  0024FC  1E1B               	comf	??_abs,f,c
  2430  0024FE  1E1C               	comf	??_abs+1,f,c
  2431  002500  4A1B               	infsnz	??_abs,f,c
  2432  002502  2A1C               	incf	??_abs+1,f,c
  2433  002504  C01B  F019         	movff	??_abs,?_abs
  2434  002508  C01C  F01A         	movff	??_abs+1,?_abs+1
  2435  00250C  0012               	return	
  2436  00250E                     l666:
  2437  00250E  C019  F019         	movff	abs@a,?_abs
  2438  002512  C01A  F01A         	movff	abs@a+1,?_abs+1
  2439  002516  0012               	return		;funcret
  2440  002518                     __end_of_abs:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           postdec1	equ	0xFE5
  2449                           fsr1l	equ	0xFE1
  2450                           postinc2	equ	0xFDE
  2451                           postdec2	equ	0xFDD
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _MioPreparaReg *****************
  2455 ;; Defined at:
  2456 ;;		line 163 in file "RutinaModIO15.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2472 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2473 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2474 ;;Total ram usage:        3 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    5
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_MioCiclo
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text12
  2485  0017B6                     __ptext12:
  2486                           	opt stack 0
  2487  0017B6                     _MioPreparaReg:
  2488                           	opt stack 22
  2489                           
  2490                           ;RutinaModIO15.c: 165: MrReg[2] = (MIOAdcAct[0] >> 4);
  2491                           
  2492                           ;incstack = 0
  2493  0017B6  C033  F019         	movff	_MIOAdcAct,??_MioPreparaReg
  2494  0017BA  C034  F01A         	movff	_MIOAdcAct+1,??_MioPreparaReg+1
  2495  0017BE  0E04               	movlw	4
  2496  0017C0  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2497  0017C2                     u2085:
  2498  0017C2  341A               	rlcf	??_MioPreparaReg+1,w,c
  2499  0017C4  321A               	rrcf	??_MioPreparaReg+1,f,c
  2500  0017C6  3219               	rrcf	??_MioPreparaReg,f,c
  2501  0017C8  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2502  0017CA  D7FB               	goto	u2085
  2503  0017CC  5019               	movf	??_MioPreparaReg,w,c
  2504  0017CE  0100               	movlb	0	; () banked
  2505  0017D0  6FD3               	movwf	(_MrReg+2)& (0+255),b
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;RutinaModIO15.c: 166: MrReg[3] = (MIOAdcAct[1] >> 4);
  2509  0017D2  EE20  F035         	lfsr	2,_MIOAdcAct+2
  2510  0017D6  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2511  0017DA  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2512  0017DE  0E04               	movlw	4
  2513  0017E0  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2514  0017E2                     u2095:
  2515  0017E2  341A               	rlcf	??_MioPreparaReg+1,w,c
  2516  0017E4  321A               	rrcf	??_MioPreparaReg+1,f,c
  2517  0017E6  3219               	rrcf	??_MioPreparaReg,f,c
  2518  0017E8  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2519  0017EA  D7FB               	goto	u2095
  2520  0017EC  5019               	movf	??_MioPreparaReg,w,c
  2521  0017EE  0100               	movlb	0	; () banked
  2522  0017F0  6FD4               	movwf	(_MrReg+3)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;RutinaModIO15.c: 167: MrReg[4] = MIOAdcAct[2] >> 4;
  2526  0017F2  EE20  F037         	lfsr	2,_MIOAdcAct+4
  2527  0017F6  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2528  0017FA  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2529  0017FE  0E04               	movlw	4
  2530  001800  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2531  001802                     u2105:
  2532  001802  341A               	rlcf	??_MioPreparaReg+1,w,c
  2533  001804  321A               	rrcf	??_MioPreparaReg+1,f,c
  2534  001806  3219               	rrcf	??_MioPreparaReg,f,c
  2535  001808  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2536  00180A  D7FB               	goto	u2105
  2537  00180C  5019               	movf	??_MioPreparaReg,w,c
  2538  00180E  0100               	movlb	0	; () banked
  2539  001810  6FD5               	movwf	(_MrReg+4)& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;RutinaModIO15.c: 168: MrReg[5] = MIOAdcAct[3] >> 4;
  2543  001812  EE20  F039         	lfsr	2,_MIOAdcAct+6
  2544  001816  CFDE F019          	movff	postinc2,??_MioPreparaReg
  2545  00181A  CFDD F01A          	movff	postdec2,??_MioPreparaReg+1
  2546  00181E  0E04               	movlw	4
  2547  001820  6E1B               	movwf	(??_MioPreparaReg+2)& (0+255),c
  2548  001822                     u2115:
  2549  001822  341A               	rlcf	??_MioPreparaReg+1,w,c
  2550  001824  321A               	rrcf	??_MioPreparaReg+1,f,c
  2551  001826  3219               	rrcf	??_MioPreparaReg,f,c
  2552  001828  2E1B               	decfsz	(??_MioPreparaReg+2)& (0+255),f,c
  2553  00182A  D7FB               	goto	u2115
  2554  00182C  5019               	movf	??_MioPreparaReg,w,c
  2555  00182E  0100               	movlb	0	; () banked
  2556  001830  6FD6               	movwf	(_MrReg+5)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;RutinaModIO15.c: 175: MrReg[6] = ( ((MIOAdcAct[0] & 0xF) << 4) +
  2560                           ;RutinaModIO15.c: 176: ((MIOAdcAct[1] & 0xF) ) ) & 0xFF0;
  2561  001832  C035  F019         	movff	_MIOAdcAct+2,??_MioPreparaReg
  2562  001836  0E0F               	movlw	15
  2563  001838  1619               	andwf	??_MioPreparaReg,f,c
  2564  00183A  C033  F01A         	movff	_MIOAdcAct,??_MioPreparaReg+1
  2565  00183E  0E0F               	movlw	15
  2566  001840  161A               	andwf	??_MioPreparaReg+1,f,c
  2567  001842  381A               	swapf	??_MioPreparaReg+1,w,c
  2568  001844  0BF0               	andlw	240
  2569  001846  2419               	addwf	??_MioPreparaReg,w,c
  2570  001848  0BF0               	andlw	240
  2571  00184A  0100               	movlb	0	; () banked
  2572  00184C  6FD7               	movwf	(_MrReg+6)& (0+255),b
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;RutinaModIO15.c: 177: MrReg[7] = ( ((MIOAdcAct[2] & 0xF) << 4) +
  2576                           ;RutinaModIO15.c: 178: ((MIOAdcAct[3] & 0xF) ) ) & 0xFF0;
  2577  00184E  C039  F019         	movff	_MIOAdcAct+6,??_MioPreparaReg
  2578  001852  0E0F               	movlw	15
  2579  001854  1619               	andwf	??_MioPreparaReg,f,c
  2580  001856  C037  F01A         	movff	_MIOAdcAct+4,??_MioPreparaReg+1
  2581  00185A  0E0F               	movlw	15
  2582  00185C  161A               	andwf	??_MioPreparaReg+1,f,c
  2583  00185E  381A               	swapf	??_MioPreparaReg+1,w,c
  2584  001860  0BF0               	andlw	240
  2585  001862  2419               	addwf	??_MioPreparaReg,w,c
  2586  001864  0BF0               	andlw	240
  2587  001866  0100               	movlb	0	; () banked
  2588  001868  6FD8               	movwf	(_MrReg+7)& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591  00186A  0012               	return		;funcret
  2592  00186C                     __end_of_MioPreparaReg:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1l	equ	0xFE1
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _MIOAdcAjuste2_5 *****************
  2607 ;; Defined at:
  2608 ;;		line 123 in file "RutinaModIO15.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  k1              4    0[BANK1 ] long 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       4       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       4       0       0       0       0       0       0
  2626 ;;Total ram usage:        4 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    6
  2629 ;; This function calls:
  2630 ;;		_MIOAdcLeido2Act
  2631 ;;		___aldiv
  2632 ;;		___lmul
  2633 ;; This function is called by:
  2634 ;;		_MioCiclo
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text13
  2639  0007BA                     __ptext13:
  2640                           	opt stack 0
  2641  0007BA                     _MIOAdcAjuste2_5:
  2642                           	opt stack 21
  2643                           
  2644                           ;RutinaModIO15.c: 125: long k1=3931;
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;incstack = 0
  2648  0007BA  0E5B               	movlw	91
  2649  0007BC  0101               	movlb	1	; () banked
  2650  0007BE  6F79               	movwf	MIOAdcAjuste2_5@k1& (0+255),b
  2651  0007C0  0E0F               	movlw	15
  2652  0007C2  6F7A               	movwf	(MIOAdcAjuste2_5@k1+1)& (0+255),b
  2653  0007C4  0E00               	movlw	0
  2654  0007C6  6F7B               	movwf	(MIOAdcAjuste2_5@k1+2)& (0+255),b
  2655  0007C8  0E00               	movlw	0
  2656  0007CA  6F7C               	movwf	(MIOAdcAjuste2_5@k1+3)& (0+255),b
  2657                           
  2658                           ; BSR set to: 1
  2659                           ;RutinaModIO15.c: 127: MIOAdcLeido2Act();
  2660  0007CC  ECC7  F012         	call	_MIOAdcLeido2Act	;wreg free
  2661                           
  2662                           ;RutinaModIO15.c: 129: MIOAdcAct[0] = (MIOAdcAct[0]*k1)/1000;
  2663  0007D0  C033  F019         	movff	_MIOAdcAct,___lmul@multiplier
  2664  0007D4  C034  F01A         	movff	_MIOAdcAct+1,___lmul@multiplier+1
  2665  0007D8  0E00               	movlw	0
  2666  0007DA  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2667  0007DC  0EFF               	movlw	-1
  2668  0007DE  6E1B               	movwf	___lmul@multiplier+2,c
  2669  0007E0  6E1C               	movwf	___lmul@multiplier+3,c
  2670  0007E2  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2671  0007E6  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2672  0007EA  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2673  0007EE  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2674  0007F2  ECB7  F00F         	call	___lmul	;wreg free
  2675  0007F6  C019  F025         	movff	?___lmul,___aldiv@dividend
  2676  0007FA  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2677  0007FE  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2678  000802  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2679  000806  0EE8               	movlw	232
  2680  000808  6E29               	movwf	___aldiv@divisor,c
  2681  00080A  0E03               	movlw	3
  2682  00080C  6E2A               	movwf	___aldiv@divisor+1,c
  2683  00080E  0E00               	movlw	0
  2684  000810  6E2B               	movwf	___aldiv@divisor+2,c
  2685  000812  0E00               	movlw	0
  2686  000814  6E2C               	movwf	___aldiv@divisor+3,c
  2687  000816  EC3E  F00A         	call	___aldiv	;wreg free
  2688  00081A  C025  F033         	movff	?___aldiv,_MIOAdcAct
  2689  00081E  C026  F034         	movff	?___aldiv+1,_MIOAdcAct+1
  2690                           
  2691                           ;RutinaModIO15.c: 130: MIOAdcAct[1] = (MIOAdcAct[1]*k1)/1000;
  2692  000822  EE20  F035         	lfsr	2,_MIOAdcAct+2
  2693  000826  CFDE F019          	movff	postinc2,___lmul@multiplier
  2694  00082A  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2695  00082E  0E00               	movlw	0
  2696  000830  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2697  000832  0EFF               	movlw	-1
  2698  000834  6E1B               	movwf	___lmul@multiplier+2,c
  2699  000836  6E1C               	movwf	___lmul@multiplier+3,c
  2700  000838  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2701  00083C  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2702  000840  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2703  000844  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2704  000848  ECB7  F00F         	call	___lmul	;wreg free
  2705  00084C  C019  F025         	movff	?___lmul,___aldiv@dividend
  2706  000850  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2707  000854  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2708  000858  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2709  00085C  0EE8               	movlw	232
  2710  00085E  6E29               	movwf	___aldiv@divisor,c
  2711  000860  0E03               	movlw	3
  2712  000862  6E2A               	movwf	___aldiv@divisor+1,c
  2713  000864  0E00               	movlw	0
  2714  000866  6E2B               	movwf	___aldiv@divisor+2,c
  2715  000868  0E00               	movlw	0
  2716  00086A  6E2C               	movwf	___aldiv@divisor+3,c
  2717  00086C  EC3E  F00A         	call	___aldiv	;wreg free
  2718  000870  C025  F035         	movff	?___aldiv,_MIOAdcAct+2
  2719  000874  C026  F036         	movff	?___aldiv+1,_MIOAdcAct+3
  2720                           
  2721                           ;RutinaModIO15.c: 131: MIOAdcAct[2] = (MIOAdcAct[2]*k1)/1000;
  2722  000878  EE20  F037         	lfsr	2,_MIOAdcAct+4
  2723  00087C  CFDE F019          	movff	postinc2,___lmul@multiplier
  2724  000880  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2725  000884  0E00               	movlw	0
  2726  000886  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2727  000888  0EFF               	movlw	-1
  2728  00088A  6E1B               	movwf	___lmul@multiplier+2,c
  2729  00088C  6E1C               	movwf	___lmul@multiplier+3,c
  2730  00088E  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2731  000892  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2732  000896  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2733  00089A  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2734  00089E  ECB7  F00F         	call	___lmul	;wreg free
  2735  0008A2  C019  F025         	movff	?___lmul,___aldiv@dividend
  2736  0008A6  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2737  0008AA  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2738  0008AE  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2739  0008B2  0EE8               	movlw	232
  2740  0008B4  6E29               	movwf	___aldiv@divisor,c
  2741  0008B6  0E03               	movlw	3
  2742  0008B8  6E2A               	movwf	___aldiv@divisor+1,c
  2743  0008BA  0E00               	movlw	0
  2744  0008BC  6E2B               	movwf	___aldiv@divisor+2,c
  2745  0008BE  0E00               	movlw	0
  2746  0008C0  6E2C               	movwf	___aldiv@divisor+3,c
  2747  0008C2  EC3E  F00A         	call	___aldiv	;wreg free
  2748  0008C6  C025  F037         	movff	?___aldiv,_MIOAdcAct+4
  2749  0008CA  C026  F038         	movff	?___aldiv+1,_MIOAdcAct+5
  2750                           
  2751                           ;RutinaModIO15.c: 132: MIOAdcAct[3] = (MIOAdcAct[3]*k1)/1000;
  2752  0008CE  EE20  F039         	lfsr	2,_MIOAdcAct+6
  2753  0008D2  CFDE F019          	movff	postinc2,___lmul@multiplier
  2754  0008D6  CFDD F01A          	movff	postdec2,___lmul@multiplier+1
  2755  0008DA  0E00               	movlw	0
  2756  0008DC  BE1A               	btfsc	___lmul@multiplier+1,7,c
  2757  0008DE  0EFF               	movlw	-1
  2758  0008E0  6E1B               	movwf	___lmul@multiplier+2,c
  2759  0008E2  6E1C               	movwf	___lmul@multiplier+3,c
  2760  0008E4  C179  F01D         	movff	MIOAdcAjuste2_5@k1,___lmul@multiplicand
  2761  0008E8  C17A  F01E         	movff	MIOAdcAjuste2_5@k1+1,___lmul@multiplicand+1
  2762  0008EC  C17B  F01F         	movff	MIOAdcAjuste2_5@k1+2,___lmul@multiplicand+2
  2763  0008F0  C17C  F020         	movff	MIOAdcAjuste2_5@k1+3,___lmul@multiplicand+3
  2764  0008F4  ECB7  F00F         	call	___lmul	;wreg free
  2765  0008F8  C019  F025         	movff	?___lmul,___aldiv@dividend
  2766  0008FC  C01A  F026         	movff	?___lmul+1,___aldiv@dividend+1
  2767  000900  C01B  F027         	movff	?___lmul+2,___aldiv@dividend+2
  2768  000904  C01C  F028         	movff	?___lmul+3,___aldiv@dividend+3
  2769  000908  0EE8               	movlw	232
  2770  00090A  6E29               	movwf	___aldiv@divisor,c
  2771  00090C  0E03               	movlw	3
  2772  00090E  6E2A               	movwf	___aldiv@divisor+1,c
  2773  000910  0E00               	movlw	0
  2774  000912  6E2B               	movwf	___aldiv@divisor+2,c
  2775  000914  0E00               	movlw	0
  2776  000916  6E2C               	movwf	___aldiv@divisor+3,c
  2777  000918  EC3E  F00A         	call	___aldiv	;wreg free
  2778  00091C  C025  F039         	movff	?___aldiv,_MIOAdcAct+6
  2779  000920  C026  F03A         	movff	?___aldiv+1,_MIOAdcAct+7
  2780                           
  2781                           ;RutinaModIO15.c: 134: if (MIOAdcAct[0]>4095){MIOAdcAct[0]=4095;}
  2782  000924  BE34               	btfsc	_MIOAdcAct+1,7,c
  2783  000926  D007               	goto	l5002
  2784  000928  0E10               	movlw	16
  2785  00092A  5C34               	subwf	_MIOAdcAct+1,w,c
  2786  00092C  A0D8               	btfss	status,0,c
  2787  00092E  D003               	goto	l5002
  2788  000930  0E0F               	movlw	15
  2789  000932  6E34               	movwf	_MIOAdcAct+1,c
  2790  000934  6833               	setf	_MIOAdcAct,c
  2791  000936                     l5002:
  2792                           
  2793                           ;RutinaModIO15.c: 135: if (MIOAdcAct[1]>4095){MIOAdcAct[1]=4095;}
  2794  000936  BE36               	btfsc	_MIOAdcAct+3,7,c
  2795  000938  D007               	goto	l5006
  2796  00093A  0E10               	movlw	16
  2797  00093C  5C36               	subwf	_MIOAdcAct+3,w,c
  2798  00093E  A0D8               	btfss	status,0,c
  2799  000940  D003               	goto	l5006
  2800  000942  0E0F               	movlw	15
  2801  000944  6E36               	movwf	_MIOAdcAct+3,c
  2802  000946  6835               	setf	_MIOAdcAct+2,c
  2803  000948                     l5006:
  2804                           
  2805                           ;RutinaModIO15.c: 136: if (MIOAdcAct[2]>4095){MIOAdcAct[2]=4095;}
  2806  000948  BE38               	btfsc	_MIOAdcAct+5,7,c
  2807  00094A  D007               	goto	l5010
  2808  00094C  0E10               	movlw	16
  2809  00094E  5C38               	subwf	_MIOAdcAct+5,w,c
  2810  000950  A0D8               	btfss	status,0,c
  2811  000952  D003               	goto	l5010
  2812  000954  0E0F               	movlw	15
  2813  000956  6E38               	movwf	_MIOAdcAct+5,c
  2814  000958  6837               	setf	_MIOAdcAct+4,c
  2815  00095A                     l5010:
  2816                           
  2817                           ;RutinaModIO15.c: 137: if (MIOAdcAct[3]>4095){MIOAdcAct[3]=4095;}
  2818  00095A  BE3A               	btfsc	_MIOAdcAct+7,7,c
  2819  00095C  0012               	return	
  2820  00095E  0E10               	movlw	16
  2821  000960  5C3A               	subwf	_MIOAdcAct+7,w,c
  2822  000962  A0D8               	btfss	status,0,c
  2823  000964  0012               	return	
  2824  000966  0E0F               	movlw	15
  2825  000968  6E3A               	movwf	_MIOAdcAct+7,c
  2826  00096A  6839               	setf	_MIOAdcAct+6,c
  2827  00096C  0012               	return	
  2828  00096E                     __end_of_MIOAdcAjuste2_5:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           status	equ	0xFD8
  2841                           
  2842 ;; *************** function ___lmul *****************
  2843 ;; Defined at:
  2844 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  multiplier      4   24[COMRAM] unsigned long 
  2847 ;;  multiplicand    4   28[COMRAM] unsigned long 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  product         4   32[COMRAM] unsigned long 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  4   24[COMRAM] unsigned long 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2859 ;;      Params:         8       0       0       0       0       0       0       0       0
  2860 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2862 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2863 ;;Total ram usage:       12 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    5
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_MIOAdcAjuste2_5
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text14
  2874  001F6E                     __ptext14:
  2875                           	opt stack 0
  2876  001F6E                     ___lmul:
  2877                           	opt stack 21
  2878                           
  2879                           ;incstack = 0
  2880  001F6E  0E00               	movlw	0
  2881  001F70  6E21               	movwf	___lmul@product,c
  2882  001F72  0E00               	movlw	0
  2883  001F74  6E22               	movwf	___lmul@product+1,c
  2884  001F76  0E00               	movlw	0
  2885  001F78  6E23               	movwf	___lmul@product+2,c
  2886  001F7A  0E00               	movlw	0
  2887  001F7C  6E24               	movwf	___lmul@product+3,c
  2888  001F7E                     l4762:
  2889  001F7E  A019               	btfss	___lmul@multiplier,0,c
  2890  001F80  D008               	goto	l4766
  2891  001F82  501D               	movf	___lmul@multiplicand,w,c
  2892  001F84  2621               	addwf	___lmul@product,f,c
  2893  001F86  501E               	movf	___lmul@multiplicand+1,w,c
  2894  001F88  2222               	addwfc	___lmul@product+1,f,c
  2895  001F8A  501F               	movf	___lmul@multiplicand+2,w,c
  2896  001F8C  2223               	addwfc	___lmul@product+2,f,c
  2897  001F8E  5020               	movf	___lmul@multiplicand+3,w,c
  2898  001F90  2224               	addwfc	___lmul@product+3,f,c
  2899  001F92                     l4766:
  2900  001F92  90D8               	bcf	status,0,c
  2901  001F94  361D               	rlcf	___lmul@multiplicand,f,c
  2902  001F96  361E               	rlcf	___lmul@multiplicand+1,f,c
  2903  001F98  361F               	rlcf	___lmul@multiplicand+2,f,c
  2904  001F9A  3620               	rlcf	___lmul@multiplicand+3,f,c
  2905  001F9C  90D8               	bcf	status,0,c
  2906  001F9E  321C               	rrcf	___lmul@multiplier+3,f,c
  2907  001FA0  321B               	rrcf	___lmul@multiplier+2,f,c
  2908  001FA2  321A               	rrcf	___lmul@multiplier+1,f,c
  2909  001FA4  3219               	rrcf	___lmul@multiplier,f,c
  2910  001FA6  5019               	movf	___lmul@multiplier,w,c
  2911  001FA8  101A               	iorwf	___lmul@multiplier+1,w,c
  2912  001FAA  101B               	iorwf	___lmul@multiplier+2,w,c
  2913  001FAC  101C               	iorwf	___lmul@multiplier+3,w,c
  2914  001FAE  A4D8               	btfss	status,2,c
  2915  001FB0  D7E6               	goto	l4762
  2916  001FB2  C021  F019         	movff	___lmul@product,?___lmul
  2917  001FB6  C022  F01A         	movff	___lmul@product+1,?___lmul+1
  2918  001FBA  C023  F01B         	movff	___lmul@product+2,?___lmul+2
  2919  001FBE  C024  F01C         	movff	___lmul@product+3,?___lmul+3
  2920  001FC2  0012               	return		;funcret
  2921  001FC4                     __end_of___lmul:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           postinc2	equ	0xFDE
  2932                           postdec2	equ	0xFDD
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function ___aldiv *****************
  2936 ;; Defined at:
  2937 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  dividend        4   36[COMRAM] long 
  2940 ;;  divisor         4   40[COMRAM] long 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  quotient        4    2[BANK0 ] long 
  2943 ;;  sign            1    1[BANK0 ] unsigned char 
  2944 ;;  counter         1    0[BANK0 ] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  4   36[COMRAM] long 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2954 ;;      Params:         8       0       0       0       0       0       0       0       0
  2955 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2957 ;;      Totals:         8       6       0       0       0       0       0       0       0
  2958 ;;Total ram usage:       14 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    5
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_MIOAdcAjuste2_5
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text15
  2969  00147C                     __ptext15:
  2970                           	opt stack 0
  2971  00147C                     ___aldiv:
  2972                           	opt stack 21
  2973                           
  2974                           ;incstack = 0
  2975  00147C  0E00               	movlw	0
  2976  00147E  0100               	movlb	0	; () banked
  2977  001480  6FF6               	movwf	___aldiv@sign& (0+255),b
  2978                           
  2979                           ; BSR set to: 0
  2980  001482  AE2C               	btfss	___aldiv@divisor+3,7,c
  2981  001484  D00B               	goto	l4778
  2982                           
  2983                           ; BSR set to: 0
  2984  001486  1E2C               	comf	___aldiv@divisor+3,f,c
  2985  001488  1E2B               	comf	___aldiv@divisor+2,f,c
  2986  00148A  1E2A               	comf	___aldiv@divisor+1,f,c
  2987  00148C  6C29               	negf	___aldiv@divisor,c
  2988  00148E  0E00               	movlw	0
  2989  001490  222A               	addwfc	___aldiv@divisor+1,f,c
  2990  001492  222B               	addwfc	___aldiv@divisor+2,f,c
  2991  001494  222C               	addwfc	___aldiv@divisor+3,f,c
  2992                           
  2993                           ; BSR set to: 0
  2994  001496  0E01               	movlw	1
  2995  001498  0100               	movlb	0	; () banked
  2996  00149A  6FF6               	movwf	___aldiv@sign& (0+255),b
  2997  00149C                     l4778:
  2998                           
  2999                           ; BSR set to: 0
  3000  00149C  AE28               	btfss	___aldiv@dividend+3,7,c
  3001  00149E  D00B               	goto	l4784
  3002                           
  3003                           ; BSR set to: 0
  3004  0014A0  1E28               	comf	___aldiv@dividend+3,f,c
  3005  0014A2  1E27               	comf	___aldiv@dividend+2,f,c
  3006  0014A4  1E26               	comf	___aldiv@dividend+1,f,c
  3007  0014A6  6C25               	negf	___aldiv@dividend,c
  3008  0014A8  0E00               	movlw	0
  3009  0014AA  2226               	addwfc	___aldiv@dividend+1,f,c
  3010  0014AC  2227               	addwfc	___aldiv@dividend+2,f,c
  3011  0014AE  2228               	addwfc	___aldiv@dividend+3,f,c
  3012                           
  3013                           ; BSR set to: 0
  3014  0014B0  0E01               	movlw	1
  3015  0014B2  0100               	movlb	0	; () banked
  3016  0014B4  1BF6               	xorwf	___aldiv@sign& (0+255),f,b
  3017  0014B6                     l4784:
  3018                           
  3019                           ; BSR set to: 0
  3020  0014B6  0E00               	movlw	0
  3021  0014B8  0100               	movlb	0	; () banked
  3022  0014BA  6FF7               	movwf	___aldiv@quotient& (0+255),b
  3023  0014BC  0E00               	movlw	0
  3024  0014BE  6FF8               	movwf	(___aldiv@quotient+1)& (0+255),b
  3025  0014C0  0E00               	movlw	0
  3026  0014C2  6FF9               	movwf	(___aldiv@quotient+2)& (0+255),b
  3027  0014C4  0E00               	movlw	0
  3028  0014C6  6FFA               	movwf	(___aldiv@quotient+3)& (0+255),b
  3029                           
  3030                           ; BSR set to: 0
  3031  0014C8  5029               	movf	___aldiv@divisor,w,c
  3032  0014CA  102A               	iorwf	___aldiv@divisor+1,w,c
  3033  0014CC  102B               	iorwf	___aldiv@divisor+2,w,c
  3034  0014CE  102C               	iorwf	___aldiv@divisor+3,w,c
  3035  0014D0  B4D8               	btfsc	status,2,c
  3036  0014D2  D02F               	goto	l4806
  3037                           
  3038                           ; BSR set to: 0
  3039  0014D4  0E01               	movlw	1
  3040  0014D6  0100               	movlb	0	; () banked
  3041  0014D8  6FF5               	movwf	___aldiv@counter& (0+255),b
  3042  0014DA  D007               	goto	l4792
  3043  0014DC                     l4790:
  3044                           
  3045                           ; BSR set to: 0
  3046  0014DC  90D8               	bcf	status,0,c
  3047  0014DE  3629               	rlcf	___aldiv@divisor,f,c
  3048  0014E0  362A               	rlcf	___aldiv@divisor+1,f,c
  3049  0014E2  362B               	rlcf	___aldiv@divisor+2,f,c
  3050  0014E4  362C               	rlcf	___aldiv@divisor+3,f,c
  3051  0014E6  0100               	movlb	0	; () banked
  3052  0014E8  2BF5               	incf	___aldiv@counter& (0+255),f,b
  3053  0014EA                     l4792:
  3054                           
  3055                           ; BSR set to: 0
  3056  0014EA  AE2C               	btfss	___aldiv@divisor+3,7,c
  3057  0014EC  D7F7               	goto	l4790
  3058  0014EE                     l4794:
  3059                           
  3060                           ; BSR set to: 0
  3061  0014EE  0100               	movlb	0	; () banked
  3062  0014F0  90D8               	bcf	status,0,c
  3063  0014F2  37F7               	rlcf	___aldiv@quotient& (0+255),f,b
  3064  0014F4  37F8               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3065  0014F6  37F9               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3066  0014F8  37FA               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069  0014FA  5029               	movf	___aldiv@divisor,w,c
  3070  0014FC  5C25               	subwf	___aldiv@dividend,w,c
  3071  0014FE  502A               	movf	___aldiv@divisor+1,w,c
  3072  001500  5826               	subwfb	___aldiv@dividend+1,w,c
  3073  001502  502B               	movf	___aldiv@divisor+2,w,c
  3074  001504  5827               	subwfb	___aldiv@dividend+2,w,c
  3075  001506  502C               	movf	___aldiv@divisor+3,w,c
  3076  001508  5828               	subwfb	___aldiv@dividend+3,w,c
  3077  00150A  A0D8               	btfss	status,0,c
  3078  00150C  D00A               	goto	l4802
  3079                           
  3080                           ; BSR set to: 0
  3081  00150E  5029               	movf	___aldiv@divisor,w,c
  3082  001510  5E25               	subwf	___aldiv@dividend,f,c
  3083  001512  502A               	movf	___aldiv@divisor+1,w,c
  3084  001514  5A26               	subwfb	___aldiv@dividend+1,f,c
  3085  001516  502B               	movf	___aldiv@divisor+2,w,c
  3086  001518  5A27               	subwfb	___aldiv@dividend+2,f,c
  3087  00151A  502C               	movf	___aldiv@divisor+3,w,c
  3088  00151C  5A28               	subwfb	___aldiv@dividend+3,f,c
  3089                           
  3090                           ; BSR set to: 0
  3091  00151E  0100               	movlb	0	; () banked
  3092  001520  81F7               	bsf	___aldiv@quotient& (0+255),0,b
  3093  001522                     l4802:
  3094                           
  3095                           ; BSR set to: 0
  3096  001522  90D8               	bcf	status,0,c
  3097  001524  322C               	rrcf	___aldiv@divisor+3,f,c
  3098  001526  322B               	rrcf	___aldiv@divisor+2,f,c
  3099  001528  322A               	rrcf	___aldiv@divisor+1,f,c
  3100  00152A  3229               	rrcf	___aldiv@divisor,f,c
  3101                           
  3102                           ; BSR set to: 0
  3103  00152C  0100               	movlb	0	; () banked
  3104  00152E  2FF5               	decfsz	___aldiv@counter& (0+255),f,b
  3105  001530  D7DE               	goto	l4794
  3106  001532                     l4806:
  3107                           
  3108                           ; BSR set to: 0
  3109  001532  0100               	movlb	0	; () banked
  3110  001534  51F6               	movf	___aldiv@sign& (0+255),w,b
  3111  001536  0100               	movlb	0	; () banked
  3112  001538  B4D8               	btfsc	status,2,c
  3113  00153A  D009               	goto	l4810
  3114                           
  3115                           ; BSR set to: 0
  3116  00153C  0100               	movlb	0	; () banked
  3117  00153E  1FFA               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3118  001540  1FF9               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3119  001542  1FF8               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3120  001544  6DF7               	negf	___aldiv@quotient& (0+255),b
  3121  001546  0E00               	movlw	0
  3122  001548  23F8               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3123  00154A  23F9               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3124  00154C  23FA               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3125  00154E                     l4810:
  3126                           
  3127                           ; BSR set to: 0
  3128  00154E  C0F7  F025         	movff	___aldiv@quotient,?___aldiv
  3129  001552  C0F8  F026         	movff	___aldiv@quotient+1,?___aldiv+1
  3130  001556  C0F9  F027         	movff	___aldiv@quotient+2,?___aldiv+2
  3131  00155A  C0FA  F028         	movff	___aldiv@quotient+3,?___aldiv+3
  3132  00155E  0012               	return	
  3133  001560                     __end_of___aldiv:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           postinc0	equ	0xFEE
  3140                           wreg	equ	0xFE8
  3141                           postdec1	equ	0xFE5
  3142                           fsr1l	equ	0xFE1
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           status	equ	0xFD8
  3146                           
  3147 ;; *************** function _MIOAdcLeido2Act *****************
  3148 ;; Defined at:
  3149 ;;		line 109 in file "RutinaModIO15.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;		None
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		None
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3163 ;;      Params:         0       0       0       0       0       0       0       0       0
  3164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3166 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3167 ;;Total ram usage:        0 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    5
  3170 ;; This function calls:
  3171 ;;		Nothing
  3172 ;; This function is called by:
  3173 ;;		_MIOAdcAjuste2_5
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           	psect	text16
  3178  00258E                     __ptext16:
  3179                           	opt stack 0
  3180  00258E                     _MIOAdcLeido2Act:
  3181                           	opt stack 21
  3182                           
  3183                           ;RutinaModIO15.c: 110: GIE = 0;
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;incstack = 0
  3187  00258E  9EF2               	bcf	intcon,7,c	;volatile
  3188                           
  3189                           ;RutinaModIO15.c: 112: MIOAdcAct[0] = MIOAdcLeido[0];
  3190  002590  C0DE  F033         	movff	_MIOAdcLeido,_MIOAdcAct
  3191  002594  C0DF  F034         	movff	_MIOAdcLeido+1,_MIOAdcAct+1
  3192                           
  3193                           ;RutinaModIO15.c: 113: MIOAdcAct[1] = MIOAdcLeido[1];
  3194  002598  C0E0  F035         	movff	_MIOAdcLeido+2,_MIOAdcAct+2
  3195  00259C  C0E1  F036         	movff	_MIOAdcLeido+3,_MIOAdcAct+3
  3196                           
  3197                           ;RutinaModIO15.c: 114: MIOAdcAct[2] = MIOAdcLeido[2];
  3198  0025A0  C0E2  F037         	movff	_MIOAdcLeido+4,_MIOAdcAct+4
  3199  0025A4  C0E3  F038         	movff	_MIOAdcLeido+5,_MIOAdcAct+5
  3200                           
  3201                           ;RutinaModIO15.c: 115: MIOAdcAct[3] = MIOAdcLeido[3];
  3202  0025A8  C0E4  F039         	movff	_MIOAdcLeido+6,_MIOAdcAct+6
  3203  0025AC  C0E5  F03A         	movff	_MIOAdcLeido+7,_MIOAdcAct+7
  3204                           
  3205                           ;RutinaModIO15.c: 118: GIE = 1;
  3206  0025B0  8EF2               	bsf	intcon,7,c	;volatile
  3207  0025B2  0012               	return		;funcret
  3208  0025B4                     __end_of_MIOAdcLeido2Act:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           intcon	equ	0xFF2
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           postdec1	equ	0xFE5
  3218                           fsr1l	equ	0xFE1
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _MstInit *****************
  3224 ;; Defined at:
  3225 ;;		line 40 in file "Maestro21.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      void 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3239 ;;      Params:         0       0       0       0       0       0       0       0       0
  3240 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3242 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3243 ;;Total ram usage:        0 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    7
  3246 ;; This function calls:
  3247 ;;		_Delay_ms
  3248 ;;		_LedAmarilloInit
  3249 ;;		_LedParpadea
  3250 ;;		_RsInit
  3251 ;; This function is called by:
  3252 ;;		_MstMain
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	text17
  3257  00210A                     __ptext17:
  3258                           	opt stack 0
  3259  00210A                     _MstInit:
  3260                           	opt stack 22
  3261                           
  3262                           ;Maestro21.c: 41: PORTB = 0;
  3263                           
  3264                           ;incstack = 0
  3265  00210A  0E00               	movlw	0
  3266  00210C  6E81               	movwf	3969,c	;volatile
  3267                           
  3268                           ;Maestro21.c: 42: TRISB = 0;
  3269  00210E  0E00               	movlw	0
  3270  002110  6E93               	movwf	3987,c	;volatile
  3271                           
  3272                           ;Maestro21.c: 45: ANSELA = 0;
  3273  002112  0E00               	movlw	0
  3274  002114  010F               	movlb	15	; () banked
  3275  002116  6F5B               	movwf	91,b	;volatile
  3276                           
  3277                           ;Maestro21.c: 46: ANSELB = 0;
  3278  002118  0E00               	movlw	0
  3279  00211A  010F               	movlb	15	; () banked
  3280  00211C  6F5C               	movwf	92,b	;volatile
  3281                           
  3282                           ;Maestro21.c: 47: ANSELC = 0;
  3283  00211E  0E00               	movlw	0
  3284  002120  010F               	movlb	15	; () banked
  3285  002122  6F5D               	movwf	93,b	;volatile
  3286                           
  3287                           ;Maestro21.c: 49: OSCCON = 0x62;
  3288  002124  0E62               	movlw	98
  3289  002126  6ED3               	movwf	4051,c	;volatile
  3290                           
  3291                           ;Maestro21.c: 50: PR2 = 124;
  3292  002128  0E7C               	movlw	124
  3293  00212A  6EBB               	movwf	4027,c	;volatile
  3294                           
  3295                           ;Maestro21.c: 51: T2CON = 6;
  3296  00212C  0E06               	movlw	6
  3297  00212E  6EBA               	movwf	4026,c	;volatile
  3298                           
  3299                           ; BSR set to: 15
  3300                           ;Maestro21.c: 53: TMR2IE = 1;
  3301  002130  829D               	bsf	3997,1,c	;volatile
  3302                           
  3303                           ;Maestro21.c: 54: INTCON = 0xC0;
  3304  002132  0EC0               	movlw	192
  3305  002134  6EF2               	movwf	intcon,c	;volatile
  3306                           
  3307                           ; BSR set to: 15
  3308                           ;Maestro21.c: 55: LedAmarilloInit ();
  3309  002136  EC4D  F013         	call	_LedAmarilloInit	;wreg free
  3310                           
  3311                           ;Maestro21.c: 56: RsInit(9600);
  3312  00213A  0E80               	movlw	128
  3313  00213C  6E1D               	movwf	RsInit@Baudrate,c
  3314  00213E  0E25               	movlw	37
  3315  002140  6E1E               	movwf	RsInit@Baudrate+1,c
  3316  002142  0E00               	movlw	0
  3317  002144  6E1F               	movwf	RsInit@Baudrate+2,c
  3318  002146  0E00               	movlw	0
  3319  002148  6E20               	movwf	RsInit@Baudrate+3,c
  3320  00214A  EC68  F011         	call	_RsInit	;wreg free
  3321                           
  3322                           ;Maestro21.c: 62: if(0){
  3323  00214E  0012               	return	
  3324  002150                     __end_of_MstInit:
  3325                           	opt stack 0
  3326                           tblptru	equ	0xFF8
  3327                           tblptrh	equ	0xFF7
  3328                           tblptrl	equ	0xFF6
  3329                           tablat	equ	0xFF5
  3330                           intcon	equ	0xFF2
  3331                           postinc0	equ	0xFEE
  3332                           wreg	equ	0xFE8
  3333                           postdec1	equ	0xFE5
  3334                           fsr1l	equ	0xFE1
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _RsInit *****************
  3340 ;; Defined at:
  3341 ;;		line 67 in file "RedSerie13.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  Baudrate        4   28[COMRAM] long 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, status,2, status,0, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3355 ;;      Params:         4       0       0       0       0       0       0       0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3358 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3359 ;;Total ram usage:        4 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    6
  3362 ;; This function calls:
  3363 ;;		_PsInit
  3364 ;; This function is called by:
  3365 ;;		_MstInit
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text18
  3370  0022D0                     __ptext18:
  3371                           	opt stack 0
  3372  0022D0                     _RsInit:
  3373                           	opt stack 22
  3374                           
  3375                           ;RedSerie13.c: 68: PsInit(Baudrate);
  3376                           
  3377                           ;incstack = 0
  3378  0022D0  C01D  F019         	movff	RsInit@Baudrate,PsInit@Baudrate
  3379  0022D4  C01E  F01A         	movff	RsInit@Baudrate+1,PsInit@Baudrate+1
  3380  0022D8  C01F  F01B         	movff	RsInit@Baudrate+2,PsInit@Baudrate+2
  3381  0022DC  C020  F01C         	movff	RsInit@Baudrate+3,PsInit@Baudrate+3
  3382  0022E0  EC21  F012         	call	_PsInit	;wreg free
  3383                           
  3384                           ;RedSerie13.c: 69: RsRxCarDobleF = 0;
  3385  0022E4  0E00               	movlw	0
  3386  0022E6  0100               	movlb	0	; () banked
  3387  0022E8  6FBF               	movwf	(_RsRxCarDobleF+1)& (0+255),b
  3388  0022EA  0E00               	movlw	0
  3389  0022EC  6FBE               	movwf	_RsRxCarDobleF& (0+255),b
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;RedSerie13.c: 70: RsTxCarDobleF = 0;
  3393  0022EE  0E00               	movlw	0
  3394  0022F0  0100               	movlb	0	; () banked
  3395  0022F2  6FBB               	movwf	(_RsTxCarDobleF+1)& (0+255),b
  3396  0022F4  0E00               	movlw	0
  3397  0022F6  6FBA               	movwf	_RsTxCarDobleF& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;RedSerie13.c: 71: RsRxRecibioMsgF = 0;
  3401  0022F8  0E00               	movlw	0
  3402  0022FA  0100               	movlb	0	; () banked
  3403  0022FC  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  3404  0022FE  0E00               	movlw	0
  3405  002300  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;RedSerie13.c: 72: RsRxIndex = -1;
  3409  002302  0100               	movlb	0	; () banked
  3410  002304  69C6               	setf	_RsRxIndex& (0+255),b
  3411  002306  69C7               	setf	(_RsRxIndex+1)& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414  002308  0012               	return		;funcret
  3415  00230A                     __end_of_RsInit:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           intcon	equ	0xFF2
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _PsInit *****************
  3431 ;; Defined at:
  3432 ;;		line 56 in file "RedSerie13.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  Baudrate        4   24[COMRAM] long 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		wreg, status,2, status,0
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3446 ;;      Params:         4       0       0       0       0       0       0       0       0
  3447 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3449 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3450 ;;Total ram usage:        4 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    5
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_RsInit
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text19
  3461  002442                     __ptext19:
  3462                           	opt stack 0
  3463  002442                     _PsInit:
  3464                           	opt stack 22
  3465                           
  3466                           ;RedSerie13.c: 57: SPBRG = 207;
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;incstack = 0
  3470  002442  0ECF               	movlw	207
  3471  002444  6EAF               	movwf	4015,c	;volatile
  3472                           
  3473                           ;RedSerie13.c: 58: SPBRGH = 0;
  3474  002446  0E00               	movlw	0
  3475  002448  6EB0               	movwf	4016,c	;volatile
  3476                           
  3477                           ;RedSerie13.c: 59: if (Baudrate == 115200) {SPBRG = 16;}
  3478  00244A  0EC2               	movlw	194
  3479  00244C  181A               	xorwf	PsInit@Baudrate+1,w,c
  3480  00244E  E107               	bnz	l191
  3481  002450  041B               	decf	PsInit@Baudrate+2,w,c
  3482  002452  1019               	iorwf	PsInit@Baudrate,w,c
  3483  002454  101C               	iorwf	PsInit@Baudrate+3,w,c
  3484  002456  A4D8               	btfss	status,2,c
  3485  002458  D002               	goto	l191
  3486  00245A  0E10               	movlw	16
  3487  00245C  6EAF               	movwf	4015,c	;volatile
  3488  00245E                     l191:
  3489                           
  3490                           ;RedSerie13.c: 60: BAUDCON = 0x0A;
  3491  00245E  0E0A               	movlw	10
  3492  002460  6EB8               	movwf	4024,c	;volatile
  3493                           
  3494                           ;RedSerie13.c: 61: RCSTA = 0x90;
  3495  002462  0E90               	movlw	144
  3496  002464  6EAB               	movwf	4011,c	;volatile
  3497                           
  3498                           ;RedSerie13.c: 62: TXSTA = 0x24;
  3499  002466  0E24               	movlw	36
  3500  002468  6EAC               	movwf	4012,c	;volatile
  3501                           
  3502                           ;RedSerie13.c: 63: RCIF = 0;
  3503  00246A  9A9E               	bcf	3998,5,c	;volatile
  3504                           
  3505                           ;RedSerie13.c: 64: TXIF = 1;
  3506  00246C  889E               	bsf	3998,4,c	;volatile
  3507  00246E  0012               	return		;funcret
  3508  002470                     __end_of_PsInit:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           intcon	equ	0xFF2
  3515                           postinc0	equ	0xFEE
  3516                           wreg	equ	0xFE8
  3517                           postdec1	equ	0xFE5
  3518                           fsr1l	equ	0xFE1
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _LedParpadea *****************
  3524 ;; Defined at:
  3525 ;;		line 39 in file "PruebaLed20.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  Nveces          2   29[COMRAM] int 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  I               2   32[COMRAM] int 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3539 ;;      Params:         2       0       0       0       0       0       0       0       0
  3540 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3541 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3542 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3543 ;;Total ram usage:        5 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    6
  3546 ;; This function calls:
  3547 ;;		_Delay_ms
  3548 ;; This function is called by:
  3549 ;;		_MstInit
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text20
  3554  001E5E                     __ptext20:
  3555                           	opt stack 0
  3556  001E5E                     _LedParpadea:
  3557                           	opt stack 22
  3558                           
  3559                           ;PruebaLed20.c: 40: int I;
  3560                           ;PruebaLed20.c: 41: INTCON &= 0x7F;;
  3561                           
  3562                           ;incstack = 0
  3563  001E5E  9EF2               	bcf	intcon,7,c	;volatile
  3564                           
  3565                           ;PruebaLed20.c: 42: PORTCbits.RC0 = 0;
  3566  001E60  9082               	bcf	3970,0,c	;volatile
  3567                           
  3568                           ;PruebaLed20.c: 43: Delay_ms (1000);
  3569  001E62  0E03               	movlw	3
  3570  001E64  6E1A               	movwf	Delay_ms@delay+1,c
  3571  001E66  0EE8               	movlw	232
  3572  001E68  6E19               	movwf	Delay_ms@delay,c
  3573  001E6A  ECD6  F011         	call	_Delay_ms	;wreg free
  3574  001E6E                     l3620:
  3575                           
  3576                           ;PruebaLed20.c: 45: for (I=1; I<=Nveces; I++) {
  3577  001E6E  0E00               	movlw	0
  3578  001E70  6E22               	movwf	LedParpadea@I+1,c
  3579  001E72  0E01               	movlw	1
  3580  001E74  6E21               	movwf	LedParpadea@I,c
  3581  001E76  D010               	goto	l3628
  3582  001E78                     l116:
  3583                           
  3584                           ;PruebaLed20.c: 46: PORTCbits.RC0 = 1;
  3585  001E78  8082               	bsf	3970,0,c	;volatile
  3586                           
  3587                           ;PruebaLed20.c: 47: Delay_ms (400);
  3588  001E7A  0E01               	movlw	1
  3589  001E7C  6E1A               	movwf	Delay_ms@delay+1,c
  3590  001E7E  0E90               	movlw	144
  3591  001E80  6E19               	movwf	Delay_ms@delay,c
  3592  001E82  ECD6  F011         	call	_Delay_ms	;wreg free
  3593                           
  3594                           ;PruebaLed20.c: 48: PORTCbits.RC0 = 0;
  3595  001E86  9082               	bcf	3970,0,c	;volatile
  3596                           
  3597                           ;PruebaLed20.c: 49: Delay_ms (400);
  3598  001E88  0E01               	movlw	1
  3599  001E8A  6E1A               	movwf	Delay_ms@delay+1,c
  3600  001E8C  0E90               	movlw	144
  3601  001E8E  6E19               	movwf	Delay_ms@delay,c
  3602  001E90  ECD6  F011         	call	_Delay_ms	;wreg free
  3603  001E94  4A21               	infsnz	LedParpadea@I,f,c
  3604  001E96  2A22               	incf	LedParpadea@I+1,f,c
  3605  001E98                     l3628:
  3606  001E98  5021               	movf	LedParpadea@I,w,c
  3607  001E9A  5C1E               	subwf	LedParpadea@Nveces,w,c
  3608  001E9C  501F               	movf	LedParpadea@Nveces+1,w,c
  3609  001E9E  0A80               	xorlw	128
  3610  001EA0  6E20               	movwf	??_LedParpadea& (0+255),c
  3611  001EA2  5022               	movf	LedParpadea@I+1,w,c
  3612  001EA4  0A80               	xorlw	128
  3613  001EA6  5820               	subwfb	??_LedParpadea& (0+255),w,c
  3614  001EA8  B0D8               	btfsc	status,0,c
  3615  001EAA  D7E6               	goto	l116
  3616                           
  3617                           ;PruebaLed20.c: 50: }
  3618                           ;PruebaLed20.c: 51: Delay_ms (500);
  3619  001EAC  0E01               	movlw	1
  3620  001EAE  6E1A               	movwf	Delay_ms@delay+1,c
  3621  001EB0  0EF4               	movlw	244
  3622  001EB2  6E19               	movwf	Delay_ms@delay,c
  3623  001EB4  ECD6  F011         	call	_Delay_ms	;wreg free
  3624  001EB8  D7DA               	goto	l3620
  3625  001EBA                     __end_of_LedParpadea:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           intcon	equ	0xFF2
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _Delay_ms *****************
  3641 ;; Defined at:
  3642 ;;		line 56 in file "PruebaLed20.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  delay           2   24[COMRAM] int 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  I               2   27[COMRAM] int 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3656 ;;      Params:         2       0       0       0       0       0       0       0       0
  3657 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3658 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3659 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3660 ;;Total ram usage:        5 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    5
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_LedParpadea
  3667 ;;		_MstInit
  3668 ;;		_Ppal_Init
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text21
  3673  0023AC                     __ptext21:
  3674                           	opt stack 0
  3675  0023AC                     _Delay_ms:
  3676                           	opt stack 23
  3677                           
  3678                           ;PruebaLed20.c: 57: int I;
  3679                           ;PruebaLed20.c: 58: for (I=1; I<=delay; I++) { _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); }
  3680                           
  3681                           ;incstack = 0
  3682  0023AC  0E00               	movlw	0
  3683  0023AE  6E1D               	movwf	Delay_ms@I+1,c
  3684  0023B0  0E01               	movlw	1
  3685  0023B2  6E1C               	movwf	Delay_ms@I,c
  3686  0023B4  D009               	goto	l123
  3687  0023B6                     l3376:
  3688  0023B6  0E03               	movlw	3
  3689  0023B8  6E1B               	movwf	??_Delay_ms& (0+255),c
  3690  0023BA  0E98               	movlw	152
  3691  0023BC                     u3617:
  3692  0023BC  2EE8               	decfsz	wreg,f,c
  3693  0023BE  D7FE               	bra	u3617
  3694  0023C0  2E1B               	decfsz	??_Delay_ms& (0+255),f,c
  3695  0023C2  D7FC               	bra	u3617
  3696  0023C4  4A1C               	infsnz	Delay_ms@I,f,c
  3697  0023C6  2A1D               	incf	Delay_ms@I+1,f,c
  3698  0023C8                     l123:
  3699  0023C8  501C               	movf	Delay_ms@I,w,c
  3700  0023CA  5C19               	subwf	Delay_ms@delay,w,c
  3701  0023CC  501A               	movf	Delay_ms@delay+1,w,c
  3702  0023CE  0A80               	xorlw	128
  3703  0023D0  6E1B               	movwf	??_Delay_ms& (0+255),c
  3704  0023D2  501D               	movf	Delay_ms@I+1,w,c
  3705  0023D4  0A80               	xorlw	128
  3706  0023D6  581B               	subwfb	??_Delay_ms& (0+255),w,c
  3707  0023D8  A0D8               	btfss	status,0,c
  3708  0023DA  0012               	return	
  3709  0023DC  D7EC               	goto	l3376
  3710  0023DE                     __end_of_Delay_ms:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           intcon	equ	0xFF2
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           fsr1l	equ	0xFE1
  3721                           postinc2	equ	0xFDE
  3722                           postdec2	equ	0xFDD
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _LedAmarilloInit *****************
  3726 ;; Defined at:
  3727 ;;		line 18 in file "PruebaLed20.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    5
  3748 ;; This function calls:
  3749 ;;		Nothing
  3750 ;; This function is called by:
  3751 ;;		_MstInit
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text22
  3756  00269A                     __ptext22:
  3757                           	opt stack 0
  3758  00269A                     _LedAmarilloInit:
  3759                           	opt stack 23
  3760                           
  3761                           ;PruebaLed20.c: 19: TRISCbits.RC0 = 0;
  3762                           
  3763                           ;incstack = 0
  3764  00269A  9094               	bcf	3988,0,c	;volatile
  3765                           
  3766                           ;PruebaLed20.c: 20: LedContMs = 1;
  3767  00269C  0E00               	movlw	0
  3768  00269E  0101               	movlb	1	; () banked
  3769  0026A0  6F92               	movwf	(_LedContMs+1)& (0+255),b
  3770  0026A2  0E01               	movlw	1
  3771  0026A4  6F91               	movwf	_LedContMs& (0+255),b
  3772                           
  3773                           ; BSR set to: 1
  3774  0026A6  0012               	return		;funcret
  3775  0026A8                     __end_of_LedAmarilloInit:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           intcon	equ	0xFF2
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           status	equ	0xFD8
  3789                           
  3790 ;; *************** function _MstCiclo *****************
  3791 ;; Defined at:
  3792 ;;		line 68 in file "Maestro21.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;		None
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0
  3807 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3809 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3810 ;;Total ram usage:        0 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:   12
  3813 ;; This function calls:
  3814 ;;		_MstRsComando
  3815 ;; This function is called by:
  3816 ;;		_MstMain
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text23
  3821  002688                     __ptext23:
  3822                           	opt stack 0
  3823  002688                     _MstCiclo:
  3824                           	opt stack 17
  3825                           
  3826                           ;Maestro21.c: 75: if (RsRxRecibioMsgF) {MstRsComando();}
  3827                           
  3828                           ; BSR set to: 1
  3829                           ;incstack = 0
  3830  002688  0100               	movlb	0	; () banked
  3831  00268A  51C0               	movf	_RsRxRecibioMsgF& (0+255),w,b
  3832  00268C  0100               	movlb	0	; () banked
  3833  00268E  11C1               	iorwf	(_RsRxRecibioMsgF+1)& (0+255),w,b
  3834  002690  B4D8               	btfsc	status,2,c
  3835  002692  0012               	return	
  3836                           
  3837                           ; BSR set to: 0
  3838  002694  EC9D  F007         	call	_MstRsComando	;wreg free
  3839  002698  0012               	return	
  3840  00269A                     __end_of_MstCiclo:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           intcon	equ	0xFF2
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           postdec1	equ	0xFE5
  3850                           fsr1l	equ	0xFE1
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           status	equ	0xFD8
  3854                           
  3855 ;; *************** function _MstRsComando *****************
  3856 ;; Defined at:
  3857 ;;		line 26 in file "RsComando14.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  Ind             2   17[BANK1 ] unsigned short 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3871 ;;      Params:         0       0       0       0       0       0       0       0       0
  3872 ;;      Locals:         0       0       2       0       0       0       0       0       0
  3873 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3874 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3875 ;;Total ram usage:        5 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:   11
  3878 ;; This function calls:
  3879 ;;		_EscRAM
  3880 ;;		_LeeRAM
  3881 ;;		_Ppal_RsComando
  3882 ;;		_RsTxEnviaMsg
  3883 ;; This function is called by:
  3884 ;;		_MstCiclo
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text24
  3889  000F3A                     __ptext24:
  3890                           	opt stack 0
  3891  000F3A                     _MstRsComando:
  3892                           	opt stack 17
  3893                           
  3894                           ;RsComando14.c: 28: unsigned short Ind;
  3895                           ;RsComando14.c: 29: MonRsCMD = RsRxBuffer [1];
  3896                           
  3897                           ;incstack = 0
  3898  000F3A  C14F  F0AA         	movff	_RsRxBuffer+1,_MonRsCMD
  3899  000F3E  0100               	movlb	0	; () banked
  3900  000F40  6BAB               	clrf	(_MonRsCMD+1)& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;RsComando14.c: 30: RsTxBuffer[0] = 0x02 + 0x80;
  3904  000F42  0E82               	movlw	130
  3905  000F44  0101               	movlb	1	; () banked
  3906  000F46  6F30               	movwf	_RsTxBuffer& (0+255),b
  3907                           
  3908                           ; BSR set to: 1
  3909                           ;RsComando14.c: 31: RsTxBuffer[1] = MonRsCMD;
  3910  000F48  C0AA  F131         	movff	_MonRsCMD,_RsTxBuffer+1
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;RsComando14.c: 33: if ((MonRsCMD >= 0x80)) {
  3914  000F4C  0100               	movlb	0	; () banked
  3915  000F4E  51AB               	movf	(_MonRsCMD+1)& (0+255),w,b
  3916  000F50  E105               	bnz	u3370
  3917  000F52  0E80               	movlw	128
  3918  000F54  0100               	movlb	0	; () banked
  3919  000F56  5DAA               	subwf	_MonRsCMD& (0+255),w,b
  3920  000F58  A0D8               	btfss	status,0,c
  3921  000F5A  D088               	goto	l5056
  3922  000F5C                     u3370:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;RsComando14.c: 34: MonDir = ((RsRxBuffer[2] * 256) + (RsRxBuffer[3]));
  3926  000F5C  0101               	movlb	1	; () banked
  3927  000F5E  5150               	movf	(_RsRxBuffer+2)& (0+255),w,b
  3928  000F60  0101               	movlb	1	; () banked
  3929  000F62  6F88               	movwf	(??_MstRsComando+1)& (0+255),b
  3930  000F64  6B87               	clrf	??_MstRsComando& (0+255),b
  3931  000F66  0101               	movlb	1	; () banked
  3932  000F68  5151               	movf	(_RsRxBuffer+3)& (0+255),w,b
  3933  000F6A  0101               	movlb	1	; () banked
  3934  000F6C  2587               	addwf	??_MstRsComando& (0+255),w,b
  3935  000F6E  0100               	movlb	0	; () banked
  3936  000F70  6FB8               	movwf	_MonDir& (0+255),b
  3937  000F72  0101               	movlb	1	; () banked
  3938  000F74  0E00               	movlw	0
  3939  000F76  0101               	movlb	1	; () banked
  3940  000F78  2188               	addwfc	(??_MstRsComando+1)& (0+255),w,b
  3941  000F7A  0100               	movlb	0	; () banked
  3942  000F7C  6FB9               	movwf	(_MonDir+1)& (0+255),b
  3943                           
  3944                           ;RsComando14.c: 35: switch (MonRsCMD) {
  3945  000F7E  D064               	goto	l5054
  3946  000F80                     l5024:
  3947                           
  3948                           ;RsComando14.c: 37: for (Ind = 0; Ind < 8; Ind++) {
  3949  000F80  0E00               	movlw	0
  3950  000F82  0101               	movlb	1	; () banked
  3951  000F84  6F8B               	movwf	(MstRsComando@Ind+1)& (0+255),b
  3952  000F86  0E00               	movlw	0
  3953  000F88  6F8A               	movwf	MstRsComando@Ind& (0+255),b
  3954  000F8A                     l5026:
  3955                           
  3956                           ; BSR set to: 1
  3957  000F8A  0101               	movlb	1	; () banked
  3958  000F8C  518B               	movf	(MstRsComando@Ind+1)& (0+255),w,b
  3959  000F8E  E12B               	bnz	l5036
  3960  000F90  0E08               	movlw	8
  3961  000F92  0101               	movlb	1	; () banked
  3962  000F94  5D8A               	subwf	MstRsComando@Ind& (0+255),w,b
  3963  000F96  B0D8               	btfsc	status,0,c
  3964  000F98  D026               	goto	l5036
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;RsComando14.c: 38: RsTxBuffer[2 + Ind] = LeeRAM(MonDir + Ind);
  3968                           
  3969                           ; BSR set to: 1
  3970                           
  3971                           ; BSR set to: 1
  3972  000F9A  0101               	movlb	1	; () banked
  3973  000F9C  518A               	movf	MstRsComando@Ind& (0+255),w,b
  3974  000F9E  0100               	movlb	0	; () banked
  3975  000FA0  25B8               	addwf	_MonDir& (0+255),w,b
  3976  000FA2  6E23               	movwf	LeeRAM@Dir,c
  3977  000FA4  0101               	movlb	1	; () banked
  3978  000FA6  518B               	movf	(MstRsComando@Ind+1)& (0+255),w,b
  3979  000FA8  0100               	movlb	0	; () banked
  3980  000FAA  21B9               	addwfc	(_MonDir+1)& (0+255),w,b
  3981  000FAC  6E24               	movwf	LeeRAM@Dir+1,c
  3982  000FAE  ECA0  F012         	call	_LeeRAM	;wreg free
  3983  000FB2  0101               	movlb	1	; () banked
  3984  000FB4  6F87               	movwf	??_MstRsComando& (0+255),b
  3985  000FB6  0E02               	movlw	2
  3986  000FB8  0101               	movlb	1	; () banked
  3987  000FBA  258A               	addwf	MstRsComando@Ind& (0+255),w,b
  3988  000FBC  0101               	movlb	1	; () banked
  3989  000FBE  6F88               	movwf	(??_MstRsComando+1)& (0+255),b
  3990  000FC0  0E00               	movlw	0
  3991  000FC2  0101               	movlb	1	; () banked
  3992  000FC4  218B               	addwfc	(MstRsComando@Ind+1)& (0+255),w,b
  3993  000FC6  0101               	movlb	1	; () banked
  3994  000FC8  6F89               	movwf	(??_MstRsComando+2)& (0+255),b
  3995  000FCA  0E30               	movlw	low _RsTxBuffer
  3996  000FCC  0101               	movlb	1	; () banked
  3997  000FCE  2588               	addwf	(??_MstRsComando+1)& (0+255),w,b
  3998  000FD0  6ED9               	movwf	fsr2l,c
  3999  000FD2  0E01               	movlw	high _RsTxBuffer
  4000  000FD4  0101               	movlb	1	; () banked
  4001  000FD6  2189               	addwfc	(??_MstRsComando+2)& (0+255),w,b
  4002  000FD8  6EDA               	movwf	fsr2h,c
  4003  000FDA  C187  FFDF         	movff	??_MstRsComando,indf2
  4004                           
  4005                           ; BSR set to: 1
  4006  000FDE  0101               	movlb	1	; () banked
  4007  000FE0  4B8A               	infsnz	MstRsComando@Ind& (0+255),f,b
  4008  000FE2  2B8B               	incf	(MstRsComando@Ind+1)& (0+255),f,b
  4009  000FE4  D7D2               	goto	l5026
  4010  000FE6                     l5036:
  4011                           
  4012                           ; BSR set to: 1
  4013                           ;RsComando14.c: 39: }
  4014                           ;RsComando14.c: 41: RsTxEnviaMsg(10);
  4015  000FE6  0E00               	movlw	0
  4016  000FE8  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4017  000FEA  0E0A               	movlw	10
  4018  000FEC  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4019  000FEE  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4020                           
  4021                           ;RsComando14.c: 42: RsRxRecibioMsgF = 0;
  4022  000FF2  0E00               	movlw	0
  4023  000FF4  0100               	movlb	0	; () banked
  4024  000FF6  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4025  000FF8  0E00               	movlw	0
  4026  000FFA  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  4027                           
  4028                           ;RsComando14.c: 43: break;
  4029  000FFC  0012               	return	
  4030  000FFE                     l5040:
  4031                           
  4032                           ;RsComando14.c: 46: EscRAM(MonDir, &RsRxBuffer[4]);
  4033  000FFE  C0B8  F023         	movff	_MonDir,EscRAM@Dir
  4034  001002  C0B9  F024         	movff	_MonDir+1,EscRAM@Dir+1
  4035  001006  0E52               	movlw	low (_RsRxBuffer+4)
  4036  001008  6E25               	movwf	EscRAM@Car2P,c
  4037  00100A  0E01               	movlw	high (_RsRxBuffer+4)
  4038  00100C  6E26               	movwf	EscRAM@Car2P+1,c
  4039  00100E  ECDA  F012         	call	_EscRAM	;wreg free
  4040                           
  4041                           ;RsComando14.c: 47: RsTxEnviaMsg(2);
  4042  001012  0E00               	movlw	0
  4043  001014  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4044  001016  0E02               	movlw	2
  4045  001018  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4046  00101A  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4047                           
  4048                           ;RsComando14.c: 48: RsRxRecibioMsgF = 0;
  4049  00101E  0E00               	movlw	0
  4050  001020  0100               	movlb	0	; () banked
  4051  001022  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4052  001024  0E00               	movlw	0
  4053  001026  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  4054                           
  4055                           ;RsComando14.c: 49: break;
  4056  001028  0012               	return	
  4057  00102A                     l5046:
  4058                           
  4059                           ;RsComando14.c: 111: RsTxBuffer[2] = 0xE0;
  4060  00102A  0EE0               	movlw	224
  4061  00102C  0101               	movlb	1	; () banked
  4062  00102E  6F32               	movwf	(_RsTxBuffer+2)& (0+255),b
  4063                           
  4064                           ; BSR set to: 1
  4065                           ;RsComando14.c: 112: RsTxEnviaMsg(3);
  4066  001030  0E00               	movlw	0
  4067  001032  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4068  001034  0E03               	movlw	3
  4069  001036  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4070  001038  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4071                           
  4072                           ;RsComando14.c: 113: RsRxRecibioMsgF = 0;
  4073  00103C  0E00               	movlw	0
  4074  00103E  0100               	movlb	0	; () banked
  4075  001040  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4076  001042  0E00               	movlw	0
  4077  001044  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;RsComando14.c: 115: }
  4081                           
  4082                           ;RsComando14.c: 114: break;
  4083  001046  0012               	return	
  4084  001048                     l5054:
  4085                           
  4086                           ; BSR set to: 0
  4087  001048  C0AA  F187         	movff	_MonRsCMD,??_MstRsComando
  4088  00104C  C0AB  F188         	movff	_MonRsCMD+1,??_MstRsComando+1
  4089                           
  4090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4091                           ; Switch size 1, requested type "space"
  4092                           ; Number of cases is 1, Range of values is 0 to 0
  4093                           ; switch strategies available:
  4094                           ; Name         Instructions Cycles
  4095                           ; simple_byte            4     3 (average)
  4096                           ;	Chosen strategy is simple_byte
  4097  001050  0101               	movlb	1	; () banked
  4098  001052  5188               	movf	(??_MstRsComando+1)& (0+255),w,b
  4099  001054  0A00               	xorlw	0	; case 0
  4100  001056  A4D8               	btfss	status,2,c
  4101  001058  D7E8               	goto	l5046
  4102                           
  4103                           ; BSR set to: 1
  4104                           ; Switch size 1, requested type "space"
  4105                           ; Number of cases is 2, Range of values is 128 to 129
  4106                           ; switch strategies available:
  4107                           ; Name         Instructions Cycles
  4108                           ; simple_byte            7     4 (average)
  4109                           ;	Chosen strategy is simple_byte
  4110  00105A  0101               	movlb	1	; () banked
  4111  00105C  5187               	movf	??_MstRsComando& (0+255),w,b
  4112  00105E  0A80               	xorlw	128	; case 128
  4113  001060  B4D8               	btfsc	status,2,c
  4114  001062  D78E               	goto	l5024
  4115  001064  0A01               	xorlw	1	; case 129
  4116  001066  B4D8               	btfsc	status,2,c
  4117  001068  D7CA               	goto	l5040
  4118  00106A  D7DF               	goto	l5046
  4119  00106C                     l5056:
  4120                           
  4121                           ;RsComando14.c: 117: else {
  4122                           ;RsComando14.c: 118: Ppal_RsComando();
  4123  00106C  EC4C  F000         	call	_Ppal_RsComando	;wreg free
  4124  001070  0012               	return	
  4125  001072                     __end_of_MstRsComando:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           intcon	equ	0xFF2
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           postdec1	equ	0xFE5
  4135                           fsr1l	equ	0xFE1
  4136                           indf2	equ	0xFDF
  4137                           postinc2	equ	0xFDE
  4138                           postdec2	equ	0xFDD
  4139                           fsr2h	equ	0xFDA
  4140                           fsr2l	equ	0xFD9
  4141                           status	equ	0xFD8
  4142                           
  4143 ;; *************** function _Ppal_RsComando *****************
  4144 ;; Defined at:
  4145 ;;		line 176 in file "ModIO24.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;		None
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  ind             2   12[BANK1 ] unsigned short 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4159 ;;      Params:         0       0       0       0       0       0       0       0       0
  4160 ;;      Locals:         0       0       2       0       0       0       0       0       0
  4161 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4162 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4163 ;;Total ram usage:        4 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:   10
  4166 ;; This function calls:
  4167 ;;		_MrAgregaReg
  4168 ;;		_MrAnt
  4169 ;;		_MrFormat
  4170 ;;		_MrInit
  4171 ;;		_MrLeeReg
  4172 ;;		_MrSgte
  4173 ;;		_MrUlt
  4174 ;;		_MseEsc
  4175 ;;		_MseLee
  4176 ;;		_RsTxEnviaMsg
  4177 ;;		_RtcEsc
  4178 ;;		_RtcLee
  4179 ;;		_memcpy
  4180 ;; This function is called by:
  4181 ;;		_MstRsComando
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text25
  4186  000098                     __ptext25:
  4187                           	opt stack 0
  4188  000098                     _Ppal_RsComando:
  4189                           	opt stack 17
  4190                           
  4191                           ;ModIO24.c: 178: PpalRsCMD = RsRxBuffer [1];
  4192                           
  4193                           ;incstack = 0
  4194  000098  C14F  F0CE         	movff	_RsRxBuffer+1,_PpalRsCMD
  4195  00009C  0100               	movlb	0	; () banked
  4196  00009E  6BCF               	clrf	(_PpalRsCMD+1)& (0+255),b
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;ModIO24.c: 179: RsRxRecibioMsgF = 0;
  4200  0000A0  0E00               	movlw	0
  4201  0000A2  0100               	movlb	0	; () banked
  4202  0000A4  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  4203  0000A6  0E00               	movlw	0
  4204  0000A8  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;ModIO24.c: 181: MonDir = ((RsRxBuffer[2] * 256) + (RsRxBuffer[3]));
  4208  0000AA  0101               	movlb	1	; () banked
  4209  0000AC  5150               	movf	(_RsRxBuffer+2)& (0+255),w,b
  4210  0000AE  0101               	movlb	1	; () banked
  4211  0000B0  6F84               	movwf	(??_Ppal_RsComando+1)& (0+255),b
  4212  0000B2  6B83               	clrf	??_Ppal_RsComando& (0+255),b
  4213  0000B4  0101               	movlb	1	; () banked
  4214  0000B6  5151               	movf	(_RsRxBuffer+3)& (0+255),w,b
  4215  0000B8  0101               	movlb	1	; () banked
  4216  0000BA  2583               	addwf	??_Ppal_RsComando& (0+255),w,b
  4217  0000BC  0100               	movlb	0	; () banked
  4218  0000BE  6FB8               	movwf	_MonDir& (0+255),b
  4219  0000C0  0101               	movlb	1	; () banked
  4220  0000C2  0E00               	movlw	0
  4221  0000C4  0101               	movlb	1	; () banked
  4222  0000C6  2184               	addwfc	(??_Ppal_RsComando+1)& (0+255),w,b
  4223  0000C8  0100               	movlb	0	; () banked
  4224  0000CA  6FB9               	movwf	(_MonDir+1)& (0+255),b
  4225                           
  4226                           ;ModIO24.c: 182: switch (MonRsCMD) {
  4227  0000CC  D32E               	goto	l4978
  4228  0000CE                     l4834:
  4229                           
  4230                           ;ModIO24.c: 184: RsTxBuffer [2] = ((0x0824 >> 8) & (0xFF));
  4231  0000CE  0E08               	movlw	8
  4232  0000D0  0101               	movlb	1	; () banked
  4233  0000D2  6F32               	movwf	(_RsTxBuffer+2)& (0+255),b
  4234                           
  4235                           ;ModIO24.c: 185: unsigned short ind = (0x0824 & (0x00FF));
  4236  0000D4  0E00               	movlw	0
  4237  0000D6  0101               	movlb	1	; () banked
  4238  0000D8  6F86               	movwf	(Ppal_RsComando@ind+1)& (0+255),b
  4239  0000DA  0E24               	movlw	36
  4240  0000DC  6F85               	movwf	Ppal_RsComando@ind& (0+255),b
  4241                           
  4242                           ; BSR set to: 1
  4243                           ;ModIO24.c: 186: RsTxBuffer [3] = ind;
  4244  0000DE  C185  F133         	movff	Ppal_RsComando@ind,_RsTxBuffer+3
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;ModIO24.c: 188: RsTxEnviaMsg(4);
  4248  0000E2  0E00               	movlw	0
  4249  0000E4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4250  0000E6  0E04               	movlw	4
  4251  0000E8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4252  0000EA  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4253                           
  4254                           ;ModIO24.c: 189: break;
  4255  0000EE  0012               	return	
  4256  0000F0                     l588:
  4257                           
  4258                           ; BSR set to: 1
  4259                           ;ModIO24.c: 192: GIE = 0;;
  4260  0000F0  9EF2               	bcf	intcon,7,c	;volatile
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;ModIO24.c: 193: memcpy (&(RsTxBuffer [2]), &(MIOAdcLeido[0]), 2);
  4264  0000F2  0E32               	movlw	low (_RsTxBuffer+2)
  4265  0000F4  6E19               	movwf	memcpy@d1,c
  4266  0000F6  0E01               	movlw	high (_RsTxBuffer+2)
  4267  0000F8  6E1A               	movwf	memcpy@d1+1,c
  4268  0000FA  0EDE               	movlw	low _MIOAdcLeido
  4269  0000FC  6E1B               	movwf	memcpy@s1,c
  4270  0000FE  0E00               	movlw	high _MIOAdcLeido
  4271  000100  6E1C               	movwf	memcpy@s1+1,c
  4272  000102  0E00               	movlw	0
  4273  000104  6E1E               	movwf	memcpy@n+1,c
  4274  000106  0E02               	movlw	2
  4275  000108  6E1D               	movwf	memcpy@n,c
  4276  00010A  ECEB  F010         	call	_memcpy	;wreg free
  4277                           
  4278                           ;ModIO24.c: 194: memcpy (&(RsTxBuffer [4]), &(MIOAdcLeido[1]), 2);
  4279  00010E  0E34               	movlw	low (_RsTxBuffer+4)
  4280  000110  6E19               	movwf	memcpy@d1,c
  4281  000112  0E01               	movlw	high (_RsTxBuffer+4)
  4282  000114  6E1A               	movwf	memcpy@d1+1,c
  4283  000116  0EE0               	movlw	low (_MIOAdcLeido+2)
  4284  000118  6E1B               	movwf	memcpy@s1,c
  4285  00011A  0E00               	movlw	high (_MIOAdcLeido+2)
  4286  00011C  6E1C               	movwf	memcpy@s1+1,c
  4287  00011E  0E00               	movlw	0
  4288  000120  6E1E               	movwf	memcpy@n+1,c
  4289  000122  0E02               	movlw	2
  4290  000124  6E1D               	movwf	memcpy@n,c
  4291  000126  ECEB  F010         	call	_memcpy	;wreg free
  4292                           
  4293                           ;ModIO24.c: 195: memcpy (&(RsTxBuffer [6]), &(MIOAdcLeido[2]), 2);
  4294  00012A  0E36               	movlw	low (_RsTxBuffer+6)
  4295  00012C  6E19               	movwf	memcpy@d1,c
  4296  00012E  0E01               	movlw	high (_RsTxBuffer+6)
  4297  000130  6E1A               	movwf	memcpy@d1+1,c
  4298  000132  0EE2               	movlw	low (_MIOAdcLeido+4)
  4299  000134  6E1B               	movwf	memcpy@s1,c
  4300  000136  0E00               	movlw	high (_MIOAdcLeido+4)
  4301  000138  6E1C               	movwf	memcpy@s1+1,c
  4302  00013A  0E00               	movlw	0
  4303  00013C  6E1E               	movwf	memcpy@n+1,c
  4304  00013E  0E02               	movlw	2
  4305  000140  6E1D               	movwf	memcpy@n,c
  4306  000142  ECEB  F010         	call	_memcpy	;wreg free
  4307                           
  4308                           ;ModIO24.c: 196: memcpy (&(RsTxBuffer [8]), &(MIOAdcLeido[3]), 2);
  4309  000146  0E38               	movlw	low (_RsTxBuffer+8)
  4310  000148  6E19               	movwf	memcpy@d1,c
  4311  00014A  0E01               	movlw	high (_RsTxBuffer+8)
  4312  00014C  6E1A               	movwf	memcpy@d1+1,c
  4313  00014E  0EE4               	movlw	low (_MIOAdcLeido+6)
  4314  000150  6E1B               	movwf	memcpy@s1,c
  4315  000152  0E00               	movlw	high (_MIOAdcLeido+6)
  4316  000154  6E1C               	movwf	memcpy@s1+1,c
  4317  000156  0E00               	movlw	0
  4318  000158  6E1E               	movwf	memcpy@n+1,c
  4319  00015A  0E02               	movlw	2
  4320  00015C  6E1D               	movwf	memcpy@n,c
  4321  00015E  ECEB  F010         	call	_memcpy	;wreg free
  4322                           
  4323                           ;ModIO24.c: 198: GIE = 1;;
  4324  000162  8EF2               	bsf	intcon,7,c	;volatile
  4325                           
  4326                           ;ModIO24.c: 199: RsTxEnviaMsg(10);
  4327  000164  0E00               	movlw	0
  4328  000166  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4329  000168  0E0A               	movlw	10
  4330  00016A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4331  00016C  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4332                           
  4333                           ;ModIO24.c: 201: break;
  4334  000170  0012               	return	
  4335  000172                     l4846:
  4336                           
  4337                           ;ModIO24.c: 223: RtcLee ();
  4338  000172  ECB0  F00A         	call	_RtcLee	;wreg free
  4339                           
  4340                           ;ModIO24.c: 224: memcpy(&RsTxBuffer[2],RtcFechaHora, 7);
  4341  000176  0E32               	movlw	low (_RsTxBuffer+2)
  4342  000178  6E19               	movwf	memcpy@d1,c
  4343  00017A  0E01               	movlw	high (_RsTxBuffer+2)
  4344  00017C  6E1A               	movwf	memcpy@d1+1,c
  4345  00017E  0EE8               	movlw	low _RtcFechaHora
  4346  000180  6E1B               	movwf	memcpy@s1,c
  4347  000182  0E00               	movlw	high _RtcFechaHora
  4348  000184  6E1C               	movwf	memcpy@s1+1,c
  4349  000186  0E00               	movlw	0
  4350  000188  6E1E               	movwf	memcpy@n+1,c
  4351  00018A  0E07               	movlw	7
  4352  00018C  6E1D               	movwf	memcpy@n,c
  4353  00018E  ECEB  F010         	call	_memcpy	;wreg free
  4354                           
  4355                           ;ModIO24.c: 226: RsTxEnviaMsg(9);
  4356  000192  0E00               	movlw	0
  4357  000194  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4358  000196  0E09               	movlw	9
  4359  000198  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4360  00019A  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4361                           
  4362                           ;ModIO24.c: 227: break;
  4363  00019E  0012               	return	
  4364  0001A0                     l4852:
  4365                           
  4366                           ;ModIO24.c: 229: memcpy(RtcFechaHora, &RsRxBuffer[2], 7);
  4367  0001A0  0EE8               	movlw	low _RtcFechaHora
  4368  0001A2  6E19               	movwf	memcpy@d1,c
  4369  0001A4  0E00               	movlw	high _RtcFechaHora
  4370  0001A6  6E1A               	movwf	memcpy@d1+1,c
  4371  0001A8  0E50               	movlw	low (_RsRxBuffer+2)
  4372  0001AA  6E1B               	movwf	memcpy@s1,c
  4373  0001AC  0E01               	movlw	high (_RsRxBuffer+2)
  4374  0001AE  6E1C               	movwf	memcpy@s1+1,c
  4375  0001B0  0E00               	movlw	0
  4376  0001B2  6E1E               	movwf	memcpy@n+1,c
  4377  0001B4  0E07               	movlw	7
  4378  0001B6  6E1D               	movwf	memcpy@n,c
  4379  0001B8  ECEB  F010         	call	_memcpy	;wreg free
  4380                           
  4381                           ;ModIO24.c: 230: RtcEsc ();
  4382  0001BC  EC7C  F00B         	call	_RtcEsc	;wreg free
  4383                           
  4384                           ;ModIO24.c: 231: RsTxEnviaMsg(2);
  4385  0001C0  0E00               	movlw	0
  4386  0001C2  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4387  0001C4  0E02               	movlw	2
  4388  0001C6  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4389  0001C8  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4390                           
  4391                           ;ModIO24.c: 232: break;
  4392  0001CC  0012               	return	
  4393  0001CE                     l4858:
  4394                           
  4395                           ;ModIO24.c: 235: MrFormat();
  4396  0001CE  EC36  F00C         	call	_MrFormat	;wreg free
  4397                           
  4398                           ;ModIO24.c: 236: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4399  0001D2  0E32               	movlw	low (_RsTxBuffer+2)
  4400  0001D4  6E19               	movwf	memcpy@d1,c
  4401  0001D6  0E01               	movlw	high (_RsTxBuffer+2)
  4402  0001D8  6E1A               	movwf	memcpy@d1+1,c
  4403  0001DA  0E41               	movlw	low _MrDirV
  4404  0001DC  6E1B               	movwf	memcpy@s1,c
  4405  0001DE  0E00               	movlw	high _MrDirV
  4406  0001E0  6E1C               	movwf	memcpy@s1+1,c
  4407  0001E2  0E00               	movlw	0
  4408  0001E4  6E1E               	movwf	memcpy@n+1,c
  4409  0001E6  0E02               	movlw	2
  4410  0001E8  6E1D               	movwf	memcpy@n,c
  4411  0001EA  ECEB  F010         	call	_memcpy	;wreg free
  4412                           
  4413                           ;ModIO24.c: 237: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4414  0001EE  0E34               	movlw	low (_RsTxBuffer+4)
  4415  0001F0  6E19               	movwf	memcpy@d1,c
  4416  0001F2  0E01               	movlw	high (_RsTxBuffer+4)
  4417  0001F4  6E1A               	movwf	memcpy@d1+1,c
  4418  0001F6  0E43               	movlw	low _MrUltV
  4419  0001F8  6E1B               	movwf	memcpy@s1,c
  4420  0001FA  0E00               	movlw	high _MrUltV
  4421  0001FC  6E1C               	movwf	memcpy@s1+1,c
  4422  0001FE  0E00               	movlw	0
  4423  000200  6E1E               	movwf	memcpy@n+1,c
  4424  000202  0E02               	movlw	2
  4425  000204  6E1D               	movwf	memcpy@n,c
  4426  000206  ECEB  F010         	call	_memcpy	;wreg free
  4427                           
  4428                           ;ModIO24.c: 238: RsTxEnviaMsg(6);
  4429  00020A  0E00               	movlw	0
  4430  00020C  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4431  00020E  0E06               	movlw	6
  4432  000210  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4433  000212  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4434                           
  4435                           ;ModIO24.c: 239: break;
  4436  000216  0012               	return	
  4437  000218                     l4866:
  4438                           
  4439                           ;ModIO24.c: 241: MrInit();
  4440  000218  ECF9  F006         	call	_MrInit	;wreg free
  4441                           
  4442                           ;ModIO24.c: 242: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4443  00021C  0E32               	movlw	low (_RsTxBuffer+2)
  4444  00021E  6E19               	movwf	memcpy@d1,c
  4445  000220  0E01               	movlw	high (_RsTxBuffer+2)
  4446  000222  6E1A               	movwf	memcpy@d1+1,c
  4447  000224  0E41               	movlw	low _MrDirV
  4448  000226  6E1B               	movwf	memcpy@s1,c
  4449  000228  0E00               	movlw	high _MrDirV
  4450  00022A  6E1C               	movwf	memcpy@s1+1,c
  4451  00022C  0E00               	movlw	0
  4452  00022E  6E1E               	movwf	memcpy@n+1,c
  4453  000230  0E02               	movlw	2
  4454  000232  6E1D               	movwf	memcpy@n,c
  4455  000234  ECEB  F010         	call	_memcpy	;wreg free
  4456                           
  4457                           ;ModIO24.c: 243: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4458  000238  0E34               	movlw	low (_RsTxBuffer+4)
  4459  00023A  6E19               	movwf	memcpy@d1,c
  4460  00023C  0E01               	movlw	high (_RsTxBuffer+4)
  4461  00023E  6E1A               	movwf	memcpy@d1+1,c
  4462  000240  0E43               	movlw	low _MrUltV
  4463  000242  6E1B               	movwf	memcpy@s1,c
  4464  000244  0E00               	movlw	high _MrUltV
  4465  000246  6E1C               	movwf	memcpy@s1+1,c
  4466  000248  0E00               	movlw	0
  4467  00024A  6E1E               	movwf	memcpy@n+1,c
  4468  00024C  0E02               	movlw	2
  4469  00024E  6E1D               	movwf	memcpy@n,c
  4470  000250  ECEB  F010         	call	_memcpy	;wreg free
  4471                           
  4472                           ;ModIO24.c: 244: RsTxEnviaMsg(6);
  4473  000254  0E00               	movlw	0
  4474  000256  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4475  000258  0E06               	movlw	6
  4476  00025A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4477  00025C  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4478                           
  4479                           ;ModIO24.c: 245: break;
  4480  000260  0012               	return	
  4481  000262                     l4870:
  4482                           
  4483                           ;ModIO24.c: 247: memcpy(&MrReg[2], &RsRxBuffer[2], 8 - 2);
  4484  000262  0ED3               	movlw	low (_MrReg+2)
  4485  000264  6E19               	movwf	memcpy@d1,c
  4486  000266  0E00               	movlw	high (_MrReg+2)
  4487  000268  6E1A               	movwf	memcpy@d1+1,c
  4488  00026A  0E50               	movlw	low (_RsRxBuffer+2)
  4489  00026C  6E1B               	movwf	memcpy@s1,c
  4490  00026E  0E01               	movlw	high (_RsRxBuffer+2)
  4491  000270  6E1C               	movwf	memcpy@s1+1,c
  4492  000272  0E00               	movlw	0
  4493  000274  6E1E               	movwf	memcpy@n+1,c
  4494  000276  0E06               	movlw	6
  4495  000278  6E1D               	movwf	memcpy@n,c
  4496  00027A  ECEB  F010         	call	_memcpy	;wreg free
  4497                           
  4498                           ;ModIO24.c: 248: MrAgregaReg();
  4499  00027E  EC47  F006         	call	_MrAgregaReg	;wreg free
  4500                           
  4501                           ;ModIO24.c: 249: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4502  000282  0E32               	movlw	low (_RsTxBuffer+2)
  4503  000284  6E19               	movwf	memcpy@d1,c
  4504  000286  0E01               	movlw	high (_RsTxBuffer+2)
  4505  000288  6E1A               	movwf	memcpy@d1+1,c
  4506  00028A  0ED1               	movlw	low _MrReg
  4507  00028C  6E1B               	movwf	memcpy@s1,c
  4508  00028E  0E00               	movlw	high _MrReg
  4509  000290  6E1C               	movwf	memcpy@s1+1,c
  4510  000292  0E00               	movlw	0
  4511  000294  6E1E               	movwf	memcpy@n+1,c
  4512  000296  0E08               	movlw	8
  4513  000298  6E1D               	movwf	memcpy@n,c
  4514  00029A  ECEB  F010         	call	_memcpy	;wreg free
  4515                           
  4516                           ;ModIO24.c: 250: memcpy(&RsTxBuffer[2+8], &RtcFechaHora[0], 6);
  4517  00029E  0E3A               	movlw	low (_RsTxBuffer+10)
  4518  0002A0  6E19               	movwf	memcpy@d1,c
  4519  0002A2  0E01               	movlw	high (_RsTxBuffer+10)
  4520  0002A4  6E1A               	movwf	memcpy@d1+1,c
  4521  0002A6  0EE8               	movlw	low _RtcFechaHora
  4522  0002A8  6E1B               	movwf	memcpy@s1,c
  4523  0002AA  0E00               	movlw	high _RtcFechaHora
  4524  0002AC  6E1C               	movwf	memcpy@s1+1,c
  4525  0002AE  0E00               	movlw	0
  4526  0002B0  6E1E               	movwf	memcpy@n+1,c
  4527  0002B2  0E06               	movlw	6
  4528  0002B4  6E1D               	movwf	memcpy@n,c
  4529  0002B6  ECEB  F010         	call	_memcpy	;wreg free
  4530                           
  4531                           ;ModIO24.c: 251: memcpy(&RsTxBuffer[8+8], &MrDirV, 2);
  4532  0002BA  0E40               	movlw	low (_RsTxBuffer+16)
  4533  0002BC  6E19               	movwf	memcpy@d1,c
  4534  0002BE  0E01               	movlw	high (_RsTxBuffer+16)
  4535  0002C0  6E1A               	movwf	memcpy@d1+1,c
  4536  0002C2  0E41               	movlw	low _MrDirV
  4537  0002C4  6E1B               	movwf	memcpy@s1,c
  4538  0002C6  0E00               	movlw	high _MrDirV
  4539  0002C8  6E1C               	movwf	memcpy@s1+1,c
  4540  0002CA  0E00               	movlw	0
  4541  0002CC  6E1E               	movwf	memcpy@n+1,c
  4542  0002CE  0E02               	movlw	2
  4543  0002D0  6E1D               	movwf	memcpy@n,c
  4544  0002D2  ECEB  F010         	call	_memcpy	;wreg free
  4545                           
  4546                           ;ModIO24.c: 252: memcpy(&RsTxBuffer[10+8], &MrUltV, 2);
  4547  0002D6  0E42               	movlw	low (_RsTxBuffer+18)
  4548  0002D8  6E19               	movwf	memcpy@d1,c
  4549  0002DA  0E01               	movlw	high (_RsTxBuffer+18)
  4550  0002DC  6E1A               	movwf	memcpy@d1+1,c
  4551  0002DE  0E43               	movlw	low _MrUltV
  4552  0002E0  6E1B               	movwf	memcpy@s1,c
  4553  0002E2  0E00               	movlw	high _MrUltV
  4554  0002E4  6E1C               	movwf	memcpy@s1+1,c
  4555  0002E6  0E00               	movlw	0
  4556  0002E8  6E1E               	movwf	memcpy@n+1,c
  4557  0002EA  0E02               	movlw	2
  4558  0002EC  6E1D               	movwf	memcpy@n,c
  4559  0002EE  ECEB  F010         	call	_memcpy	;wreg free
  4560                           
  4561                           ;ModIO24.c: 253: RsTxEnviaMsg(12 + 8);
  4562  0002F2  0E00               	movlw	0
  4563  0002F4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4564  0002F6  0E14               	movlw	20
  4565  0002F8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4566  0002FA  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4567                           
  4568                           ;ModIO24.c: 254: break;
  4569  0002FE  0012               	return	
  4570  000300                     l4884:
  4571                           
  4572                           ;ModIO24.c: 256: MrLeeReg();
  4573  000300  ECFF  F012         	call	_MrLeeReg	;wreg free
  4574                           
  4575                           ;ModIO24.c: 257: MrAnt();
  4576  000304  EC3A  F013         	call	_MrAnt	;wreg free
  4577                           
  4578                           ;ModIO24.c: 258: MrSgte();
  4579  000308  EC2F  F013         	call	_MrSgte	;wreg free
  4580                           
  4581                           ;ModIO24.c: 259: MrLeeReg();
  4582  00030C  ECFF  F012         	call	_MrLeeReg	;wreg free
  4583                           
  4584                           ;ModIO24.c: 260: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4585  000310  0E32               	movlw	low (_RsTxBuffer+2)
  4586  000312  6E19               	movwf	memcpy@d1,c
  4587  000314  0E01               	movlw	high (_RsTxBuffer+2)
  4588  000316  6E1A               	movwf	memcpy@d1+1,c
  4589  000318  0ED1               	movlw	low _MrReg
  4590  00031A  6E1B               	movwf	memcpy@s1,c
  4591  00031C  0E00               	movlw	high _MrReg
  4592  00031E  6E1C               	movwf	memcpy@s1+1,c
  4593  000320  0E00               	movlw	0
  4594  000322  6E1E               	movwf	memcpy@n+1,c
  4595  000324  0E08               	movlw	8
  4596  000326  6E1D               	movwf	memcpy@n,c
  4597  000328  ECEB  F010         	call	_memcpy	;wreg free
  4598                           
  4599                           ;ModIO24.c: 261: memcpy(&RsTxBuffer[2+8], &MrDirV, 2);
  4600  00032C  0E3A               	movlw	low (_RsTxBuffer+10)
  4601  00032E  6E19               	movwf	memcpy@d1,c
  4602  000330  0E01               	movlw	high (_RsTxBuffer+10)
  4603  000332  6E1A               	movwf	memcpy@d1+1,c
  4604  000334  0E41               	movlw	low _MrDirV
  4605  000336  6E1B               	movwf	memcpy@s1,c
  4606  000338  0E00               	movlw	high _MrDirV
  4607  00033A  6E1C               	movwf	memcpy@s1+1,c
  4608  00033C  0E00               	movlw	0
  4609  00033E  6E1E               	movwf	memcpy@n+1,c
  4610  000340  0E02               	movlw	2
  4611  000342  6E1D               	movwf	memcpy@n,c
  4612  000344  ECEB  F010         	call	_memcpy	;wreg free
  4613                           
  4614                           ;ModIO24.c: 262: memcpy(&RsTxBuffer[4+8], &MrUltV, 2);
  4615  000348  0E3C               	movlw	low (_RsTxBuffer+12)
  4616  00034A  6E19               	movwf	memcpy@d1,c
  4617  00034C  0E01               	movlw	high (_RsTxBuffer+12)
  4618  00034E  6E1A               	movwf	memcpy@d1+1,c
  4619  000350  0E43               	movlw	low _MrUltV
  4620  000352  6E1B               	movwf	memcpy@s1,c
  4621  000354  0E00               	movlw	high _MrUltV
  4622  000356  6E1C               	movwf	memcpy@s1+1,c
  4623  000358  0E00               	movlw	0
  4624  00035A  6E1E               	movwf	memcpy@n+1,c
  4625  00035C  0E02               	movlw	2
  4626  00035E  6E1D               	movwf	memcpy@n,c
  4627  000360  ECEB  F010         	call	_memcpy	;wreg free
  4628                           
  4629                           ;ModIO24.c: 263: RsTxEnviaMsg(6 + 8);
  4630  000364  0E00               	movlw	0
  4631  000366  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4632  000368  0E0E               	movlw	14
  4633  00036A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4634  00036C  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4635                           
  4636                           ;ModIO24.c: 264: break;
  4637  000370  0012               	return	
  4638  000372                     l4898:
  4639                           
  4640                           ;ModIO24.c: 266: MrUlt();
  4641  000372  EC5B  F013         	call	_MrUlt	;wreg free
  4642                           
  4643                           ;ModIO24.c: 267: memcpy(&RsTxBuffer[2], &MrFecha12Ult, 3);
  4644  000376  0E32               	movlw	low (_RsTxBuffer+2)
  4645  000378  6E19               	movwf	memcpy@d1,c
  4646  00037A  0E01               	movlw	high (_RsTxBuffer+2)
  4647  00037C  6E1A               	movwf	memcpy@d1+1,c
  4648  00037E  0EEF               	movlw	low _MrFecha12Ult
  4649  000380  6E1B               	movwf	memcpy@s1,c
  4650  000382  0E00               	movlw	high _MrFecha12Ult
  4651  000384  6E1C               	movwf	memcpy@s1+1,c
  4652  000386  0E00               	movlw	0
  4653  000388  6E1E               	movwf	memcpy@n+1,c
  4654  00038A  0E03               	movlw	3
  4655  00038C  6E1D               	movwf	memcpy@n,c
  4656  00038E  ECEB  F010         	call	_memcpy	;wreg free
  4657                           
  4658                           ;ModIO24.c: 268: memcpy(&RsTxBuffer[5], &MrDirV, 2);
  4659  000392  0E35               	movlw	low (_RsTxBuffer+5)
  4660  000394  6E19               	movwf	memcpy@d1,c
  4661  000396  0E01               	movlw	high (_RsTxBuffer+5)
  4662  000398  6E1A               	movwf	memcpy@d1+1,c
  4663  00039A  0E41               	movlw	low _MrDirV
  4664  00039C  6E1B               	movwf	memcpy@s1,c
  4665  00039E  0E00               	movlw	high _MrDirV
  4666  0003A0  6E1C               	movwf	memcpy@s1+1,c
  4667  0003A2  0E00               	movlw	0
  4668  0003A4  6E1E               	movwf	memcpy@n+1,c
  4669  0003A6  0E02               	movlw	2
  4670  0003A8  6E1D               	movwf	memcpy@n,c
  4671  0003AA  ECEB  F010         	call	_memcpy	;wreg free
  4672                           
  4673                           ;ModIO24.c: 269: memcpy(&RsTxBuffer[7], &MrUltV, 2);
  4674  0003AE  0E37               	movlw	low (_RsTxBuffer+7)
  4675  0003B0  6E19               	movwf	memcpy@d1,c
  4676  0003B2  0E01               	movlw	high (_RsTxBuffer+7)
  4677  0003B4  6E1A               	movwf	memcpy@d1+1,c
  4678  0003B6  0E43               	movlw	low _MrUltV
  4679  0003B8  6E1B               	movwf	memcpy@s1,c
  4680  0003BA  0E00               	movlw	high _MrUltV
  4681  0003BC  6E1C               	movwf	memcpy@s1+1,c
  4682  0003BE  0E00               	movlw	0
  4683  0003C0  6E1E               	movwf	memcpy@n+1,c
  4684  0003C2  0E02               	movlw	2
  4685  0003C4  6E1D               	movwf	memcpy@n,c
  4686  0003C6  ECEB  F010         	call	_memcpy	;wreg free
  4687                           
  4688                           ;ModIO24.c: 270: RsTxEnviaMsg(9);
  4689  0003CA  0E00               	movlw	0
  4690  0003CC  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4691  0003CE  0E09               	movlw	9
  4692  0003D0  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4693  0003D2  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4694                           
  4695                           ;ModIO24.c: 271: break;
  4696  0003D6  0012               	return	
  4697  0003D8                     l4908:
  4698                           
  4699                           ;ModIO24.c: 273: MrSgte();
  4700  0003D8  EC2F  F013         	call	_MrSgte	;wreg free
  4701                           
  4702                           ;ModIO24.c: 274: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4703  0003DC  0E32               	movlw	low (_RsTxBuffer+2)
  4704  0003DE  6E19               	movwf	memcpy@d1,c
  4705  0003E0  0E01               	movlw	high (_RsTxBuffer+2)
  4706  0003E2  6E1A               	movwf	memcpy@d1+1,c
  4707  0003E4  0E41               	movlw	low _MrDirV
  4708  0003E6  6E1B               	movwf	memcpy@s1,c
  4709  0003E8  0E00               	movlw	high _MrDirV
  4710  0003EA  6E1C               	movwf	memcpy@s1+1,c
  4711  0003EC  0E00               	movlw	0
  4712  0003EE  6E1E               	movwf	memcpy@n+1,c
  4713  0003F0  0E02               	movlw	2
  4714  0003F2  6E1D               	movwf	memcpy@n,c
  4715  0003F4  ECEB  F010         	call	_memcpy	;wreg free
  4716                           
  4717                           ;ModIO24.c: 275: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4718  0003F8  0E34               	movlw	low (_RsTxBuffer+4)
  4719  0003FA  6E19               	movwf	memcpy@d1,c
  4720  0003FC  0E01               	movlw	high (_RsTxBuffer+4)
  4721  0003FE  6E1A               	movwf	memcpy@d1+1,c
  4722  000400  0E43               	movlw	low _MrUltV
  4723  000402  6E1B               	movwf	memcpy@s1,c
  4724  000404  0E00               	movlw	high _MrUltV
  4725  000406  6E1C               	movwf	memcpy@s1+1,c
  4726  000408  0E00               	movlw	0
  4727  00040A  6E1E               	movwf	memcpy@n+1,c
  4728  00040C  0E02               	movlw	2
  4729  00040E  6E1D               	movwf	memcpy@n,c
  4730  000410  ECEB  F010         	call	_memcpy	;wreg free
  4731                           
  4732                           ;ModIO24.c: 276: RsTxEnviaMsg(6);
  4733  000414  0E00               	movlw	0
  4734  000416  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4735  000418  0E06               	movlw	6
  4736  00041A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4737  00041C  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4738                           
  4739                           ;ModIO24.c: 277: break;
  4740  000420  0012               	return	
  4741  000422                     l4916:
  4742                           
  4743                           ;ModIO24.c: 279: MrAnt();
  4744  000422  EC3A  F013         	call	_MrAnt	;wreg free
  4745                           
  4746                           ;ModIO24.c: 280: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4747  000426  0E32               	movlw	low (_RsTxBuffer+2)
  4748  000428  6E19               	movwf	memcpy@d1,c
  4749  00042A  0E01               	movlw	high (_RsTxBuffer+2)
  4750  00042C  6E1A               	movwf	memcpy@d1+1,c
  4751  00042E  0E41               	movlw	low _MrDirV
  4752  000430  6E1B               	movwf	memcpy@s1,c
  4753  000432  0E00               	movlw	high _MrDirV
  4754  000434  6E1C               	movwf	memcpy@s1+1,c
  4755  000436  0E00               	movlw	0
  4756  000438  6E1E               	movwf	memcpy@n+1,c
  4757  00043A  0E02               	movlw	2
  4758  00043C  6E1D               	movwf	memcpy@n,c
  4759  00043E  ECEB  F010         	call	_memcpy	;wreg free
  4760                           
  4761                           ;ModIO24.c: 281: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4762  000442  0E34               	movlw	low (_RsTxBuffer+4)
  4763  000444  6E19               	movwf	memcpy@d1,c
  4764  000446  0E01               	movlw	high (_RsTxBuffer+4)
  4765  000448  6E1A               	movwf	memcpy@d1+1,c
  4766  00044A  0E43               	movlw	low _MrUltV
  4767  00044C  6E1B               	movwf	memcpy@s1,c
  4768  00044E  0E00               	movlw	high _MrUltV
  4769  000450  6E1C               	movwf	memcpy@s1+1,c
  4770  000452  0E00               	movlw	0
  4771  000454  6E1E               	movwf	memcpy@n+1,c
  4772  000456  0E02               	movlw	2
  4773  000458  6E1D               	movwf	memcpy@n,c
  4774  00045A  ECEB  F010         	call	_memcpy	;wreg free
  4775                           
  4776                           ;ModIO24.c: 282: RsTxEnviaMsg(6);
  4777  00045E  0E00               	movlw	0
  4778  000460  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4779  000462  0E06               	movlw	6
  4780  000464  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4781  000466  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4782                           
  4783                           ;ModIO24.c: 283: break;
  4784  00046A  0012               	return	
  4785  00046C                     l4924:
  4786                           
  4787                           ;ModIO24.c: 285: memcpy(&MrDirV, &RsRxBuffer[2], 2);
  4788  00046C  0E41               	movlw	low _MrDirV
  4789  00046E  6E19               	movwf	memcpy@d1,c
  4790  000470  0E00               	movlw	high _MrDirV
  4791  000472  6E1A               	movwf	memcpy@d1+1,c
  4792  000474  0E50               	movlw	low (_RsRxBuffer+2)
  4793  000476  6E1B               	movwf	memcpy@s1,c
  4794  000478  0E01               	movlw	high (_RsRxBuffer+2)
  4795  00047A  6E1C               	movwf	memcpy@s1+1,c
  4796  00047C  0E00               	movlw	0
  4797  00047E  6E1E               	movwf	memcpy@n+1,c
  4798  000480  0E02               	movlw	2
  4799  000482  6E1D               	movwf	memcpy@n,c
  4800  000484  ECEB  F010         	call	_memcpy	;wreg free
  4801                           
  4802                           ;ModIO24.c: 286: memcpy(&RsTxBuffer[2], &MrDirV, 2);
  4803  000488  0E32               	movlw	low (_RsTxBuffer+2)
  4804  00048A  6E19               	movwf	memcpy@d1,c
  4805  00048C  0E01               	movlw	high (_RsTxBuffer+2)
  4806  00048E  6E1A               	movwf	memcpy@d1+1,c
  4807  000490  0E41               	movlw	low _MrDirV
  4808  000492  6E1B               	movwf	memcpy@s1,c
  4809  000494  0E00               	movlw	high _MrDirV
  4810  000496  6E1C               	movwf	memcpy@s1+1,c
  4811  000498  0E00               	movlw	0
  4812  00049A  6E1E               	movwf	memcpy@n+1,c
  4813  00049C  0E02               	movlw	2
  4814  00049E  6E1D               	movwf	memcpy@n,c
  4815  0004A0  ECEB  F010         	call	_memcpy	;wreg free
  4816                           
  4817                           ;ModIO24.c: 287: memcpy(&RsTxBuffer[4], &MrUltV, 2);
  4818  0004A4  0E34               	movlw	low (_RsTxBuffer+4)
  4819  0004A6  6E19               	movwf	memcpy@d1,c
  4820  0004A8  0E01               	movlw	high (_RsTxBuffer+4)
  4821  0004AA  6E1A               	movwf	memcpy@d1+1,c
  4822  0004AC  0E43               	movlw	low _MrUltV
  4823  0004AE  6E1B               	movwf	memcpy@s1,c
  4824  0004B0  0E00               	movlw	high _MrUltV
  4825  0004B2  6E1C               	movwf	memcpy@s1+1,c
  4826  0004B4  0E00               	movlw	0
  4827  0004B6  6E1E               	movwf	memcpy@n+1,c
  4828  0004B8  0E02               	movlw	2
  4829  0004BA  6E1D               	movwf	memcpy@n,c
  4830  0004BC  ECEB  F010         	call	_memcpy	;wreg free
  4831                           
  4832                           ;ModIO24.c: 288: RsTxEnviaMsg(6);
  4833  0004C0  0E00               	movlw	0
  4834  0004C2  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4835  0004C4  0E06               	movlw	6
  4836  0004C6  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4837  0004C8  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4838                           
  4839                           ;ModIO24.c: 289: break;
  4840  0004CC  0012               	return	
  4841  0004CE                     l4928:
  4842                           
  4843                           ;ModIO24.c: 291: MrAnt();
  4844  0004CE  EC3A  F013         	call	_MrAnt	;wreg free
  4845                           
  4846                           ;ModIO24.c: 292: MrLeeReg();
  4847  0004D2  ECFF  F012         	call	_MrLeeReg	;wreg free
  4848                           
  4849                           ;ModIO24.c: 293: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4850  0004D6  0E32               	movlw	low (_RsTxBuffer+2)
  4851  0004D8  6E19               	movwf	memcpy@d1,c
  4852  0004DA  0E01               	movlw	high (_RsTxBuffer+2)
  4853  0004DC  6E1A               	movwf	memcpy@d1+1,c
  4854  0004DE  0ED1               	movlw	low _MrReg
  4855  0004E0  6E1B               	movwf	memcpy@s1,c
  4856  0004E2  0E00               	movlw	high _MrReg
  4857  0004E4  6E1C               	movwf	memcpy@s1+1,c
  4858  0004E6  0E00               	movlw	0
  4859  0004E8  6E1E               	movwf	memcpy@n+1,c
  4860  0004EA  0E08               	movlw	8
  4861  0004EC  6E1D               	movwf	memcpy@n,c
  4862  0004EE  ECEB  F010         	call	_memcpy	;wreg free
  4863                           
  4864                           ;ModIO24.c: 294: memcpy(&RsTxBuffer[2+8], &MrDirV, 2);
  4865  0004F2  0E3A               	movlw	low (_RsTxBuffer+10)
  4866  0004F4  6E19               	movwf	memcpy@d1,c
  4867  0004F6  0E01               	movlw	high (_RsTxBuffer+10)
  4868  0004F8  6E1A               	movwf	memcpy@d1+1,c
  4869  0004FA  0E41               	movlw	low _MrDirV
  4870  0004FC  6E1B               	movwf	memcpy@s1,c
  4871  0004FE  0E00               	movlw	high _MrDirV
  4872  000500  6E1C               	movwf	memcpy@s1+1,c
  4873  000502  0E00               	movlw	0
  4874  000504  6E1E               	movwf	memcpy@n+1,c
  4875  000506  0E02               	movlw	2
  4876  000508  6E1D               	movwf	memcpy@n,c
  4877  00050A  ECEB  F010         	call	_memcpy	;wreg free
  4878                           
  4879                           ;ModIO24.c: 295: memcpy(&RsTxBuffer[4+8], &MrUltV, 2);
  4880  00050E  0E3C               	movlw	low (_RsTxBuffer+12)
  4881  000510  6E19               	movwf	memcpy@d1,c
  4882  000512  0E01               	movlw	high (_RsTxBuffer+12)
  4883  000514  6E1A               	movwf	memcpy@d1+1,c
  4884  000516  0E43               	movlw	low _MrUltV
  4885  000518  6E1B               	movwf	memcpy@s1,c
  4886  00051A  0E00               	movlw	high _MrUltV
  4887  00051C  6E1C               	movwf	memcpy@s1+1,c
  4888  00051E  0E00               	movlw	0
  4889  000520  6E1E               	movwf	memcpy@n+1,c
  4890  000522  0E02               	movlw	2
  4891  000524  6E1D               	movwf	memcpy@n,c
  4892  000526  ECEB  F010         	call	_memcpy	;wreg free
  4893                           
  4894                           ;ModIO24.c: 296: RsTxEnviaMsg(6 + 8);
  4895  00052A  0E00               	movlw	0
  4896  00052C  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4897  00052E  0E0E               	movlw	14
  4898  000530  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4899  000532  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4900                           
  4901                           ;ModIO24.c: 297: break;
  4902  000536  0012               	return	
  4903  000538                     l4940:
  4904                           
  4905                           ;ModIO24.c: 300: MseLee (MonDir, &RsTxBuffer[2], 8);
  4906  000538  C0B8  F029         	movff	_MonDir,MseLee@Dir
  4907  00053C  C0B9  F02A         	movff	_MonDir+1,MseLee@Dir+1
  4908  000540  0E32               	movlw	low (_RsTxBuffer+2)
  4909  000542  6E2B               	movwf	MseLee@Datos,c
  4910  000544  0E01               	movlw	high (_RsTxBuffer+2)
  4911  000546  6E2C               	movwf	MseLee@Datos+1,c
  4912  000548  0E00               	movlw	0
  4913  00054A  6E2E               	movwf	MseLee@NBytes+1,c
  4914  00054C  0E08               	movlw	8
  4915  00054E  6E2D               	movwf	MseLee@NBytes,c
  4916  000550  EC88  F005         	call	_MseLee	;wreg free
  4917                           
  4918                           ;ModIO24.c: 301: RsTxEnviaMsg(10);
  4919  000554  0E00               	movlw	0
  4920  000556  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4921  000558  0E0A               	movlw	10
  4922  00055A  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4923  00055C  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4924                           
  4925                           ;ModIO24.c: 302: break;
  4926  000560  0012               	return	
  4927  000562                     l4942:
  4928                           
  4929                           ;ModIO24.c: 305: MseEsc(MonDir, &RsRxBuffer[4], 1);
  4930  000562  C0B8  F029         	movff	_MonDir,MseEsc@Dir
  4931  000566  C0B9  F02A         	movff	_MonDir+1,MseEsc@Dir+1
  4932  00056A  0E52               	movlw	low (_RsRxBuffer+4)
  4933  00056C  6E2B               	movwf	MseEsc@Datos,c
  4934  00056E  0E01               	movlw	high (_RsRxBuffer+4)
  4935  000570  6E2C               	movwf	MseEsc@Datos+1,c
  4936  000572  0E00               	movlw	0
  4937  000574  6E2E               	movwf	MseEsc@NBytes+1,c
  4938  000576  0E01               	movlw	1
  4939  000578  6E2D               	movwf	MseEsc@NBytes,c
  4940  00057A  EC39  F008         	call	_MseEsc	;wreg free
  4941                           
  4942                           ;ModIO24.c: 306: RsTxEnviaMsg(2);
  4943  00057E  0E00               	movlw	0
  4944  000580  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4945  000582  0E02               	movlw	2
  4946  000584  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4947  000586  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4948                           
  4949                           ;ModIO24.c: 307: break;
  4950  00058A  0012               	return	
  4951  00058C                     l4944:
  4952                           
  4953                           ;ModIO24.c: 316: MioCicloHabilitado=0;
  4954  00058C  0E00               	movlw	0
  4955  00058E  0100               	movlb	0	; () banked
  4956  000590  6FCD               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  4957  000592  0E00               	movlw	0
  4958  000594  6FCC               	movwf	_MioCicloHabilitado& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;ModIO24.c: 318: memcpy(&RsTxBuffer[2],RtcFechaHora, 7);
  4962  000596  0E32               	movlw	low (_RsTxBuffer+2)
  4963  000598  6E19               	movwf	memcpy@d1,c
  4964  00059A  0E01               	movlw	high (_RsTxBuffer+2)
  4965  00059C  6E1A               	movwf	memcpy@d1+1,c
  4966  00059E  0EE8               	movlw	low _RtcFechaHora
  4967  0005A0  6E1B               	movwf	memcpy@s1,c
  4968  0005A2  0E00               	movlw	high _RtcFechaHora
  4969  0005A4  6E1C               	movwf	memcpy@s1+1,c
  4970  0005A6  0E00               	movlw	0
  4971  0005A8  6E1E               	movwf	memcpy@n+1,c
  4972  0005AA  0E07               	movlw	7
  4973  0005AC  6E1D               	movwf	memcpy@n,c
  4974  0005AE  ECEB  F010         	call	_memcpy	;wreg free
  4975                           
  4976                           ;ModIO24.c: 319: RsTxEnviaMsg(9);
  4977  0005B2  0E00               	movlw	0
  4978  0005B4  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  4979  0005B6  0E09               	movlw	9
  4980  0005B8  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  4981  0005BA  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  4982                           
  4983                           ;ModIO24.c: 320: break;
  4984  0005BE  0012               	return	
  4985  0005C0                     l4950:
  4986                           
  4987                           ;ModIO24.c: 324: memcpy(&RsTxBuffer[2], &MrReg[0], 8);
  4988  0005C0  0E32               	movlw	low (_RsTxBuffer+2)
  4989  0005C2  6E19               	movwf	memcpy@d1,c
  4990  0005C4  0E01               	movlw	high (_RsTxBuffer+2)
  4991  0005C6  6E1A               	movwf	memcpy@d1+1,c
  4992  0005C8  0ED1               	movlw	low _MrReg
  4993  0005CA  6E1B               	movwf	memcpy@s1,c
  4994  0005CC  0E00               	movlw	high _MrReg
  4995  0005CE  6E1C               	movwf	memcpy@s1+1,c
  4996  0005D0  0E00               	movlw	0
  4997  0005D2  6E1E               	movwf	memcpy@n+1,c
  4998  0005D4  0E08               	movlw	8
  4999  0005D6  6E1D               	movwf	memcpy@n,c
  5000  0005D8  ECEB  F010         	call	_memcpy	;wreg free
  5001                           
  5002                           ;ModIO24.c: 325: memcpy(&RsTxBuffer[2+8], &RtcFechaHora[0], 6);
  5003  0005DC  0E3A               	movlw	low (_RsTxBuffer+10)
  5004  0005DE  6E19               	movwf	memcpy@d1,c
  5005  0005E0  0E01               	movlw	high (_RsTxBuffer+10)
  5006  0005E2  6E1A               	movwf	memcpy@d1+1,c
  5007  0005E4  0EE8               	movlw	low _RtcFechaHora
  5008  0005E6  6E1B               	movwf	memcpy@s1,c
  5009  0005E8  0E00               	movlw	high _RtcFechaHora
  5010  0005EA  6E1C               	movwf	memcpy@s1+1,c
  5011  0005EC  0E00               	movlw	0
  5012  0005EE  6E1E               	movwf	memcpy@n+1,c
  5013  0005F0  0E06               	movlw	6
  5014  0005F2  6E1D               	movwf	memcpy@n,c
  5015  0005F4  ECEB  F010         	call	_memcpy	;wreg free
  5016                           
  5017                           ;ModIO24.c: 326: memcpy(&RsTxBuffer[8+8], &MrDirV, 2);
  5018  0005F8  0E40               	movlw	low (_RsTxBuffer+16)
  5019  0005FA  6E19               	movwf	memcpy@d1,c
  5020  0005FC  0E01               	movlw	high (_RsTxBuffer+16)
  5021  0005FE  6E1A               	movwf	memcpy@d1+1,c
  5022  000600  0E41               	movlw	low _MrDirV
  5023  000602  6E1B               	movwf	memcpy@s1,c
  5024  000604  0E00               	movlw	high _MrDirV
  5025  000606  6E1C               	movwf	memcpy@s1+1,c
  5026  000608  0E00               	movlw	0
  5027  00060A  6E1E               	movwf	memcpy@n+1,c
  5028  00060C  0E02               	movlw	2
  5029  00060E  6E1D               	movwf	memcpy@n,c
  5030  000610  ECEB  F010         	call	_memcpy	;wreg free
  5031                           
  5032                           ;ModIO24.c: 327: memcpy(&RsTxBuffer[10+8], &MrUltV, 2);
  5033  000614  0E42               	movlw	low (_RsTxBuffer+18)
  5034  000616  6E19               	movwf	memcpy@d1,c
  5035  000618  0E01               	movlw	high (_RsTxBuffer+18)
  5036  00061A  6E1A               	movwf	memcpy@d1+1,c
  5037  00061C  0E43               	movlw	low _MrUltV
  5038  00061E  6E1B               	movwf	memcpy@s1,c
  5039  000620  0E00               	movlw	high _MrUltV
  5040  000622  6E1C               	movwf	memcpy@s1+1,c
  5041  000624  0E00               	movlw	0
  5042  000626  6E1E               	movwf	memcpy@n+1,c
  5043  000628  0E02               	movlw	2
  5044  00062A  6E1D               	movwf	memcpy@n,c
  5045  00062C  ECEB  F010         	call	_memcpy	;wreg free
  5046                           
  5047                           ;ModIO24.c: 328: RsTxEnviaMsg(12 + 8);
  5048  000630  0E00               	movlw	0
  5049  000632  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5050  000634  0E14               	movlw	20
  5051  000636  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5052  000638  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  5053                           
  5054                           ;ModIO24.c: 329: break;
  5055  00063C  0012               	return	
  5056  00063E                     l4954:
  5057                           
  5058                           ;ModIO24.c: 337: MioCicloHabilitado=1;
  5059  00063E  0E00               	movlw	0
  5060  000640  0100               	movlb	0	; () banked
  5061  000642  6FCD               	movwf	(_MioCicloHabilitado+1)& (0+255),b
  5062  000644  0E01               	movlw	1
  5063  000646  6FCC               	movwf	_MioCicloHabilitado& (0+255),b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;ModIO24.c: 338: RsTxEnviaMsg(2);
  5067  000648  0E00               	movlw	0
  5068  00064A  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5069  00064C  0E02               	movlw	2
  5070  00064E  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5071  000650  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  5072                           
  5073                           ;ModIO24.c: 339: break;
  5074  000654  0012               	return	
  5075  000656                     l4958:
  5076                           
  5077                           ;ModIO24.c: 347: MseUltDirLeido += 8;
  5078  000656  0E08               	movlw	8
  5079  000658  0100               	movlb	0	; () banked
  5080  00065A  27A6               	addwf	_MseUltDirLeido& (0+255),f,b
  5081  00065C  0E00               	movlw	0
  5082  00065E  23A7               	addwfc	(_MseUltDirLeido+1)& (0+255),f,b
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;ModIO24.c: 348: MseLee (MseUltDirLeido, &RsTxBuffer[2], 8);
  5086  000660  C0A6  F029         	movff	_MseUltDirLeido,MseLee@Dir
  5087  000664  C0A7  F02A         	movff	_MseUltDirLeido+1,MseLee@Dir+1
  5088  000668  0E32               	movlw	low (_RsTxBuffer+2)
  5089  00066A  6E2B               	movwf	MseLee@Datos,c
  5090  00066C  0E01               	movlw	high (_RsTxBuffer+2)
  5091  00066E  6E2C               	movwf	MseLee@Datos+1,c
  5092  000670  0E00               	movlw	0
  5093  000672  6E2E               	movwf	MseLee@NBytes+1,c
  5094  000674  0E08               	movlw	8
  5095  000676  6E2D               	movwf	MseLee@NBytes,c
  5096  000678  EC88  F005         	call	_MseLee	;wreg free
  5097                           
  5098                           ;ModIO24.c: 349: RsTxEnviaMsg(10);
  5099  00067C  0E00               	movlw	0
  5100  00067E  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5101  000680  0E0A               	movlw	10
  5102  000682  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5103  000684  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  5104                           
  5105                           ;ModIO24.c: 350: break;
  5106  000688  0012               	return	
  5107  00068A                     l4964:
  5108                           
  5109                           ;ModIO24.c: 354: RsTxBuffer[2] = 0xE1;
  5110  00068A  0EE1               	movlw	225
  5111  00068C  0101               	movlb	1	; () banked
  5112  00068E  6F32               	movwf	(_RsTxBuffer+2)& (0+255),b
  5113                           
  5114                           ; BSR set to: 1
  5115                           ;ModIO24.c: 355: RsTxEnviaMsg(3);
  5116  000690  0E00               	movlw	0
  5117  000692  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5118  000694  0E03               	movlw	3
  5119  000696  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5120  000698  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  5121                           
  5122                           ;ModIO24.c: 356: RsRxRecibioMsgF = 0;
  5123  00069C  0E00               	movlw	0
  5124  00069E  0100               	movlb	0	; () banked
  5125  0006A0  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
  5126  0006A2  0E00               	movlw	0
  5127  0006A4  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
  5128                           
  5129                           ;ModIO24.c: 357: break;
  5130  0006A6  0012               	return	
  5131  0006A8                     l607:
  5132                           
  5133                           ; BSR set to: 1
  5134                           ;ModIO24.c: 360: GIE = 0;;
  5135  0006A8  9EF2               	bcf	intcon,7,c	;volatile
  5136                           
  5137                           ; BSR set to: 1
  5138                           ;ModIO24.c: 361: memcpy (&(RsTxBuffer [2]), &(MIOAdcAct[0]), 2);
  5139  0006AA  0E32               	movlw	low (_RsTxBuffer+2)
  5140  0006AC  6E19               	movwf	memcpy@d1,c
  5141  0006AE  0E01               	movlw	high (_RsTxBuffer+2)
  5142  0006B0  6E1A               	movwf	memcpy@d1+1,c
  5143  0006B2  0E33               	movlw	low _MIOAdcAct
  5144  0006B4  6E1B               	movwf	memcpy@s1,c
  5145  0006B6  0E00               	movlw	high _MIOAdcAct
  5146  0006B8  6E1C               	movwf	memcpy@s1+1,c
  5147  0006BA  0E00               	movlw	0
  5148  0006BC  6E1E               	movwf	memcpy@n+1,c
  5149  0006BE  0E02               	movlw	2
  5150  0006C0  6E1D               	movwf	memcpy@n,c
  5151  0006C2  ECEB  F010         	call	_memcpy	;wreg free
  5152                           
  5153                           ;ModIO24.c: 362: memcpy (&(RsTxBuffer [4]), &(MIOAdcAct[1]), 2);
  5154  0006C6  0E34               	movlw	low (_RsTxBuffer+4)
  5155  0006C8  6E19               	movwf	memcpy@d1,c
  5156  0006CA  0E01               	movlw	high (_RsTxBuffer+4)
  5157  0006CC  6E1A               	movwf	memcpy@d1+1,c
  5158  0006CE  0E35               	movlw	low (_MIOAdcAct+2)
  5159  0006D0  6E1B               	movwf	memcpy@s1,c
  5160  0006D2  0E00               	movlw	high (_MIOAdcAct+2)
  5161  0006D4  6E1C               	movwf	memcpy@s1+1,c
  5162  0006D6  0E00               	movlw	0
  5163  0006D8  6E1E               	movwf	memcpy@n+1,c
  5164  0006DA  0E02               	movlw	2
  5165  0006DC  6E1D               	movwf	memcpy@n,c
  5166  0006DE  ECEB  F010         	call	_memcpy	;wreg free
  5167                           
  5168                           ;ModIO24.c: 363: memcpy (&(RsTxBuffer [6]), &(MIOAdcAct[2]), 2);
  5169  0006E2  0E36               	movlw	low (_RsTxBuffer+6)
  5170  0006E4  6E19               	movwf	memcpy@d1,c
  5171  0006E6  0E01               	movlw	high (_RsTxBuffer+6)
  5172  0006E8  6E1A               	movwf	memcpy@d1+1,c
  5173  0006EA  0E37               	movlw	low (_MIOAdcAct+4)
  5174  0006EC  6E1B               	movwf	memcpy@s1,c
  5175  0006EE  0E00               	movlw	high (_MIOAdcAct+4)
  5176  0006F0  6E1C               	movwf	memcpy@s1+1,c
  5177  0006F2  0E00               	movlw	0
  5178  0006F4  6E1E               	movwf	memcpy@n+1,c
  5179  0006F6  0E02               	movlw	2
  5180  0006F8  6E1D               	movwf	memcpy@n,c
  5181  0006FA  ECEB  F010         	call	_memcpy	;wreg free
  5182                           
  5183                           ;ModIO24.c: 364: memcpy (&(RsTxBuffer [8]), &(MIOAdcAct[3]), 2);
  5184  0006FE  0E38               	movlw	low (_RsTxBuffer+8)
  5185  000700  6E19               	movwf	memcpy@d1,c
  5186  000702  0E01               	movlw	high (_RsTxBuffer+8)
  5187  000704  6E1A               	movwf	memcpy@d1+1,c
  5188  000706  0E39               	movlw	low (_MIOAdcAct+6)
  5189  000708  6E1B               	movwf	memcpy@s1,c
  5190  00070A  0E00               	movlw	high (_MIOAdcAct+6)
  5191  00070C  6E1C               	movwf	memcpy@s1+1,c
  5192  00070E  0E00               	movlw	0
  5193  000710  6E1E               	movwf	memcpy@n+1,c
  5194  000712  0E02               	movlw	2
  5195  000714  6E1D               	movwf	memcpy@n,c
  5196  000716  ECEB  F010         	call	_memcpy	;wreg free
  5197                           
  5198                           ;ModIO24.c: 366: GIE = 1;;
  5199  00071A  8EF2               	bsf	intcon,7,c	;volatile
  5200                           
  5201                           ;ModIO24.c: 367: RsTxEnviaMsg(10);
  5202  00071C  0E00               	movlw	0
  5203  00071E  6E26               	movwf	RsTxEnviaMsg@RsTxLen+1,c
  5204  000720  0E0A               	movlw	10
  5205  000722  6E25               	movwf	RsTxEnviaMsg@RsTxLen,c
  5206  000724  EC8B  F00F         	call	_RsTxEnviaMsg	;wreg free
  5207                           
  5208                           ;ModIO24.c: 373: }
  5209                           
  5210                           ;ModIO24.c: 369: break;
  5211  000728  0012               	return	
  5212  00072A                     l4978:
  5213  00072A  C0AA  F183         	movff	_MonRsCMD,??_Ppal_RsComando
  5214  00072E  C0AB  F184         	movff	_MonRsCMD+1,??_Ppal_RsComando+1
  5215                           
  5216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5217                           ; Switch size 1, requested type "space"
  5218                           ; Number of cases is 1, Range of values is 0 to 0
  5219                           ; switch strategies available:
  5220                           ; Name         Instructions Cycles
  5221                           ; simple_byte            4     3 (average)
  5222                           ;	Chosen strategy is simple_byte
  5223  000732  0101               	movlb	1	; () banked
  5224  000734  5184               	movf	(??_Ppal_RsComando+1)& (0+255),w,b
  5225  000736  0A00               	xorlw	0	; case 0
  5226  000738  A4D8               	btfss	status,2,c
  5227  00073A  D7A7               	goto	l4964
  5228                           
  5229                           ; BSR set to: 1
  5230                           ; Switch size 1, requested type "space"
  5231                           ; Number of cases is 20, Range of values is 0 to 34
  5232                           ; switch strategies available:
  5233                           ; Name         Instructions Cycles
  5234                           ; simple_byte           61    31 (average)
  5235                           ;	Chosen strategy is simple_byte
  5236  00073C  0101               	movlb	1	; () banked
  5237  00073E  5183               	movf	??_Ppal_RsComando& (0+255),w,b
  5238  000740  0A00               	xorlw	0	; case 0
  5239  000742  B4D8               	btfsc	status,2,c
  5240  000744  D4C4               	goto	l4834
  5241  000746  0A01               	xorlw	1	; case 1
  5242  000748  B4D8               	btfsc	status,2,c
  5243  00074A  D4D2               	goto	l588
  5244  00074C  0A02               	xorlw	2	; case 3
  5245  00074E  B4D8               	btfsc	status,2,c
  5246  000750  D510               	goto	l4846
  5247  000752  0A07               	xorlw	7	; case 4
  5248  000754  B4D8               	btfsc	status,2,c
  5249  000756  D524               	goto	l4852
  5250  000758  0A01               	xorlw	1	; case 5
  5251  00075A  B4D8               	btfsc	status,2,c
  5252  00075C  D538               	goto	l4858
  5253  00075E  0A03               	xorlw	3	; case 6
  5254  000760  B4D8               	btfsc	status,2,c
  5255  000762  D55A               	goto	l4866
  5256  000764  0A01               	xorlw	1	; case 7
  5257  000766  B4D8               	btfsc	status,2,c
  5258  000768  D57C               	goto	l4870
  5259  00076A  0A0F               	xorlw	15	; case 8
  5260  00076C  B4D8               	btfsc	status,2,c
  5261  00076E  D5C8               	goto	l4884
  5262  000770  0A01               	xorlw	1	; case 9
  5263  000772  B4D8               	btfsc	status,2,c
  5264  000774  D5FE               	goto	l4898
  5265  000776  0A03               	xorlw	3	; case 10
  5266  000778  B4D8               	btfsc	status,2,c
  5267  00077A  D62E               	goto	l4908
  5268  00077C  0A01               	xorlw	1	; case 11
  5269  00077E  B4D8               	btfsc	status,2,c
  5270  000780  D650               	goto	l4916
  5271  000782  0A07               	xorlw	7	; case 12
  5272  000784  B4D8               	btfsc	status,2,c
  5273  000786  D672               	goto	l4924
  5274  000788  0A01               	xorlw	1	; case 13
  5275  00078A  B4D8               	btfsc	status,2,c
  5276  00078C  D6A0               	goto	l4928
  5277  00078E  0A03               	xorlw	3	; case 14
  5278  000790  B4D8               	btfsc	status,2,c
  5279  000792  D6D2               	goto	l4940
  5280  000794  0A01               	xorlw	1	; case 15
  5281  000796  B4D8               	btfsc	status,2,c
  5282  000798  D6E4               	goto	l4942
  5283  00079A  0A1F               	xorlw	31	; case 16
  5284  00079C  B4D8               	btfsc	status,2,c
  5285  00079E  D6F6               	goto	l4944
  5286  0007A0  0A01               	xorlw	1	; case 17
  5287  0007A2  B4D8               	btfsc	status,2,c
  5288  0007A4  D70D               	goto	l4950
  5289  0007A6  0A02               	xorlw	2	; case 19
  5290  0007A8  B4D8               	btfsc	status,2,c
  5291  0007AA  D749               	goto	l4954
  5292  0007AC  0A32               	xorlw	50	; case 33
  5293  0007AE  B4D8               	btfsc	status,2,c
  5294  0007B0  D752               	goto	l4958
  5295  0007B2  0A03               	xorlw	3	; case 34
  5296  0007B4  B4D8               	btfsc	status,2,c
  5297  0007B6  D778               	goto	l607
  5298  0007B8  D768               	goto	l4964
  5299  0007BA                     __end_of_Ppal_RsComando:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           intcon	equ	0xFF2
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1l	equ	0xFE1
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _RtcEsc *****************
  5318 ;; Defined at:
  5319 ;;		line 40 in file "RTC21.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;		None
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5333 ;;      Params:         0       0       0       0       0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5335 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5336 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5337 ;;Total ram usage:        1 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    7
  5340 ;; This function calls:
  5341 ;;		_Hex2Bcd
  5342 ;;		_I2CEscByte
  5343 ;;		_I2CStart
  5344 ;;		_I2CStop
  5345 ;; This function is called by:
  5346 ;;		_RtcInit
  5347 ;;		_Ppal_RsComando
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text26
  5352  0016F8                     __ptext26:
  5353                           	opt stack 0
  5354  0016F8                     _RtcEsc:
  5355                           	opt stack 20
  5356                           
  5357                           ;RTC21.c: 41: I2CStart();
  5358                           
  5359                           ;incstack = 0
  5360  0016F8  ECEF  F011         	call	_I2CStart	;wreg free
  5361                           
  5362                           ;RTC21.c: 42: I2CEscByte(0xD0);
  5363  0016FC  0E00               	movlw	0
  5364  0016FE  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5365  001700  0ED0               	movlw	208
  5366  001702  6E25               	movwf	I2CEscByte@I2CByte,c
  5367  001704  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5368                           
  5369                           ;RTC21.c: 43: I2CEscByte(0);
  5370  001708  0E00               	movlw	0
  5371  00170A  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5372  00170C  0E00               	movlw	0
  5373  00170E  6E25               	movwf	I2CEscByte@I2CByte,c
  5374  001710  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5375                           
  5376                           ;RTC21.c: 44: I2CEscByte(Hex2Bcd(RtcFechaHora[5]) & 0x7F);
  5377  001714  0100               	movlb	0	; () banked
  5378  001716  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  5379  001718  EC85  F011         	call	_Hex2Bcd
  5380  00171C  6E29               	movwf	??_RtcEsc& (0+255),c
  5381  00171E  0E7F               	movlw	127
  5382  001720  1629               	andwf	??_RtcEsc,f,c
  5383  001722  5029               	movf	??_RtcEsc,w,c
  5384  001724  6E25               	movwf	I2CEscByte@I2CByte,c
  5385  001726  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5386  001728  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5387                           
  5388                           ;RTC21.c: 45: I2CEscByte(Hex2Bcd(RtcFechaHora[4]));
  5389  00172C  0100               	movlb	0	; () banked
  5390  00172E  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  5391  001730  EC85  F011         	call	_Hex2Bcd
  5392  001734  6E29               	movwf	??_RtcEsc& (0+255),c
  5393  001736  5029               	movf	??_RtcEsc,w,c
  5394  001738  6E25               	movwf	I2CEscByte@I2CByte,c
  5395  00173A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5396  00173C  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5397                           
  5398                           ;RTC21.c: 46: I2CEscByte(Hex2Bcd(RtcFechaHora[3]));
  5399  001740  0100               	movlb	0	; () banked
  5400  001742  51EB               	movf	(_RtcFechaHora+3)& (0+255),w,b
  5401  001744  EC85  F011         	call	_Hex2Bcd
  5402  001748  6E29               	movwf	??_RtcEsc& (0+255),c
  5403  00174A  5029               	movf	??_RtcEsc,w,c
  5404  00174C  6E25               	movwf	I2CEscByte@I2CByte,c
  5405  00174E  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5406  001750  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5407                           
  5408                           ;RTC21.c: 47: I2CEscByte(Hex2Bcd(RtcFechaHora[6]));
  5409  001754  0100               	movlb	0	; () banked
  5410  001756  51EE               	movf	(_RtcFechaHora+6)& (0+255),w,b
  5411  001758  EC85  F011         	call	_Hex2Bcd
  5412  00175C  6E29               	movwf	??_RtcEsc& (0+255),c
  5413  00175E  5029               	movf	??_RtcEsc,w,c
  5414  001760  6E25               	movwf	I2CEscByte@I2CByte,c
  5415  001762  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5416  001764  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5417                           
  5418                           ;RTC21.c: 48: I2CEscByte(Hex2Bcd(RtcFechaHora[2]));
  5419  001768  0100               	movlb	0	; () banked
  5420  00176A  51EA               	movf	(_RtcFechaHora+2)& (0+255),w,b
  5421  00176C  EC85  F011         	call	_Hex2Bcd
  5422  001770  6E29               	movwf	??_RtcEsc& (0+255),c
  5423  001772  5029               	movf	??_RtcEsc,w,c
  5424  001774  6E25               	movwf	I2CEscByte@I2CByte,c
  5425  001776  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5426  001778  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5427                           
  5428                           ;RTC21.c: 49: I2CEscByte(Hex2Bcd(RtcFechaHora[1]));
  5429  00177C  0100               	movlb	0	; () banked
  5430  00177E  51E9               	movf	(_RtcFechaHora+1)& (0+255),w,b
  5431  001780  EC85  F011         	call	_Hex2Bcd
  5432  001784  6E29               	movwf	??_RtcEsc& (0+255),c
  5433  001786  5029               	movf	??_RtcEsc,w,c
  5434  001788  6E25               	movwf	I2CEscByte@I2CByte,c
  5435  00178A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5436  00178C  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5437                           
  5438                           ;RTC21.c: 50: I2CEscByte(Hex2Bcd(RtcFechaHora[0]));
  5439  001790  0100               	movlb	0	; () banked
  5440  001792  51E8               	movf	_RtcFechaHora& (0+255),w,b
  5441  001794  EC85  F011         	call	_Hex2Bcd
  5442  001798  6E29               	movwf	??_RtcEsc& (0+255),c
  5443  00179A  5029               	movf	??_RtcEsc,w,c
  5444  00179C  6E25               	movwf	I2CEscByte@I2CByte,c
  5445  00179E  6A26               	clrf	I2CEscByte@I2CByte+1,c
  5446  0017A0  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5447                           
  5448                           ;RTC21.c: 51: I2CEscByte(0);
  5449  0017A4  0E00               	movlw	0
  5450  0017A6  6E26               	movwf	I2CEscByte@I2CByte+1,c
  5451  0017A8  0E00               	movlw	0
  5452  0017AA  6E25               	movwf	I2CEscByte@I2CByte,c
  5453  0017AC  ECE8  F00C         	call	_I2CEscByte	;wreg free
  5454                           
  5455                           ;RTC21.c: 52: I2CStop();
  5456  0017B0  EC8C  F012         	call	_I2CStop	;wreg free
  5457  0017B4  0012               	return		;funcret
  5458  0017B6                     __end_of_RtcEsc:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           intcon	equ	0xFF2
  5465                           postinc0	equ	0xFEE
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _Hex2Bcd *****************
  5477 ;; Defined at:
  5478 ;;		line 13 in file "RTC21.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  Hex1            1    wreg     unsigned char 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  Hex1            1   35[COMRAM] unsigned char 
  5483 ;;  Bcd1            1   34[COMRAM] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      unsigned char 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5493 ;;      Params:         0       0       0       0       0       0       0       0       0
  5494 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5495 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5496 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5497 ;;Total ram usage:        4 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    6
  5500 ;; This function calls:
  5501 ;;		___awdiv
  5502 ;;		___awmod
  5503 ;; This function is called by:
  5504 ;;		_RtcEsc
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text27
  5509  00230A                     __ptext27:
  5510                           	opt stack 0
  5511  00230A                     _Hex2Bcd:
  5512                           	opt stack 20
  5513                           
  5514                           ;incstack = 0
  5515                           ;Hex2Bcd@Hex1 stored from wreg
  5516  00230A  6E24               	movwf	Hex2Bcd@Hex1,c
  5517                           
  5518                           ;RTC21.c: 14: char Bcd1;
  5519                           ;RTC21.c: 15: Bcd1 = ((Hex1/10)<< 4) +(Hex1 % 10);
  5520  00230C  C024  F019         	movff	Hex2Bcd@Hex1,___awmod@dividend
  5521  002310  6A1A               	clrf	___awmod@dividend+1,c
  5522  002312  0E00               	movlw	0
  5523  002314  6E1C               	movwf	___awmod@divisor+1,c
  5524  002316  0E0A               	movlw	10
  5525  002318  6E1B               	movwf	___awmod@divisor,c
  5526  00231A  ECF7  F00D         	call	___awmod	;wreg free
  5527  00231E  C019  F021         	movff	?___awmod,??_Hex2Bcd
  5528  002322  C01A  F022         	movff	?___awmod+1,??_Hex2Bcd+1
  5529  002326  C024  F019         	movff	Hex2Bcd@Hex1,___awdiv@dividend
  5530  00232A  6A1A               	clrf	___awdiv@dividend+1,c
  5531  00232C  0E00               	movlw	0
  5532  00232E  6E1C               	movwf	___awdiv@divisor+1,c
  5533  002330  0E0A               	movlw	10
  5534  002332  6E1B               	movwf	___awdiv@divisor,c
  5535  002334  EC38  F00D         	call	___awdiv	;wreg free
  5536  002338  3819               	swapf	?___awdiv,w,c
  5537  00233A  0BF0               	andlw	240
  5538  00233C  2421               	addwf	??_Hex2Bcd,w,c
  5539  00233E  6E23               	movwf	Hex2Bcd@Bcd1,c
  5540                           
  5541                           ;RTC21.c: 16: return (Bcd1);
  5542  002340  5023               	movf	Hex2Bcd@Bcd1,w,c
  5543  002342  0012               	return	
  5544  002344                     __end_of_Hex2Bcd:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           intcon	equ	0xFF2
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function ___awmod *****************
  5563 ;; Defined at:
  5564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  dividend        2   24[COMRAM] int 
  5567 ;;  divisor         2   26[COMRAM] int 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  sign            1   29[COMRAM] unsigned char 
  5570 ;;  counter         1   28[COMRAM] unsigned char 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  2   24[COMRAM] int 
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, status,0
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5580 ;;      Params:         4       0       0       0       0       0       0       0       0
  5581 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5583 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5584 ;;Total ram usage:        6 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    5
  5587 ;; This function calls:
  5588 ;;		Nothing
  5589 ;; This function is called by:
  5590 ;;		_Hex2Bcd
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text28
  5595  001BEE                     __ptext28:
  5596                           	opt stack 0
  5597  001BEE                     ___awmod:
  5598                           	opt stack 20
  5599                           
  5600                           ;incstack = 0
  5601  001BEE  0E00               	movlw	0
  5602  001BF0  6E1E               	movwf	___awmod@sign,c
  5603  001BF2  AE1A               	btfss	___awmod@dividend+1,7,c
  5604  001BF4  D006               	goto	l4404
  5605  001BF6  6C19               	negf	___awmod@dividend,c
  5606  001BF8  1E1A               	comf	___awmod@dividend+1,f,c
  5607  001BFA  B0D8               	btfsc	status,0,c
  5608  001BFC  2A1A               	incf	___awmod@dividend+1,f,c
  5609  001BFE  0E01               	movlw	1
  5610  001C00  6E1E               	movwf	___awmod@sign,c
  5611  001C02                     l4404:
  5612  001C02  AE1C               	btfss	___awmod@divisor+1,7,c
  5613  001C04  D004               	goto	l4408
  5614  001C06  6C1B               	negf	___awmod@divisor,c
  5615  001C08  1E1C               	comf	___awmod@divisor+1,f,c
  5616  001C0A  B0D8               	btfsc	status,0,c
  5617  001C0C  2A1C               	incf	___awmod@divisor+1,f,c
  5618  001C0E                     l4408:
  5619  001C0E  501B               	movf	___awmod@divisor,w,c
  5620  001C10  101C               	iorwf	___awmod@divisor+1,w,c
  5621  001C12  B4D8               	btfsc	status,2,c
  5622  001C14  D018               	goto	l4424
  5623  001C16  0E01               	movlw	1
  5624  001C18  6E1D               	movwf	___awmod@counter,c
  5625  001C1A  D004               	goto	l4414
  5626  001C1C                     l4412:
  5627  001C1C  90D8               	bcf	status,0,c
  5628  001C1E  361B               	rlcf	___awmod@divisor,f,c
  5629  001C20  361C               	rlcf	___awmod@divisor+1,f,c
  5630  001C22  2A1D               	incf	___awmod@counter,f,c
  5631  001C24                     l4414:
  5632  001C24  AE1C               	btfss	___awmod@divisor+1,7,c
  5633  001C26  D7FA               	goto	l4412
  5634  001C28                     l4416:
  5635  001C28  501B               	movf	___awmod@divisor,w,c
  5636  001C2A  5C19               	subwf	___awmod@dividend,w,c
  5637  001C2C  501C               	movf	___awmod@divisor+1,w,c
  5638  001C2E  581A               	subwfb	___awmod@dividend+1,w,c
  5639  001C30  A0D8               	btfss	status,0,c
  5640  001C32  D004               	goto	l4420
  5641  001C34  501B               	movf	___awmod@divisor,w,c
  5642  001C36  5E19               	subwf	___awmod@dividend,f,c
  5643  001C38  501C               	movf	___awmod@divisor+1,w,c
  5644  001C3A  5A1A               	subwfb	___awmod@dividend+1,f,c
  5645  001C3C                     l4420:
  5646  001C3C  90D8               	bcf	status,0,c
  5647  001C3E  321C               	rrcf	___awmod@divisor+1,f,c
  5648  001C40  321B               	rrcf	___awmod@divisor,f,c
  5649  001C42  2E1D               	decfsz	___awmod@counter,f,c
  5650  001C44  D7F1               	goto	l4416
  5651  001C46                     l4424:
  5652  001C46  501E               	movf	___awmod@sign,w,c
  5653  001C48  B4D8               	btfsc	status,2,c
  5654  001C4A  D004               	goto	l4428
  5655  001C4C  6C19               	negf	___awmod@dividend,c
  5656  001C4E  1E1A               	comf	___awmod@dividend+1,f,c
  5657  001C50  B0D8               	btfsc	status,0,c
  5658  001C52  2A1A               	incf	___awmod@dividend+1,f,c
  5659  001C54                     l4428:
  5660  001C54  C019  F019         	movff	___awmod@dividend,?___awmod
  5661  001C58  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  5662  001C5C  0012               	return	
  5663  001C5E                     __end_of___awmod:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           intcon	equ	0xFF2
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           fsr2h	equ	0xFDA
  5678                           fsr2l	equ	0xFD9
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function ___awdiv *****************
  5682 ;; Defined at:
  5683 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  dividend        2   24[COMRAM] int 
  5686 ;;  divisor         2   26[COMRAM] int 
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  quotient        2   30[COMRAM] int 
  5689 ;;  sign            1   29[COMRAM] unsigned char 
  5690 ;;  counter         1   28[COMRAM] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  2   24[COMRAM] int 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5700 ;;      Params:         4       0       0       0       0       0       0       0       0
  5701 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5703 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5704 ;;Total ram usage:        8 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    5
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_Hex2Bcd
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text29
  5715  001A70                     __ptext29:
  5716                           	opt stack 0
  5717  001A70                     ___awdiv:
  5718                           	opt stack 20
  5719                           
  5720                           ;incstack = 0
  5721  001A70  0E00               	movlw	0
  5722  001A72  6E1E               	movwf	___awdiv@sign,c
  5723  001A74  AE1C               	btfss	___awdiv@divisor+1,7,c
  5724  001A76  D006               	goto	l4360
  5725  001A78  6C1B               	negf	___awdiv@divisor,c
  5726  001A7A  1E1C               	comf	___awdiv@divisor+1,f,c
  5727  001A7C  B0D8               	btfsc	status,0,c
  5728  001A7E  2A1C               	incf	___awdiv@divisor+1,f,c
  5729  001A80  0E01               	movlw	1
  5730  001A82  6E1E               	movwf	___awdiv@sign,c
  5731  001A84                     l4360:
  5732  001A84  AE1A               	btfss	___awdiv@dividend+1,7,c
  5733  001A86  D006               	goto	l4366
  5734  001A88  6C19               	negf	___awdiv@dividend,c
  5735  001A8A  1E1A               	comf	___awdiv@dividend+1,f,c
  5736  001A8C  B0D8               	btfsc	status,0,c
  5737  001A8E  2A1A               	incf	___awdiv@dividend+1,f,c
  5738  001A90  0E01               	movlw	1
  5739  001A92  1A1E               	xorwf	___awdiv@sign,f,c
  5740  001A94                     l4366:
  5741  001A94  0E00               	movlw	0
  5742  001A96  6E20               	movwf	___awdiv@quotient+1,c
  5743  001A98  0E00               	movlw	0
  5744  001A9A  6E1F               	movwf	___awdiv@quotient,c
  5745  001A9C  501B               	movf	___awdiv@divisor,w,c
  5746  001A9E  101C               	iorwf	___awdiv@divisor+1,w,c
  5747  001AA0  B4D8               	btfsc	status,2,c
  5748  001AA2  D01C               	goto	l4388
  5749  001AA4  0E01               	movlw	1
  5750  001AA6  6E1D               	movwf	___awdiv@counter,c
  5751  001AA8  D004               	goto	l4374
  5752  001AAA                     l4372:
  5753  001AAA  90D8               	bcf	status,0,c
  5754  001AAC  361B               	rlcf	___awdiv@divisor,f,c
  5755  001AAE  361C               	rlcf	___awdiv@divisor+1,f,c
  5756  001AB0  2A1D               	incf	___awdiv@counter,f,c
  5757  001AB2                     l4374:
  5758  001AB2  AE1C               	btfss	___awdiv@divisor+1,7,c
  5759  001AB4  D7FA               	goto	l4372
  5760  001AB6                     l4376:
  5761  001AB6  90D8               	bcf	status,0,c
  5762  001AB8  361F               	rlcf	___awdiv@quotient,f,c
  5763  001ABA  3620               	rlcf	___awdiv@quotient+1,f,c
  5764  001ABC  501B               	movf	___awdiv@divisor,w,c
  5765  001ABE  5C19               	subwf	___awdiv@dividend,w,c
  5766  001AC0  501C               	movf	___awdiv@divisor+1,w,c
  5767  001AC2  581A               	subwfb	___awdiv@dividend+1,w,c
  5768  001AC4  A0D8               	btfss	status,0,c
  5769  001AC6  D005               	goto	l4384
  5770  001AC8  501B               	movf	___awdiv@divisor,w,c
  5771  001ACA  5E19               	subwf	___awdiv@dividend,f,c
  5772  001ACC  501C               	movf	___awdiv@divisor+1,w,c
  5773  001ACE  5A1A               	subwfb	___awdiv@dividend+1,f,c
  5774  001AD0  801F               	bsf	___awdiv@quotient,0,c
  5775  001AD2                     l4384:
  5776  001AD2  90D8               	bcf	status,0,c
  5777  001AD4  321C               	rrcf	___awdiv@divisor+1,f,c
  5778  001AD6  321B               	rrcf	___awdiv@divisor,f,c
  5779  001AD8  2E1D               	decfsz	___awdiv@counter,f,c
  5780  001ADA  D7ED               	goto	l4376
  5781  001ADC                     l4388:
  5782  001ADC  501E               	movf	___awdiv@sign,w,c
  5783  001ADE  B4D8               	btfsc	status,2,c
  5784  001AE0  D004               	goto	l4392
  5785  001AE2  6C1F               	negf	___awdiv@quotient,c
  5786  001AE4  1E20               	comf	___awdiv@quotient+1,f,c
  5787  001AE6  B0D8               	btfsc	status,0,c
  5788  001AE8  2A20               	incf	___awdiv@quotient+1,f,c
  5789  001AEA                     l4392:
  5790  001AEA  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  5791  001AEE  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  5792  001AF2  0012               	return	
  5793  001AF4                     __end_of___awdiv:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           intcon	equ	0xFF2
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _RsTxEnviaMsg *****************
  5812 ;; Defined at:
  5813 ;;		line 75 in file "RedSerie13.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  RsTxLen         2   36[COMRAM] int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  Temp1           2   39[COMRAM] unsigned int 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5827 ;;      Params:         2       0       0       0       0       0       0       0       0
  5828 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5829 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5830 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5831 ;;Total ram usage:        5 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    6
  5834 ;; This function calls:
  5835 ;;		_RsCheckSum
  5836 ;; This function is called by:
  5837 ;;		_MstRsComando
  5838 ;;		_Ppal_Init
  5839 ;;		_Ppal_RsComando
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text30
  5844  001F16                     __ptext30:
  5845                           	opt stack 0
  5846  001F16                     _RsTxEnviaMsg:
  5847                           	opt stack 22
  5848                           
  5849                           ;RedSerie13.c: 76: if (RsTxTransmitiendoF){return;}
  5850                           
  5851                           ;incstack = 0
  5852  001F16  0100               	movlb	0	; () banked
  5853  001F18  51BC               	movf	_RsTxTransmitiendoF& (0+255),w,b
  5854  001F1A  0100               	movlb	0	; () banked
  5855  001F1C  11BD               	iorwf	(_RsTxTransmitiendoF+1)& (0+255),w,b
  5856  001F1E  A4D8               	btfss	status,2,c
  5857  001F20  0012               	return	
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;RedSerie13.c: 78: unsigned int Temp1 = (unsigned int)RsTxLen;
  5861                           
  5862                           ; BSR set to: 0
  5863  001F22  C025  F028         	movff	RsTxEnviaMsg@RsTxLen,RsTxEnviaMsg@Temp1
  5864  001F26  C026  F029         	movff	RsTxEnviaMsg@RsTxLen+1,RsTxEnviaMsg@Temp1+1
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;RedSerie13.c: 79: RsTxBuffer [Temp1] = RsCheckSum (RsTxLen,RsTxBuffer);
  5868  001F2A  C025  F019         	movff	RsTxEnviaMsg@RsTxLen,RsCheckSum@RsLen
  5869  001F2E  C026  F01A         	movff	RsTxEnviaMsg@RsTxLen+1,RsCheckSum@RsLen+1
  5870  001F32  0E30               	movlw	low _RsTxBuffer
  5871  001F34  6E1B               	movwf	RsCheckSum@RsBuffer,c
  5872  001F36  0E01               	movlw	high _RsTxBuffer
  5873  001F38  6E1C               	movwf	RsCheckSum@RsBuffer+1,c
  5874  001F3A  ECFF  F00E         	call	_RsCheckSum	;wreg free
  5875  001F3E  6E27               	movwf	??_RsTxEnviaMsg& (0+255),c
  5876  001F40  0E30               	movlw	low _RsTxBuffer
  5877  001F42  2428               	addwf	RsTxEnviaMsg@Temp1,w,c
  5878  001F44  6ED9               	movwf	fsr2l,c
  5879  001F46  0E01               	movlw	high _RsTxBuffer
  5880  001F48  2029               	addwfc	RsTxEnviaMsg@Temp1+1,w,c
  5881  001F4A  6EDA               	movwf	fsr2h,c
  5882  001F4C  C027  FFDF         	movff	??_RsTxEnviaMsg,indf2
  5883                           
  5884                           ;RedSerie13.c: 80: RsTxIndex = -2;
  5885  001F50  0EFF               	movlw	255
  5886  001F52  0100               	movlb	0	; () banked
  5887  001F54  6FC5               	movwf	(_RsTxIndex+1)& (0+255),b
  5888  001F56  0EFE               	movlw	254
  5889  001F58  6FC4               	movwf	_RsTxIndex& (0+255),b
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;RedSerie13.c: 81: RsTxBufferLen = RsTxLen;
  5893  001F5A  C025  F0C8         	movff	RsTxEnviaMsg@RsTxLen,_RsTxBufferLen
  5894  001F5E  C026  F0C9         	movff	RsTxEnviaMsg@RsTxLen+1,_RsTxBufferLen+1
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;RedSerie13.c: 82: RsTxTransmitiendoF = 1;
  5898  001F62  0E00               	movlw	0
  5899  001F64  0100               	movlb	0	; () banked
  5900  001F66  6FBD               	movwf	(_RsTxTransmitiendoF+1)& (0+255),b
  5901  001F68  0E01               	movlw	1
  5902  001F6A  6FBC               	movwf	_RsTxTransmitiendoF& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905  001F6C  0012               	return		;funcret
  5906  001F6E                     __end_of_RsTxEnviaMsg:
  5907                           	opt stack 0
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           intcon	equ	0xFF2
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function _RsCheckSum *****************
  5925 ;; Defined at:
  5926 ;;		line 27 in file "RedSerie13.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  RsLen           2   24[COMRAM] int 
  5929 ;;  RsBuffer        2   26[COMRAM] PTR unsigned char 
  5930 ;;		 -> RsTxBuffer(30), 
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  Car1            2   34[COMRAM] int 
  5933 ;;  Ind             2   32[COMRAM] int 
  5934 ;;  CheckSum1       2   30[COMRAM] int 
  5935 ;;  CheckSum2       1   29[COMRAM] unsigned char 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      unsigned char 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5945 ;;      Params:         4       0       0       0       0       0       0       0       0
  5946 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5947 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5948 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5949 ;;Total ram usage:       12 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    5
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_RsTxEnviaMsg
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text31
  5960  001DFE                     __ptext31:
  5961                           	opt stack 0
  5962  001DFE                     _RsCheckSum:
  5963                           	opt stack 22
  5964                           
  5965                           ;RedSerie13.c: 29: int CheckSum1,Ind,Car1;
  5966                           ;RedSerie13.c: 30: char CheckSum2;
  5967                           ;RedSerie13.c: 31: CheckSum1 = 0;
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;incstack = 0
  5971  001DFE  0E00               	movlw	0
  5972  001E00  6E20               	movwf	RsCheckSum@CheckSum1+1,c
  5973  001E02  0E00               	movlw	0
  5974  001E04  6E1F               	movwf	RsCheckSum@CheckSum1,c
  5975                           
  5976                           ;RedSerie13.c: 32: for(Ind = 0; Ind < RsLen; Ind ++)
  5977  001E06  0E00               	movlw	0
  5978  001E08  6E22               	movwf	RsCheckSum@Ind+1,c
  5979  001E0A  0E00               	movlw	0
  5980  001E0C  6E21               	movwf	RsCheckSum@Ind,c
  5981  001E0E  D017               	goto	l178
  5982  001E10                     l4434:
  5983                           
  5984                           ;RedSerie13.c: 33: {
  5985                           ;RedSerie13.c: 34: Car1 = RsBuffer [Ind];
  5986  001E10  5021               	movf	RsCheckSum@Ind,w,c
  5987  001E12  241B               	addwf	RsCheckSum@RsBuffer,w,c
  5988  001E14  6ED9               	movwf	fsr2l,c
  5989  001E16  5022               	movf	RsCheckSum@Ind+1,w,c
  5990  001E18  201C               	addwfc	RsCheckSum@RsBuffer+1,w,c
  5991  001E1A  6EDA               	movwf	fsr2h,c
  5992  001E1C  50DF               	movf	indf2,w,c
  5993  001E1E  6E1D               	movwf	??_RsCheckSum& (0+255),c
  5994  001E20  501D               	movf	??_RsCheckSum,w,c
  5995  001E22  6E23               	movwf	RsCheckSum@Car1,c
  5996  001E24  6A24               	clrf	RsCheckSum@Car1+1,c
  5997                           
  5998                           ;RedSerie13.c: 36: if( (Car1 & 0x80)!= 0 ) Car1 ++;
  5999  001E26  AE23               	btfss	RsCheckSum@Car1,7,c
  6000  001E28  D002               	goto	l4440
  6001  001E2A  4A23               	infsnz	RsCheckSum@Car1,f,c
  6002  001E2C  2A24               	incf	RsCheckSum@Car1+1,f,c
  6003  001E2E                     l4440:
  6004                           
  6005                           ;RedSerie13.c: 37: CheckSum1 = CheckSum1 + Car1;
  6006  001E2E  5023               	movf	RsCheckSum@Car1,w,c
  6007  001E30  241F               	addwf	RsCheckSum@CheckSum1,w,c
  6008  001E32  6E1F               	movwf	RsCheckSum@CheckSum1,c
  6009  001E34  5024               	movf	RsCheckSum@Car1+1,w,c
  6010  001E36  2020               	addwfc	RsCheckSum@CheckSum1+1,w,c
  6011  001E38  6E20               	movwf	RsCheckSum@CheckSum1+1,c
  6012  001E3A  4A21               	infsnz	RsCheckSum@Ind,f,c
  6013  001E3C  2A22               	incf	RsCheckSum@Ind+1,f,c
  6014  001E3E                     l178:
  6015  001E3E  5019               	movf	RsCheckSum@RsLen,w,c
  6016  001E40  5C21               	subwf	RsCheckSum@Ind,w,c
  6017  001E42  5022               	movf	RsCheckSum@Ind+1,w,c
  6018  001E44  0A80               	xorlw	128
  6019  001E46  6E1D               	movwf	??_RsCheckSum& (0+255),c
  6020  001E48  501A               	movf	RsCheckSum@RsLen+1,w,c
  6021  001E4A  0A80               	xorlw	128
  6022  001E4C  581D               	subwfb	??_RsCheckSum& (0+255),w,c
  6023  001E4E  A0D8               	btfss	status,0,c
  6024  001E50  D7DF               	goto	l4434
  6025                           
  6026                           ;RedSerie13.c: 38: }
  6027                           ;RedSerie13.c: 40: CheckSum2 = (char) ((0-CheckSum1) & 0x7F);
  6028  001E52  501F               	movf	RsCheckSum@CheckSum1,w,c
  6029  001E54  0800               	sublw	0
  6030  001E56  0B7F               	andlw	127
  6031  001E58  6E1E               	movwf	RsCheckSum@CheckSum2,c
  6032                           
  6033                           ;RedSerie13.c: 41: return (CheckSum2);
  6034  001E5A  501E               	movf	RsCheckSum@CheckSum2,w,c
  6035  001E5C  0012               	return	
  6036  001E5E                     __end_of_RsCheckSum:
  6037                           	opt stack 0
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           intcon	equ	0xFF2
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           postdec1	equ	0xFE5
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           fsr2h	equ	0xFDA
  6051                           fsr2l	equ	0xFD9
  6052                           status	equ	0xFD8
  6053                           
  6054 ;; *************** function _MrUlt *****************
  6055 ;; Defined at:
  6056 ;;		line 206 in file "MemoryRoller29.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		None
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6070 ;;      Params:         0       0       0       0       0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6073 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6074 ;;Total ram usage:        0 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    5
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_Ppal_RsComando
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           	psect	text32
  6085  0026B6                     __ptext32:
  6086                           	opt stack 0
  6087  0026B6                     _MrUlt:
  6088                           	opt stack 21
  6089                           
  6090                           ;MemoryRoller29.c: 208: MrDirV = MrUltV;
  6091                           
  6092                           ;incstack = 0
  6093  0026B6  C043  F041         	movff	_MrUltV,_MrDirV
  6094  0026BA  C044  F042         	movff	_MrUltV+1,_MrDirV+1
  6095  0026BE  0012               	return		;funcret
  6096  0026C0                     __end_of_MrUlt:
  6097                           	opt stack 0
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           intcon	equ	0xFF2
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           postdec1	equ	0xFE5
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           
  6114 ;; *************** function _MrSgte *****************
  6115 ;; Defined at:
  6116 ;;		line 211 in file "MemoryRoller29.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6130 ;;      Params:         0       0       0       0       0       0       0       0       0
  6131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6133 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6134 ;;Total ram usage:        0 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    6
  6137 ;; This function calls:
  6138 ;;		__MrSgte
  6139 ;; This function is called by:
  6140 ;;		_Ppal_RsComando
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text33
  6145  00265E                     __ptext33:
  6146                           	opt stack 0
  6147  00265E                     _MrSgte:
  6148                           	opt stack 20
  6149                           
  6150                           ;MemoryRoller29.c: 213: MrDirV = _MrSgte (MrDirV);
  6151                           
  6152                           ;incstack = 0
  6153  00265E  C041  F019         	movff	_MrDirV,__MrSgte@MrDirX
  6154  002662  C042  F01A         	movff	_MrDirV+1,__MrSgte@MrDirX+1
  6155  002666  ECED  F012         	call	__MrSgte	;wreg free
  6156  00266A  C019  F041         	movff	?__MrSgte,_MrDirV
  6157  00266E  C01A  F042         	movff	?__MrSgte+1,_MrDirV+1
  6158  002672  0012               	return		;funcret
  6159  002674                     __end_of_MrSgte:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           intcon	equ	0xFF2
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           postdec1	equ	0xFE5
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _MrInit *****************
  6178 ;; Defined at:
  6179 ;;		line 115 in file "MemoryRoller29.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    9
  6200 ;; This function calls:
  6201 ;;		_MrInicializa
  6202 ;;		_MrLeeReg
  6203 ;;		__MrEsc
  6204 ;;		__MrPreparaPor
  6205 ;;		_memcpy
  6206 ;; This function is called by:
  6207 ;;		_Ppal_Init
  6208 ;;		_Ppal_RsComando
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text34
  6213  000DF2                     __ptext34:
  6214                           	opt stack 0
  6215  000DF2                     _MrInit:
  6216                           	opt stack 19
  6217                           
  6218                           ;MemoryRoller29.c: 116: MrInicializa ();
  6219                           
  6220                           ;incstack = 0
  6221  000DF2  EC64  F00E         	call	_MrInicializa	;wreg free
  6222                           
  6223                           ;MemoryRoller29.c: 117: MrFecha12Ult = 0;
  6224  000DF6  0E00               	movlw	0
  6225  000DF8  0100               	movlb	0	; () banked
  6226  000DFA  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  6227  000DFC  0E00               	movlw	0
  6228  000DFE  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  6229  000E00  0E00               	movlw	0
  6230  000E02  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  6231  000E04  0E00               	movlw	0
  6232  000E06  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;MemoryRoller29.c: 118: MrInicializado = 1;
  6236  000E08  8046               	bsf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;MemoryRoller29.c: 119: MrRegsXGpo = 32 / 8;
  6240  000E0A  0E00               	movlw	0
  6241  000E0C  0100               	movlb	0	; () banked
  6242  000E0E  6FA5               	movwf	(_MrRegsXGpo+1)& (0+255),b
  6243  000E10  0E04               	movlw	4
  6244  000E12  6FA4               	movwf	_MrRegsXGpo& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;MemoryRoller29.c: 120: for (MrDirV = 0; MrDirV < 1000; MrDirV++) {
  6248  000E14  0E00               	movlw	0
  6249  000E16  6E42               	movwf	_MrDirV+1,c
  6250  000E18  0E00               	movlw	0
  6251  000E1A  6E41               	movwf	_MrDirV,c
  6252  000E1C                     l4646:
  6253                           
  6254                           ; BSR set to: 0
  6255  000E1C  BE42               	btfsc	_MrDirV+1,7,c
  6256  000E1E  D006               	goto	l4650
  6257  000E20  0EE8               	movlw	232
  6258  000E22  5C41               	subwf	_MrDirV,w,c
  6259  000E24  0E03               	movlw	3
  6260  000E26  5842               	subwfb	_MrDirV+1,w,c
  6261  000E28  B0D8               	btfsc	status,0,c
  6262  000E2A  D023               	goto	l4666
  6263  000E2C                     l4650:
  6264                           
  6265                           ;MemoryRoller29.c: 121: MrLeeReg ();
  6266  000E2C  ECFF  F012         	call	_MrLeeReg	;wreg free
  6267                           
  6268                           ;MemoryRoller29.c: 122: if (MrReg[0] == 255) { MrUltV = MrDirV-1; break; }
  6269  000E30  0100               	movlb	0	; () banked
  6270  000E32  29D1               	incf	_MrReg& (0+255),w,b
  6271  000E34  A4D8               	btfss	status,2,c
  6272  000E36  D007               	goto	l4658
  6273                           
  6274                           ; BSR set to: 0
  6275  000E38  0EFF               	movlw	255
  6276  000E3A  2441               	addwf	_MrDirV,w,c
  6277  000E3C  6E43               	movwf	_MrUltV,c
  6278  000E3E  0EFF               	movlw	255
  6279  000E40  2042               	addwfc	_MrDirV+1,w,c
  6280  000E42  6E44               	movwf	_MrUltV+1,c
  6281  000E44  D016               	goto	l4666
  6282  000E46                     l4658:
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;MemoryRoller29.c: 123: else if(MrReg[0]==254) {memcpy(&MrFecha12Ult,&MrReg[1],3);}
  6286  000E46  0EFE               	movlw	254
  6287  000E48  0100               	movlb	0	; () banked
  6288  000E4A  19D1               	xorwf	_MrReg& (0+255),w,b
  6289  000E4C  A4D8               	btfss	status,2,c
  6290  000E4E  D00E               	goto	l4662
  6291                           
  6292                           ; BSR set to: 0
  6293  000E50  0EEF               	movlw	low _MrFecha12Ult
  6294  000E52  6E19               	movwf	memcpy@d1,c
  6295  000E54  0E00               	movlw	high _MrFecha12Ult
  6296  000E56  6E1A               	movwf	memcpy@d1+1,c
  6297  000E58  0ED2               	movlw	low (_MrReg+1)
  6298  000E5A  6E1B               	movwf	memcpy@s1,c
  6299  000E5C  0E00               	movlw	high (_MrReg+1)
  6300  000E5E  6E1C               	movwf	memcpy@s1+1,c
  6301  000E60  0E00               	movlw	0
  6302  000E62  6E1E               	movwf	memcpy@n+1,c
  6303  000E64  0E03               	movlw	3
  6304  000E66  6E1D               	movwf	memcpy@n,c
  6305  000E68  ECEB  F010         	call	_memcpy	;wreg free
  6306  000E6C                     l4662:
  6307  000E6C  4A41               	infsnz	_MrDirV,f,c
  6308  000E6E  2A42               	incf	_MrDirV+1,f,c
  6309  000E70  D7D5               	goto	l4646
  6310  000E72                     l4666:
  6311                           
  6312                           ;MemoryRoller29.c: 124: }
  6313                           ;MemoryRoller29.c: 127: if (MrDirV == 0) {
  6314  000E72  5041               	movf	_MrDirV,w,c
  6315  000E74  1042               	iorwf	_MrDirV+1,w,c
  6316  000E76  A4D8               	btfss	status,2,c
  6317  000E78  D012               	goto	l4678
  6318                           
  6319                           ;MemoryRoller29.c: 128: MrDirV = 1000-1;
  6320  000E7A  0E03               	movlw	3
  6321  000E7C  6E42               	movwf	_MrDirV+1,c
  6322  000E7E  0EE7               	movlw	231
  6323  000E80  6E41               	movwf	_MrDirV,c
  6324                           
  6325                           ;MemoryRoller29.c: 129: MrLeeReg();
  6326  000E82  ECFF  F012         	call	_MrLeeReg	;wreg free
  6327                           
  6328                           ;MemoryRoller29.c: 130: if (MrReg[0] == 255) { MrUltV = 1000-2; }
  6329  000E86  0100               	movlb	0	; () banked
  6330  000E88  29D1               	incf	_MrReg& (0+255),w,b
  6331  000E8A  A4D8               	btfss	status,2,c
  6332  000E8C  D004               	goto	l4676
  6333                           
  6334                           ; BSR set to: 0
  6335  000E8E  0E03               	movlw	3
  6336  000E90  6E44               	movwf	_MrUltV+1,c
  6337  000E92  0EE6               	movlw	230
  6338  000E94  D003               	goto	L1
  6339  000E96                     l4676:
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;MemoryRoller29.c: 131: else { MrUltV = 1000-1; }
  6343  000E96  0E03               	movlw	3
  6344  000E98  6E44               	movwf	_MrUltV+1,c
  6345  000E9A  0EE7               	movlw	231
  6346  000E9C                     L1:
  6347  000E9C  6E43               	movwf	_MrUltV,c
  6348  000E9E                     l4678:
  6349                           
  6350                           ;MemoryRoller29.c: 132: }
  6351                           ;MemoryRoller29.c: 133: if (MrDirV >= 1000) {
  6352  000E9E  BE42               	btfsc	_MrDirV+1,7,c
  6353  000EA0  D019               	goto	l4684
  6354  000EA2  0EE8               	movlw	232
  6355  000EA4  5C41               	subwf	_MrDirV,w,c
  6356  000EA6  0E03               	movlw	3
  6357  000EA8  5842               	subwfb	_MrDirV+1,w,c
  6358  000EAA  A0D8               	btfss	status,0,c
  6359  000EAC  D013               	goto	l4684
  6360                           
  6361                           ;MemoryRoller29.c: 135: _MrPreparaPor ();
  6362  000EAE  ECA2  F011         	call	__MrPreparaPor	;wreg free
  6363                           
  6364                           ;MemoryRoller29.c: 136: _MrEsc (1000-1, MrRegAux);
  6365  000EB2  0E03               	movlw	3
  6366  000EB4  0101               	movlb	1	; () banked
  6367  000EB6  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6368  000EB8  0EE7               	movlw	231
  6369  000EBA  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6370  000EBC  0E6C               	movlw	low _MrRegAux
  6371  000EBE  0101               	movlb	1	; () banked
  6372  000EC0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6373  000EC2  0E01               	movlw	high _MrRegAux
  6374  000EC4  0101               	movlb	1	; () banked
  6375  000EC6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6376  000EC8  EC63  F012         	call	__MrEsc	;wreg free
  6377                           
  6378                           ;MemoryRoller29.c: 137: MrUltV = 1000-2;
  6379  000ECC  0E03               	movlw	3
  6380  000ECE  6E44               	movwf	_MrUltV+1,c
  6381  000ED0  0EE6               	movlw	230
  6382  000ED2  6E43               	movwf	_MrUltV,c
  6383  000ED4                     l4684:
  6384                           
  6385                           ;MemoryRoller29.c: 138: }
  6386                           ;MemoryRoller29.c: 141: if (MrFecha12Ult == 0) {
  6387  000ED4  0100               	movlb	0	; () banked
  6388  000ED6  51EF               	movf	_MrFecha12Ult& (0+255),w,b
  6389  000ED8  0100               	movlb	0	; () banked
  6390  000EDA  11F0               	iorwf	(_MrFecha12Ult+1)& (0+255),w,b
  6391  000EDC  0100               	movlb	0	; () banked
  6392  000EDE  11F1               	iorwf	(_MrFecha12Ult+2)& (0+255),w,b
  6393  000EE0  0100               	movlb	0	; () banked
  6394  000EE2  11F2               	iorwf	(_MrFecha12Ult+3)& (0+255),w,b
  6395  000EE4  A4D8               	btfss	status,2,c
  6396  000EE6  D024               	goto	l421
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;MemoryRoller29.c: 142: for (MrDirV = 1000-1; MrDirV >= 0; MrDirV--) {
  6400  000EE8  0E03               	movlw	3
  6401  000EEA  6E42               	movwf	_MrDirV+1,c
  6402  000EEC  0EE7               	movlw	231
  6403  000EEE  6E41               	movwf	_MrDirV,c
  6404  000EF0                     l4688:
  6405                           
  6406                           ; BSR set to: 0
  6407  000EF0  BE42               	btfsc	_MrDirV+1,7,c
  6408  000EF2  D01E               	goto	l421
  6409                           
  6410                           ;MemoryRoller29.c: 143: MrLeeReg ();
  6411                           
  6412                           ; BSR set to: 0
  6413                           
  6414                           ; BSR set to: 0
  6415  000EF4  ECFF  F012         	call	_MrLeeReg	;wreg free
  6416                           
  6417                           ;MemoryRoller29.c: 144: if (MrReg[0] == 255) {break;}
  6418  000EF8  0100               	movlb	0	; () banked
  6419  000EFA  29D1               	incf	_MrReg& (0+255),w,b
  6420  000EFC  B4D8               	btfsc	status,2,c
  6421  000EFE  D018               	goto	l421
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;MemoryRoller29.c: 145: if (MrReg[0] == 254) {
  6425                           
  6426                           ; BSR set to: 0
  6427                           
  6428                           ; BSR set to: 0
  6429  000F00  0EFE               	movlw	254
  6430  000F02  0100               	movlb	0	; () banked
  6431  000F04  19D1               	xorwf	_MrReg& (0+255),w,b
  6432  000F06  A4D8               	btfss	status,2,c
  6433  000F08  D00F               	goto	l4702
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;MemoryRoller29.c: 146: memcpy(&MrFecha12Ult, &MrReg[1], 3);
  6437  000F0A  0EEF               	movlw	low _MrFecha12Ult
  6438  000F0C  6E19               	movwf	memcpy@d1,c
  6439  000F0E  0E00               	movlw	high _MrFecha12Ult
  6440  000F10  6E1A               	movwf	memcpy@d1+1,c
  6441  000F12  0ED2               	movlw	low (_MrReg+1)
  6442  000F14  6E1B               	movwf	memcpy@s1,c
  6443  000F16  0E00               	movlw	high (_MrReg+1)
  6444  000F18  6E1C               	movwf	memcpy@s1+1,c
  6445  000F1A  0E00               	movlw	0
  6446  000F1C  6E1E               	movwf	memcpy@n+1,c
  6447  000F1E  0E03               	movlw	3
  6448  000F20  6E1D               	movwf	memcpy@n,c
  6449  000F22  ECEB  F010         	call	_memcpy	;wreg free
  6450                           
  6451                           ;MemoryRoller29.c: 147: break;
  6452  000F26  D004               	goto	l421
  6453  000F28                     l4702:
  6454  000F28  0641               	decf	_MrDirV,f,c
  6455  000F2A  A0D8               	btfss	status,0,c
  6456  000F2C  0642               	decf	_MrDirV+1,f,c
  6457  000F2E  D7E0               	goto	l4688
  6458  000F30                     l421:
  6459                           
  6460                           ;MemoryRoller29.c: 148: }
  6461                           ;MemoryRoller29.c: 149: }
  6462                           ;MemoryRoller29.c: 150: }
  6463                           ;MemoryRoller29.c: 152: MrDirV = MrUltV;
  6464  000F30  C043  F041         	movff	_MrUltV,_MrDirV
  6465  000F34  C044  F042         	movff	_MrUltV+1,_MrDirV+1
  6466  000F38  0012               	return		;funcret
  6467  000F3A                     __end_of_MrInit:
  6468                           	opt stack 0
  6469                           tblptru	equ	0xFF8
  6470                           tblptrh	equ	0xFF7
  6471                           tblptrl	equ	0xFF6
  6472                           tablat	equ	0xFF5
  6473                           intcon	equ	0xFF2
  6474                           postinc0	equ	0xFEE
  6475                           wreg	equ	0xFE8
  6476                           postdec1	equ	0xFE5
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _MrLeeReg *****************
  6486 ;; Defined at:
  6487 ;;		line 201 in file "MemoryRoller29.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    8
  6508 ;; This function calls:
  6509 ;;		__MrLee
  6510 ;; This function is called by:
  6511 ;;		_MrInit
  6512 ;;		_Ppal_RsComando
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text35
  6517  0025FE                     __ptext35:
  6518                           	opt stack 0
  6519  0025FE                     _MrLeeReg:
  6520                           	opt stack 19
  6521                           
  6522                           ;MemoryRoller29.c: 203: _MrLee (MrDirV, MrReg);
  6523                           
  6524                           ;incstack = 0
  6525  0025FE  C041  F17D         	movff	_MrDirV,__MrLee@MrNReg
  6526  002602  C042  F17E         	movff	_MrDirV+1,__MrLee@MrNReg+1
  6527  002606  0ED1               	movlw	low _MrReg
  6528  002608  0101               	movlb	1	; () banked
  6529  00260A  6F7F               	movwf	__MrLee@MrReg1& (0+255),b
  6530  00260C  0E00               	movlw	high _MrReg
  6531  00260E  0101               	movlb	1	; () banked
  6532  002610  6F80               	movwf	(__MrLee@MrReg1+1)& (0+255),b
  6533  002612  EC4E  F012         	call	__MrLee	;wreg free
  6534  002616  0012               	return		;funcret
  6535  002618                     __end_of_MrLeeReg:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           intcon	equ	0xFF2
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           postdec1	equ	0xFE5
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function __MrLee *****************
  6554 ;; Defined at:
  6555 ;;		line 301 in file "MemoryRoller29.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  MrNReg          2    4[BANK1 ] unsigned int 
  6558 ;;  MrReg1          2    6[BANK1 ] PTR unsigned char 
  6559 ;;		 -> MrReg(13), 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6571 ;;      Params:         0       0       4       0       0       0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6574 ;;      Totals:         0       0       4       0       0       0       0       0       0
  6575 ;;Total ram usage:        4 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    7
  6578 ;; This function calls:
  6579 ;;		_MseLee
  6580 ;;		__CalculaRegPos
  6581 ;; This function is called by:
  6582 ;;		_MrLeeReg
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text36
  6587  00249C                     __ptext36:
  6588                           	opt stack 0
  6589  00249C                     __MrLee:
  6590                           	opt stack 19
  6591                           
  6592                           ;MemoryRoller29.c: 303: _CalculaRegPos (MrNReg);
  6593                           
  6594                           ;incstack = 0
  6595  00249C  C17D  F020         	movff	__MrLee@MrNReg,__CalculaRegPos@MrNReg1
  6596  0024A0  C17E  F021         	movff	__MrLee@MrNReg+1,__CalculaRegPos@MrNReg1+1
  6597  0024A4  EC7A  F00D         	call	__CalculaRegPos	;wreg free
  6598                           
  6599                           ;MemoryRoller29.c: 304: MseLee (MrRegPos, MrReg1, 8);
  6600  0024A8  C07E  F029         	movff	_MrRegPos,MseLee@Dir
  6601  0024AC  C07F  F02A         	movff	_MrRegPos+1,MseLee@Dir+1
  6602  0024B0  C17F  F02B         	movff	__MrLee@MrReg1,MseLee@Datos
  6603  0024B4  C180  F02C         	movff	__MrLee@MrReg1+1,MseLee@Datos+1
  6604  0024B8  0E00               	movlw	0
  6605  0024BA  6E2E               	movwf	MseLee@NBytes+1,c
  6606  0024BC  0E08               	movlw	8
  6607  0024BE  6E2D               	movwf	MseLee@NBytes,c
  6608  0024C0  EC88  F005         	call	_MseLee	;wreg free
  6609  0024C4  0012               	return		;funcret
  6610  0024C6                     __end_of__MrLee:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           intcon	equ	0xFF2
  6617                           postinc0	equ	0xFEE
  6618                           wreg	equ	0xFE8
  6619                           postdec1	equ	0xFE5
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function _MseLee *****************
  6629 ;; Defined at:
  6630 ;;		line 48 in file "Mse21.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  Dir             2   40[COMRAM] unsigned int 
  6633 ;;  Datos           2   42[COMRAM] PTR unsigned char 
  6634 ;;		 -> MrReg(13), RsTxBuffer(30), 
  6635 ;;  NBytes          2   44[COMRAM] int 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  Index           4    0[BANK1 ] long 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6647 ;;      Params:         6       0       0       0       0       0       0       0       0
  6648 ;;      Locals:         0       0       4       0       0       0       0       0       0
  6649 ;;      Temps:          0       5       0       0       0       0       0       0       0
  6650 ;;      Totals:         6       5       4       0       0       0       0       0       0
  6651 ;;Total ram usage:       15 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    6
  6654 ;; This function calls:
  6655 ;;		_I2CEscByte
  6656 ;;		_I2CLeeByte
  6657 ;;		_I2CSendAck
  6658 ;;		_I2CSendNAck
  6659 ;;		_I2CStart
  6660 ;;		_I2CStop
  6661 ;; This function is called by:
  6662 ;;		__MrLee
  6663 ;;		_Ppal_RsComando
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text37
  6668  000B10                     __ptext37:
  6669                           	opt stack 0
  6670  000B10                     _MseLee:
  6671                           	opt stack 19
  6672                           
  6673                           ;Mse21.c: 50: long Index;
  6674                           ;Mse21.c: 52: I2CAck = 0;
  6675                           
  6676                           ;incstack = 0
  6677  000B10  0E00               	movlw	0
  6678  000B12  0100               	movlb	0	; () banked
  6679  000B14  6FA9               	movwf	(_I2CAck+1)& (0+255),b
  6680  000B16  0E00               	movlw	0
  6681  000B18  6FA8               	movwf	_I2CAck& (0+255),b
  6682                           
  6683                           ;Mse21.c: 53: for (Index = 0; (Index<100000) & (!I2CAck); Index++) {
  6684  000B1A  0E00               	movlw	0
  6685  000B1C  0101               	movlb	1	; () banked
  6686  000B1E  6F79               	movwf	MseLee@Index& (0+255),b
  6687  000B20  0E00               	movlw	0
  6688  000B22  6F7A               	movwf	(MseLee@Index+1)& (0+255),b
  6689  000B24  0E00               	movlw	0
  6690  000B26  6F7B               	movwf	(MseLee@Index+2)& (0+255),b
  6691  000B28  0E00               	movlw	0
  6692  000B2A  6F7C               	movwf	(MseLee@Index+3)& (0+255),b
  6693  000B2C  D00F               	goto	l4276
  6694  000B2E                     l4270:
  6695                           
  6696                           ;Mse21.c: 54: I2CStart();
  6697  000B2E  ECEF  F011         	call	_I2CStart	;wreg free
  6698                           
  6699                           ;Mse21.c: 55: I2CEscByte(0xA0);
  6700  000B32  0E00               	movlw	0
  6701  000B34  6E26               	movwf	I2CEscByte@I2CByte+1,c
  6702  000B36  0EA0               	movlw	160
  6703  000B38  6E25               	movwf	I2CEscByte@I2CByte,c
  6704  000B3A  ECE8  F00C         	call	_I2CEscByte	;wreg free
  6705  000B3E  0E01               	movlw	1
  6706  000B40  0101               	movlb	1	; () banked
  6707  000B42  2779               	addwf	MseLee@Index& (0+255),f,b
  6708  000B44  0E00               	movlw	0
  6709  000B46  237A               	addwfc	(MseLee@Index+1)& (0+255),f,b
  6710  000B48  237B               	addwfc	(MseLee@Index+2)& (0+255),f,b
  6711  000B4A  237C               	addwfc	(MseLee@Index+3)& (0+255),f,b
  6712  000B4C                     l4276:
  6713                           
  6714                           ; BSR set to: 1
  6715  000B4C  0101               	movlb	1	; () banked
  6716  000B4E  BF7C               	btfsc	(MseLee@Index+3)& (0+255),7,b
  6717  000B50  D00E               	goto	l4278
  6718  000B52  0101               	movlb	1	; () banked
  6719  000B54  517C               	movf	(MseLee@Index+3)& (0+255),w,b
  6720  000B56  E111               	bnz	l4280
  6721  000B58  0EA0               	movlw	160
  6722  000B5A  0101               	movlb	1	; () banked
  6723  000B5C  5D79               	subwf	MseLee@Index& (0+255),w,b
  6724  000B5E  0E86               	movlw	134
  6725  000B60  0101               	movlb	1	; () banked
  6726  000B62  597A               	subwfb	(MseLee@Index+1)& (0+255),w,b
  6727  000B64  0E01               	movlw	1
  6728  000B66  0101               	movlb	1	; () banked
  6729  000B68  597B               	subwfb	(MseLee@Index+2)& (0+255),w,b
  6730  000B6A  B0D8               	btfsc	status,0,c
  6731  000B6C  D006               	goto	l4280
  6732  000B6E                     l4278:
  6733                           
  6734                           ; BSR set to: 1
  6735  000B6E  0100               	movlb	0	; () banked
  6736  000B70  51A8               	movf	_I2CAck& (0+255),w,b
  6737  000B72  0100               	movlb	0	; () banked
  6738  000B74  11A9               	iorwf	(_I2CAck+1)& (0+255),w,b
  6739  000B76  B4D8               	btfsc	status,2,c
  6740  000B78  D7DA               	goto	l4270
  6741  000B7A                     l4280:
  6742                           
  6743                           ;Mse21.c: 56: }
  6744                           ;Mse21.c: 57: I2CEscByte((Dir>>8) & 0xFF);
  6745  000B7A  C029  F0F5         	movff	MseLee@Dir,??_MseLee
  6746  000B7E  C02A  F0F6         	movff	MseLee@Dir+1,??_MseLee+1
  6747  000B82  C0F6  F0F5         	movff	??_MseLee+1,??_MseLee
  6748  000B86  0100               	movlb	0	; () banked
  6749  000B88  6BF6               	clrf	(??_MseLee+1)& (0+255),b
  6750  000B8A  0100               	movlb	0	; () banked
  6751  000B8C  51F5               	movf	??_MseLee& (0+255),w,b
  6752  000B8E  6E25               	movwf	I2CEscByte@I2CByte,c
  6753  000B90  6A26               	clrf	I2CEscByte@I2CByte+1,c
  6754  000B92  ECE8  F00C         	call	_I2CEscByte	;wreg free
  6755                           
  6756                           ;Mse21.c: 58: I2CEscByte(Dir & 0xFF);
  6757  000B96  5029               	movf	MseLee@Dir,w,c
  6758  000B98  6E25               	movwf	I2CEscByte@I2CByte,c
  6759  000B9A  6A26               	clrf	I2CEscByte@I2CByte+1,c
  6760  000B9C  ECE8  F00C         	call	_I2CEscByte	;wreg free
  6761                           
  6762                           ;Mse21.c: 59: I2CStart();
  6763  000BA0  ECEF  F011         	call	_I2CStart	;wreg free
  6764                           
  6765                           ;Mse21.c: 60: I2CEscByte(0xA1);
  6766  000BA4  0E00               	movlw	0
  6767  000BA6  6E26               	movwf	I2CEscByte@I2CByte+1,c
  6768  000BA8  0EA1               	movlw	161
  6769  000BAA  6E25               	movwf	I2CEscByte@I2CByte,c
  6770  000BAC  ECE8  F00C         	call	_I2CEscByte	;wreg free
  6771                           
  6772                           ;Mse21.c: 61: for (Index = 0; Index < (NBytes-1); Index++) {
  6773  000BB0  0E00               	movlw	0
  6774  000BB2  0101               	movlb	1	; () banked
  6775  000BB4  6F79               	movwf	MseLee@Index& (0+255),b
  6776  000BB6  0E00               	movlw	0
  6777  000BB8  6F7A               	movwf	(MseLee@Index+1)& (0+255),b
  6778  000BBA  0E00               	movlw	0
  6779  000BBC  6F7B               	movwf	(MseLee@Index+2)& (0+255),b
  6780  000BBE  0E00               	movlw	0
  6781  000BC0  6F7C               	movwf	(MseLee@Index+3)& (0+255),b
  6782  000BC2  D015               	goto	l4294
  6783  000BC4                     l4288:
  6784                           
  6785                           ;Mse21.c: 62: Datos[Index] = I2CLeeByte();
  6786  000BC4  0101               	movlb	1	; () banked
  6787  000BC6  5179               	movf	MseLee@Index& (0+255),w,b
  6788  000BC8  242B               	addwf	MseLee@Datos,w,c
  6789  000BCA  6ED9               	movwf	fsr2l,c
  6790  000BCC  0101               	movlb	1	; () banked
  6791  000BCE  517A               	movf	(MseLee@Index+1)& (0+255),w,b
  6792  000BD0  202C               	addwfc	MseLee@Datos+1,w,c
  6793  000BD2  6EDA               	movwf	fsr2h,c
  6794  000BD4  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  6795  000BD8  5019               	movf	?_I2CLeeByte,w,c
  6796  000BDA  6EDF               	movwf	indf2,c
  6797                           
  6798                           ;Mse21.c: 63: I2CSendAck();
  6799  000BDC  EC4A  F011         	call	_I2CSendAck	;wreg free
  6800  000BE0  0E01               	movlw	1
  6801  000BE2  0101               	movlb	1	; () banked
  6802  000BE4  2779               	addwf	MseLee@Index& (0+255),f,b
  6803  000BE6  0E00               	movlw	0
  6804  000BE8  237A               	addwfc	(MseLee@Index+1)& (0+255),f,b
  6805  000BEA  237B               	addwfc	(MseLee@Index+2)& (0+255),f,b
  6806  000BEC  237C               	addwfc	(MseLee@Index+3)& (0+255),f,b
  6807  000BEE                     l4294:
  6808                           
  6809                           ; BSR set to: 1
  6810  000BEE  0EFF               	movlw	255
  6811  000BF0  242D               	addwf	MseLee@NBytes,w,c
  6812  000BF2  0100               	movlb	0	; () banked
  6813  000BF4  6FF5               	movwf	??_MseLee& (0+255),b
  6814  000BF6  0EFF               	movlw	255
  6815  000BF8  202E               	addwfc	MseLee@NBytes+1,w,c
  6816  000BFA  0100               	movlb	0	; () banked
  6817  000BFC  6FF6               	movwf	(??_MseLee+1)& (0+255),b
  6818  000BFE  0100               	movlb	0	; () banked
  6819  000C00  6BF7               	clrf	(??_MseLee+2)& (0+255),b
  6820  000C02  0100               	movlb	0	; () banked
  6821  000C04  BFF6               	btfsc	(??_MseLee+1)& (0+255),7,b
  6822  000C06  07F7               	decf	(??_MseLee+2)& (0+255),f,b
  6823  000C08  0100               	movlb	0	; () banked
  6824  000C0A  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6825  000C0C  0100               	movlb	0	; () banked
  6826  000C0E  6FF8               	movwf	(??_MseLee+3)& (0+255),b
  6827  000C10  0100               	movlb	0	; () banked
  6828  000C12  51F5               	movf	??_MseLee& (0+255),w,b
  6829  000C14  0101               	movlb	1	; () banked
  6830  000C16  5D79               	subwf	MseLee@Index& (0+255),w,b
  6831  000C18  0100               	movlb	0	; () banked
  6832  000C1A  51F6               	movf	(??_MseLee+1)& (0+255),w,b
  6833  000C1C  0101               	movlb	1	; () banked
  6834  000C1E  597A               	subwfb	(MseLee@Index+1)& (0+255),w,b
  6835  000C20  0100               	movlb	0	; () banked
  6836  000C22  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6837  000C24  0101               	movlb	1	; () banked
  6838  000C26  597B               	subwfb	(MseLee@Index+2)& (0+255),w,b
  6839  000C28  0101               	movlb	1	; () banked
  6840  000C2A  517C               	movf	(MseLee@Index+3)& (0+255),w,b
  6841  000C2C  0A80               	xorlw	128
  6842  000C2E  0100               	movlb	0	; () banked
  6843  000C30  6FF9               	movwf	(??_MseLee+4)& (0+255),b
  6844  000C32  0100               	movlb	0	; () banked
  6845  000C34  51F8               	movf	(??_MseLee+3)& (0+255),w,b
  6846  000C36  0A80               	xorlw	128
  6847  000C38  0100               	movlb	0	; () banked
  6848  000C3A  59F9               	subwfb	(??_MseLee+4)& (0+255),w,b
  6849  000C3C  A0D8               	btfss	status,0,c
  6850  000C3E  D7C2               	goto	l4288
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;Mse21.c: 64: }
  6854                           ;Mse21.c: 65: Datos[NBytes-1] = I2CLeeByte();
  6855                           
  6856                           ; BSR set to: 0
  6857  000C40  0EFF               	movlw	255
  6858  000C42  0100               	movlb	0	; () banked
  6859  000C44  6FF5               	movwf	??_MseLee& (0+255),b
  6860  000C46  0EFF               	movlw	255
  6861  000C48  0100               	movlb	0	; () banked
  6862  000C4A  6FF6               	movwf	(??_MseLee+1)& (0+255),b
  6863  000C4C  C02D  F0F7         	movff	MseLee@NBytes,??_MseLee+2
  6864  000C50  C02E  F0F8         	movff	MseLee@NBytes+1,??_MseLee+3
  6865  000C54  0100               	movlb	0	; () banked
  6866  000C56  51F5               	movf	??_MseLee& (0+255),w,b
  6867  000C58  0100               	movlb	0	; () banked
  6868  000C5A  27F7               	addwf	(??_MseLee+2)& (0+255),f,b
  6869  000C5C  0100               	movlb	0	; () banked
  6870  000C5E  51F6               	movf	(??_MseLee+1)& (0+255),w,b
  6871  000C60  0100               	movlb	0	; () banked
  6872  000C62  23F8               	addwfc	(??_MseLee+3)& (0+255),f,b
  6873  000C64  0100               	movlb	0	; () banked
  6874  000C66  51F7               	movf	(??_MseLee+2)& (0+255),w,b
  6875  000C68  242B               	addwf	MseLee@Datos,w,c
  6876  000C6A  6ED9               	movwf	fsr2l,c
  6877  000C6C  0100               	movlb	0	; () banked
  6878  000C6E  51F8               	movf	(??_MseLee+3)& (0+255),w,b
  6879  000C70  202C               	addwfc	MseLee@Datos+1,w,c
  6880  000C72  6EDA               	movwf	fsr2h,c
  6881  000C74  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  6882  000C78  5019               	movf	?_I2CLeeByte,w,c
  6883  000C7A  6EDF               	movwf	indf2,c
  6884                           
  6885                           ;Mse21.c: 66: I2CSendNAck();
  6886  000C7C  ECBC  F011         	call	_I2CSendNAck	;wreg free
  6887                           
  6888                           ;Mse21.c: 67: I2CStop();
  6889  000C80  EC8C  F012         	call	_I2CStop	;wreg free
  6890                           
  6891                           ;Mse21.c: 68: MseUltDirLeido = Dir;
  6892  000C84  C029  F0A6         	movff	MseLee@Dir,_MseUltDirLeido
  6893  000C88  C02A  F0A7         	movff	MseLee@Dir+1,_MseUltDirLeido+1
  6894  000C8C  0012               	return		;funcret
  6895  000C8E                     __end_of_MseLee:
  6896                           	opt stack 0
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           intcon	equ	0xFF2
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           postdec1	equ	0xFE5
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _MrFormat *****************
  6914 ;; Defined at:
  6915 ;;		line 87 in file "MemoryRoller29.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6932 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    8
  6936 ;; This function calls:
  6937 ;;		_MrInicializa
  6938 ;;		_MrSeparaFecha
  6939 ;;		_RtcLee
  6940 ;;		__MrEsc
  6941 ;;		__MrPreparaFecha
  6942 ;;		__MrPreparaPor
  6943 ;; This function is called by:
  6944 ;;		_Ppal_RsComando
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           	psect	text38
  6949  00186C                     __ptext38:
  6950                           	opt stack 0
  6951  00186C                     _MrFormat:
  6952                           	opt stack 18
  6953                           
  6954                           ;MemoryRoller29.c: 88: MrInicializa ();
  6955                           
  6956                           ;incstack = 0
  6957  00186C  EC64  F00E         	call	_MrInicializa	;wreg free
  6958                           
  6959                           ;MemoryRoller29.c: 90: MrInicializado = 1;
  6960  001870  8046               	bsf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  6961                           
  6962                           ;MemoryRoller29.c: 91: MrRegsXGpo = 32 / 8;
  6963  001872  0E00               	movlw	0
  6964  001874  0100               	movlb	0	; () banked
  6965  001876  6FA5               	movwf	(_MrRegsXGpo+1)& (0+255),b
  6966  001878  0E04               	movlw	4
  6967  00187A  6FA4               	movwf	_MrRegsXGpo& (0+255),b
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;MemoryRoller29.c: 97: _MrPreparaPor ();
  6971  00187C  ECA2  F011         	call	__MrPreparaPor	;wreg free
  6972                           
  6973                           ;MemoryRoller29.c: 98: _MrEsc (1000-1, MrRegAux);
  6974  001880  0E03               	movlw	3
  6975  001882  0101               	movlb	1	; () banked
  6976  001884  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6977  001886  0EE7               	movlw	231
  6978  001888  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6979  00188A  0E6C               	movlw	low _MrRegAux
  6980  00188C  0101               	movlb	1	; () banked
  6981  00188E  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6982  001890  0E01               	movlw	high _MrRegAux
  6983  001892  0101               	movlb	1	; () banked
  6984  001894  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6985  001896  EC63  F012         	call	__MrEsc	;wreg free
  6986                           
  6987                           ;MemoryRoller29.c: 99: _MrEsc (1, MrRegAux);
  6988  00189A  0E00               	movlw	0
  6989  00189C  0101               	movlb	1	; () banked
  6990  00189E  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  6991  0018A0  0E01               	movlw	1
  6992  0018A2  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  6993  0018A4  0E6C               	movlw	low _MrRegAux
  6994  0018A6  0101               	movlb	1	; () banked
  6995  0018A8  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  6996  0018AA  0E01               	movlw	high _MrRegAux
  6997  0018AC  0101               	movlb	1	; () banked
  6998  0018AE  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  6999  0018B0  EC63  F012         	call	__MrEsc	;wreg free
  7000                           
  7001                           ;MemoryRoller29.c: 102: MrFecha12 = 0;
  7002  0018B4  0E00               	movlw	0
  7003  0018B6  6E3D               	movwf	_MrFecha12,c
  7004  0018B8  0E00               	movlw	0
  7005  0018BA  6E3E               	movwf	_MrFecha12+1,c
  7006  0018BC  0E00               	movlw	0
  7007  0018BE  6E3F               	movwf	_MrFecha12+2,c
  7008  0018C0  0E00               	movlw	0
  7009  0018C2  6E40               	movwf	_MrFecha12+3,c
  7010                           
  7011                           ;MemoryRoller29.c: 103: RtcLee ();
  7012  0018C4  ECB0  F00A         	call	_RtcLee	;wreg free
  7013                           
  7014                           ;MemoryRoller29.c: 104: MrSeparaFecha ();
  7015  0018C8  ECC8  F008         	call	_MrSeparaFecha	;wreg free
  7016                           
  7017                           ;MemoryRoller29.c: 105: MrFecha12Ult = 0;
  7018  0018CC  0E00               	movlw	0
  7019  0018CE  0100               	movlb	0	; () banked
  7020  0018D0  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  7021  0018D2  0E00               	movlw	0
  7022  0018D4  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  7023  0018D6  0E00               	movlw	0
  7024  0018D8  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  7025  0018DA  0E00               	movlw	0
  7026  0018DC  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;MemoryRoller29.c: 106: _MrPreparaFecha();
  7030  0018DE  EC99  F00E         	call	__MrPreparaFecha	;wreg free
  7031                           
  7032                           ;MemoryRoller29.c: 107: _MrEsc (0, MrRegAux);
  7033  0018E2  0E00               	movlw	0
  7034  0018E4  0101               	movlb	1	; () banked
  7035  0018E6  6F7E               	movwf	(__MrEsc@MrNReg+1)& (0+255),b
  7036  0018E8  0E00               	movlw	0
  7037  0018EA  6F7D               	movwf	__MrEsc@MrNReg& (0+255),b
  7038  0018EC  0E6C               	movlw	low _MrRegAux
  7039  0018EE  0101               	movlb	1	; () banked
  7040  0018F0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7041  0018F2  0E01               	movlw	high _MrRegAux
  7042  0018F4  0101               	movlb	1	; () banked
  7043  0018F6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7044  0018F8  EC63  F012         	call	__MrEsc	;wreg free
  7045                           
  7046                           ;MemoryRoller29.c: 109: MrFecha12Ult = MrFecha12;
  7047  0018FC  C03D  F0EF         	movff	_MrFecha12,_MrFecha12Ult
  7048  001900  C03E  F0F0         	movff	_MrFecha12+1,_MrFecha12Ult+1
  7049  001904  C03F  F0F1         	movff	_MrFecha12+2,_MrFecha12Ult+2
  7050  001908  C040  F0F2         	movff	_MrFecha12+3,_MrFecha12Ult+3
  7051                           
  7052                           ;MemoryRoller29.c: 110: MrUltV = 0;
  7053  00190C  0E00               	movlw	0
  7054  00190E  6E44               	movwf	_MrUltV+1,c
  7055  001910  0E00               	movlw	0
  7056  001912  6E43               	movwf	_MrUltV,c
  7057                           
  7058                           ;MemoryRoller29.c: 111: MrDirV = 0;
  7059  001914  0E00               	movlw	0
  7060  001916  6E42               	movwf	_MrDirV+1,c
  7061  001918  0E00               	movlw	0
  7062  00191A  6E41               	movwf	_MrDirV,c
  7063  00191C  0012               	return		;funcret
  7064  00191E                     __end_of_MrFormat:
  7065                           	opt stack 0
  7066                           tblptru	equ	0xFF8
  7067                           tblptrh	equ	0xFF7
  7068                           tblptrl	equ	0xFF6
  7069                           tablat	equ	0xFF5
  7070                           intcon	equ	0xFF2
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           postdec1	equ	0xFE5
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _MrInicializa *****************
  7083 ;; Defined at:
  7084 ;;		line 72 in file "MemoryRoller29.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  Ind             2   24[COMRAM] unsigned short 
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7098 ;;      Params:         0       0       0       0       0       0       0       0       0
  7099 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7101 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7102 ;;Total ram usage:        2 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    5
  7105 ;; This function calls:
  7106 ;;		Nothing
  7107 ;; This function is called by:
  7108 ;;		_MrFormat
  7109 ;;		_MrInit
  7110 ;;		_Ppal_Init
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text39
  7115  001CC8                     __ptext39:
  7116                           	opt stack 0
  7117  001CC8                     _MrInicializa:
  7118                           	opt stack 22
  7119                           
  7120                           ;MemoryRoller29.c: 73: unsigned short Ind;
  7121                           ;MemoryRoller29.c: 79: MrInicializado = 0;
  7122                           
  7123                           ;incstack = 0
  7124  001CC8  9046               	bcf	_MrInicializado/(0+8),_MrInicializado& (0+7),c
  7125                           
  7126                           ;MemoryRoller29.c: 80: MrFecha12Ult = 0;
  7127  001CCA  0E00               	movlw	0
  7128  001CCC  0100               	movlb	0	; () banked
  7129  001CCE  6FEF               	movwf	_MrFecha12Ult& (0+255),b
  7130  001CD0  0E00               	movlw	0
  7131  001CD2  6FF0               	movwf	(_MrFecha12Ult+1)& (0+255),b
  7132  001CD4  0E00               	movlw	0
  7133  001CD6  6FF1               	movwf	(_MrFecha12Ult+2)& (0+255),b
  7134  001CD8  0E00               	movlw	0
  7135  001CDA  6FF2               	movwf	(_MrFecha12Ult+3)& (0+255),b
  7136                           
  7137                           ;MemoryRoller29.c: 81: for (Ind = 0; Ind < 8; Ind++) { MrReg[Ind]=0; MrRegAux[Ind]=1; }
  7138  001CDC  0E00               	movlw	0
  7139  001CDE  6E1A               	movwf	MrInicializa@Ind+1,c
  7140  001CE0  0E00               	movlw	0
  7141  001CE2  6E19               	movwf	MrInicializa@Ind,c
  7142  001CE4                     l4508:
  7143                           
  7144                           ; BSR set to: 0
  7145  001CE4  501A               	movf	MrInicializa@Ind+1,w,c
  7146  001CE6  E117               	bnz	l4518
  7147  001CE8  0E08               	movlw	8
  7148  001CEA  5C19               	subwf	MrInicializa@Ind,w,c
  7149  001CEC  B0D8               	btfsc	status,0,c
  7150  001CEE  D013               	goto	l4518
  7151                           
  7152                           ; BSR set to: 0
  7153                           
  7154                           ; BSR set to: 0
  7155  001CF0  0ED1               	movlw	low _MrReg
  7156  001CF2  2419               	addwf	MrInicializa@Ind,w,c
  7157  001CF4  6ED9               	movwf	fsr2l,c
  7158  001CF6  0E00               	movlw	high _MrReg
  7159  001CF8  201A               	addwfc	MrInicializa@Ind+1,w,c
  7160  001CFA  6EDA               	movwf	fsr2h,c
  7161  001CFC  0E00               	movlw	0
  7162  001CFE  6EDF               	movwf	indf2,c
  7163  001D00  0E6C               	movlw	low _MrRegAux
  7164  001D02  2419               	addwf	MrInicializa@Ind,w,c
  7165  001D04  6ED9               	movwf	fsr2l,c
  7166  001D06  0E01               	movlw	high _MrRegAux
  7167  001D08  201A               	addwfc	MrInicializa@Ind+1,w,c
  7168  001D0A  6EDA               	movwf	fsr2h,c
  7169  001D0C  0E01               	movlw	1
  7170  001D0E  6EDF               	movwf	indf2,c
  7171  001D10  4A19               	infsnz	MrInicializa@Ind,f,c
  7172  001D12  2A1A               	incf	MrInicializa@Ind+1,f,c
  7173  001D14  D7E7               	goto	l4508
  7174  001D16                     l4518:
  7175                           
  7176                           ;MemoryRoller29.c: 82: MrRegsXGpo = 32 / 8;
  7177  001D16  0E00               	movlw	0
  7178  001D18  0100               	movlb	0	; () banked
  7179  001D1A  6FA5               	movwf	(_MrRegsXGpo+1)& (0+255),b
  7180  001D1C  0E04               	movlw	4
  7181  001D1E  6FA4               	movwf	_MrRegsXGpo& (0+255),b
  7182                           
  7183                           ;MemoryRoller29.c: 83: MrUltV = 0;
  7184  001D20  0E00               	movlw	0
  7185  001D22  6E44               	movwf	_MrUltV+1,c
  7186  001D24  0E00               	movlw	0
  7187  001D26  6E43               	movwf	_MrUltV,c
  7188                           
  7189                           ;MemoryRoller29.c: 84: MrDirV = 0;
  7190  001D28  0E00               	movlw	0
  7191  001D2A  6E42               	movwf	_MrDirV+1,c
  7192  001D2C  0E00               	movlw	0
  7193  001D2E  6E41               	movwf	_MrDirV,c
  7194                           
  7195                           ; BSR set to: 0
  7196  001D30  0012               	return		;funcret
  7197  001D32                     __end_of_MrInicializa:
  7198                           	opt stack 0
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           intcon	equ	0xFF2
  7204                           postinc0	equ	0xFEE
  7205                           wreg	equ	0xFE8
  7206                           postdec1	equ	0xFE5
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function _MrAnt *****************
  7216 ;; Defined at:
  7217 ;;		line 223 in file "MemoryRoller29.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;		None
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;		None
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  1    wreg      void 
  7224 ;; Registers used:
  7225 ;;		wreg, status,2, status,0
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7231 ;;      Params:         0       0       0       0       0       0       0       0       0
  7232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7234 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7235 ;;Total ram usage:        0 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    5
  7238 ;; This function calls:
  7239 ;;		Nothing
  7240 ;; This function is called by:
  7241 ;;		_Ppal_RsComando
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text40
  7246  002674                     __ptext40:
  7247                           	opt stack 0
  7248  002674                     _MrAnt:
  7249                           	opt stack 21
  7250                           
  7251                           ;MemoryRoller29.c: 225: MrDirV --;
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;incstack = 0
  7255  002674  0641               	decf	_MrDirV,f,c
  7256  002676  A0D8               	btfss	status,0,c
  7257  002678  0642               	decf	_MrDirV+1,f,c
  7258                           
  7259                           ;MemoryRoller29.c: 226: if (MrDirV < 0) { MrDirV = 1000-1; }
  7260  00267A  AE42               	btfss	_MrDirV+1,7,c
  7261  00267C  0012               	return	
  7262  00267E  0E03               	movlw	3
  7263  002680  6E42               	movwf	_MrDirV+1,c
  7264  002682  0EE7               	movlw	231
  7265  002684  6E41               	movwf	_MrDirV,c
  7266  002686  0012               	return	
  7267  002688                     __end_of_MrAnt:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           intcon	equ	0xFF2
  7274                           postinc0	equ	0xFEE
  7275                           wreg	equ	0xFE8
  7276                           postdec1	equ	0xFE5
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _MrAgregaReg *****************
  7286 ;; Defined at:
  7287 ;;		line 155 in file "MemoryRoller29.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  MrTemp          2    8[BANK1 ] unsigned int 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0
  7302 ;;      Locals:         0       0       2       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7304 ;;      Totals:         0       0       2       0       0       0       0       0       0
  7305 ;;Total ram usage:        2 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    8
  7308 ;; This function calls:
  7309 ;;		_MrSeparaFecha
  7310 ;;		_RtcLee
  7311 ;;		__MrEsc
  7312 ;;		__MrPreparaFecha
  7313 ;;		__MrPreparaPor
  7314 ;;		__MrSgte
  7315 ;;		_memcpy
  7316 ;; This function is called by:
  7317 ;;		_MioCiclo
  7318 ;;		_Ppal_RsComando
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text41
  7323  000C8E                     __ptext41:
  7324                           	opt stack 0
  7325  000C8E                     _MrAgregaReg:
  7326                           	opt stack 19
  7327                           
  7328                           ;MemoryRoller29.c: 157: unsigned int MrTemp;
  7329                           ;MemoryRoller29.c: 159: RtcLee ();
  7330                           
  7331                           ;incstack = 0
  7332  000C8E  ECB0  F00A         	call	_RtcLee	;wreg free
  7333                           
  7334                           ;MemoryRoller29.c: 160: MrSeparaFecha();
  7335  000C92  ECC8  F008         	call	_MrSeparaFecha	;wreg free
  7336                           
  7337                           ;MemoryRoller29.c: 161: MrUltV = _MrSgte (MrUltV);
  7338  000C96  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7339  000C9A  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7340  000C9E  ECED  F012         	call	__MrSgte	;wreg free
  7341  000CA2  C019  F043         	movff	?__MrSgte,_MrUltV
  7342  000CA6  C01A  F044         	movff	?__MrSgte+1,_MrUltV+1
  7343                           
  7344                           ;MemoryRoller29.c: 162: MrTemp = _MrSgte (MrUltV);
  7345  000CAA  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7346  000CAE  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7347  000CB2  ECED  F012         	call	__MrSgte	;wreg free
  7348  000CB6  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7349  000CBA  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7350                           
  7351                           ;MemoryRoller29.c: 163: if (MrFecha12 != MrFecha12Ult) {
  7352  000CBE  0100               	movlb	0	; () banked
  7353  000CC0  51EF               	movf	_MrFecha12Ult& (0+255),w,b
  7354  000CC2  183D               	xorwf	_MrFecha12,w,c
  7355  000CC4  E10D               	bnz	u3220
  7356  000CC6  0100               	movlb	0	; () banked
  7357  000CC8  51F0               	movf	(_MrFecha12Ult+1)& (0+255),w,b
  7358  000CCA  183E               	xorwf	_MrFecha12+1,w,c
  7359  000CCC  E109               	bnz	u3220
  7360  000CCE  0100               	movlb	0	; () banked
  7361  000CD0  51F1               	movf	(_MrFecha12Ult+2)& (0+255),w,b
  7362  000CD2  183F               	xorwf	_MrFecha12+2,w,c
  7363  000CD4  E105               	bnz	u3220
  7364  000CD6  0100               	movlb	0	; () banked
  7365  000CD8  51F2               	movf	(_MrFecha12Ult+3)& (0+255),w,b
  7366  000CDA  1840               	xorwf	_MrFecha12+3,w,c
  7367  000CDC  B4D8               	btfsc	status,2,c
  7368  000CDE  D032               	goto	l4728
  7369  000CE0                     u3220:
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;MemoryRoller29.c: 164: _MrPreparaPor ();
  7373  000CE0  ECA2  F011         	call	__MrPreparaPor	;wreg free
  7374                           
  7375                           ;MemoryRoller29.c: 165: _MrEsc (MrTemp, MrRegAux);
  7376  000CE4  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7377  000CE8  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7378  000CEC  0E6C               	movlw	low _MrRegAux
  7379  000CEE  0101               	movlb	1	; () banked
  7380  000CF0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7381  000CF2  0E01               	movlw	high _MrRegAux
  7382  000CF4  0101               	movlb	1	; () banked
  7383  000CF6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7384  000CF8  EC63  F012         	call	__MrEsc	;wreg free
  7385                           
  7386                           ;MemoryRoller29.c: 166: _MrPreparaFecha();
  7387  000CFC  EC99  F00E         	call	__MrPreparaFecha	;wreg free
  7388                           
  7389                           ;MemoryRoller29.c: 167: _MrEsc (MrUltV, MrRegAux);
  7390  000D00  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7391  000D04  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7392  000D08  0E6C               	movlw	low _MrRegAux
  7393  000D0A  0101               	movlb	1	; () banked
  7394  000D0C  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7395  000D0E  0E01               	movlw	high _MrRegAux
  7396  000D10  0101               	movlb	1	; () banked
  7397  000D12  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7398  000D14  EC63  F012         	call	__MrEsc	;wreg free
  7399                           
  7400                           ;MemoryRoller29.c: 168: MrUltV = MrTemp;
  7401  000D18  C181  F043         	movff	MrAgregaReg@MrTemp,_MrUltV
  7402  000D1C  C182  F044         	movff	MrAgregaReg@MrTemp+1,_MrUltV+1
  7403                           
  7404                           ;MemoryRoller29.c: 169: MrTemp = _MrSgte (MrUltV);
  7405  000D20  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7406  000D24  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7407  000D28  ECED  F012         	call	__MrSgte	;wreg free
  7408  000D2C  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7409  000D30  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7410                           
  7411                           ;MemoryRoller29.c: 170: MrFecha12Ult = MrFecha12;
  7412  000D34  C03D  F0EF         	movff	_MrFecha12,_MrFecha12Ult
  7413  000D38  C03E  F0F0         	movff	_MrFecha12+1,_MrFecha12Ult+1
  7414  000D3C  C03F  F0F1         	movff	_MrFecha12+2,_MrFecha12Ult+2
  7415  000D40  C040  F0F2         	movff	_MrFecha12+3,_MrFecha12Ult+3
  7416  000D44                     l4728:
  7417                           
  7418                           ;MemoryRoller29.c: 171: }
  7419                           ;MemoryRoller29.c: 172: if (MrUltV == 0) {
  7420  000D44  5043               	movf	_MrUltV,w,c
  7421  000D46  1044               	iorwf	_MrUltV+1,w,c
  7422  000D48  A4D8               	btfss	status,2,c
  7423  000D4A  D02A               	goto	l4740
  7424                           
  7425                           ;MemoryRoller29.c: 173: _MrPreparaPor ();
  7426  000D4C  ECA2  F011         	call	__MrPreparaPor	;wreg free
  7427                           
  7428                           ;MemoryRoller29.c: 174: _MrEsc (MrTemp, MrRegAux);
  7429  000D50  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7430  000D54  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7431  000D58  0E6C               	movlw	low _MrRegAux
  7432  000D5A  0101               	movlb	1	; () banked
  7433  000D5C  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7434  000D5E  0E01               	movlw	high _MrRegAux
  7435  000D60  0101               	movlb	1	; () banked
  7436  000D62  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7437  000D64  EC63  F012         	call	__MrEsc	;wreg free
  7438                           
  7439                           ;MemoryRoller29.c: 175: _MrPreparaFecha();
  7440  000D68  EC99  F00E         	call	__MrPreparaFecha	;wreg free
  7441                           
  7442                           ;MemoryRoller29.c: 176: _MrEsc (MrUltV, MrRegAux);
  7443  000D6C  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7444  000D70  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7445  000D74  0E6C               	movlw	low _MrRegAux
  7446  000D76  0101               	movlb	1	; () banked
  7447  000D78  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7448  000D7A  0E01               	movlw	high _MrRegAux
  7449  000D7C  0101               	movlb	1	; () banked
  7450  000D7E  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7451  000D80  EC63  F012         	call	__MrEsc	;wreg free
  7452                           
  7453                           ;MemoryRoller29.c: 177: MrUltV = MrTemp;
  7454  000D84  C181  F043         	movff	MrAgregaReg@MrTemp,_MrUltV
  7455  000D88  C182  F044         	movff	MrAgregaReg@MrTemp+1,_MrUltV+1
  7456                           
  7457                           ;MemoryRoller29.c: 178: MrTemp = _MrSgte (MrUltV);
  7458  000D8C  C043  F019         	movff	_MrUltV,__MrSgte@MrDirX
  7459  000D90  C044  F01A         	movff	_MrUltV+1,__MrSgte@MrDirX+1
  7460  000D94  ECED  F012         	call	__MrSgte	;wreg free
  7461  000D98  C019  F181         	movff	?__MrSgte,MrAgregaReg@MrTemp
  7462  000D9C  C01A  F182         	movff	?__MrSgte+1,MrAgregaReg@MrTemp+1
  7463  000DA0                     l4740:
  7464                           
  7465                           ;MemoryRoller29.c: 179: }
  7466                           ;MemoryRoller29.c: 180: _MrPreparaPor ();
  7467  000DA0  ECA2  F011         	call	__MrPreparaPor	;wreg free
  7468                           
  7469                           ;MemoryRoller29.c: 181: _MrEsc (MrTemp, MrRegAux);
  7470  000DA4  C181  F17D         	movff	MrAgregaReg@MrTemp,__MrEsc@MrNReg
  7471  000DA8  C182  F17E         	movff	MrAgregaReg@MrTemp+1,__MrEsc@MrNReg+1
  7472  000DAC  0E6C               	movlw	low _MrRegAux
  7473  000DAE  0101               	movlb	1	; () banked
  7474  000DB0  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7475  000DB2  0E01               	movlw	high _MrRegAux
  7476  000DB4  0101               	movlb	1	; () banked
  7477  000DB6  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7478  000DB8  EC63  F012         	call	__MrEsc	;wreg free
  7479                           
  7480                           ;MemoryRoller29.c: 182: memcpy(&MrReg[0], &MrHora12, 2);
  7481  000DBC  0ED1               	movlw	low _MrReg
  7482  000DBE  6E19               	movwf	memcpy@d1,c
  7483  000DC0  0E00               	movlw	high _MrReg
  7484  000DC2  6E1A               	movwf	memcpy@d1+1,c
  7485  000DC4  0EF3               	movlw	low _MrHora12
  7486  000DC6  6E1B               	movwf	memcpy@s1,c
  7487  000DC8  0E00               	movlw	high _MrHora12
  7488  000DCA  6E1C               	movwf	memcpy@s1+1,c
  7489  000DCC  0E00               	movlw	0
  7490  000DCE  6E1E               	movwf	memcpy@n+1,c
  7491  000DD0  0E02               	movlw	2
  7492  000DD2  6E1D               	movwf	memcpy@n,c
  7493  000DD4  ECEB  F010         	call	_memcpy	;wreg free
  7494                           
  7495                           ;MemoryRoller29.c: 183: _MrEsc (MrUltV, MrReg);
  7496  000DD8  C043  F17D         	movff	_MrUltV,__MrEsc@MrNReg
  7497  000DDC  C044  F17E         	movff	_MrUltV+1,__MrEsc@MrNReg+1
  7498  000DE0  0ED1               	movlw	low _MrReg
  7499  000DE2  0101               	movlb	1	; () banked
  7500  000DE4  6F7F               	movwf	__MrEsc@MrReg1& (0+255),b
  7501  000DE6  0E00               	movlw	high _MrReg
  7502  000DE8  0101               	movlb	1	; () banked
  7503  000DEA  6F80               	movwf	(__MrEsc@MrReg1+1)& (0+255),b
  7504  000DEC  EC63  F012         	call	__MrEsc	;wreg free
  7505  000DF0  0012               	return		;funcret
  7506  000DF2                     __end_of_MrAgregaReg:
  7507                           	opt stack 0
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           intcon	equ	0xFF2
  7513                           postinc0	equ	0xFEE
  7514                           wreg	equ	0xFE8
  7515                           postdec1	equ	0xFE5
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function __MrSgte *****************
  7525 ;; Defined at:
  7526 ;;		line 216 in file "MemoryRoller29.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  MrDirX          2   24[COMRAM] unsigned int 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  2   24[COMRAM] unsigned int 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7540 ;;      Params:         2       0       0       0       0       0       0       0       0
  7541 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7543 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7544 ;;Total ram usage:        2 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    5
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_MrAgregaReg
  7551 ;;		_MrSgte
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text42
  7556  0025DA                     __ptext42:
  7557                           	opt stack 0
  7558  0025DA                     __MrSgte:
  7559                           	opt stack 21
  7560                           
  7561                           ;MemoryRoller29.c: 218: MrDirX ++;
  7562                           
  7563                           ;incstack = 0
  7564  0025DA  4A19               	infsnz	__MrSgte@MrDirX,f,c
  7565  0025DC  2A1A               	incf	__MrSgte@MrDirX+1,f,c
  7566                           
  7567                           ;MemoryRoller29.c: 219: if (MrDirX >= 1000) { return (0); }
  7568  0025DE  0EE8               	movlw	232
  7569  0025E0  5C19               	subwf	__MrSgte@MrDirX,w,c
  7570  0025E2  0E03               	movlw	3
  7571  0025E4  581A               	subwfb	__MrSgte@MrDirX+1,w,c
  7572  0025E6  A0D8               	btfss	status,0,c
  7573  0025E8  D005               	goto	l453
  7574  0025EA  0E00               	movlw	0
  7575  0025EC  6E1A               	movwf	?__MrSgte+1,c
  7576  0025EE  0E00               	movlw	0
  7577  0025F0  6E19               	movwf	?__MrSgte,c
  7578  0025F2  0012               	return	
  7579  0025F4                     l453:
  7580                           
  7581                           ;MemoryRoller29.c: 220: return (MrDirX);
  7582  0025F4  C019  F019         	movff	__MrSgte@MrDirX,?__MrSgte
  7583  0025F8  C01A  F01A         	movff	__MrSgte@MrDirX+1,?__MrSgte+1
  7584  0025FC  0012               	return		;funcret
  7585  0025FE                     __end_of__MrSgte:
  7586                           	opt stack 0
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           intcon	equ	0xFF2
  7592                           postinc0	equ	0xFEE
  7593                           wreg	equ	0xFE8
  7594                           postdec1	equ	0xFE5
  7595                           fsr1l	equ	0xFE1
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           postdec2	equ	0xFDD
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function __MrPreparaPor *****************
  7604 ;; Defined at:
  7605 ;;		line 186 in file "MemoryRoller29.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  Ind             2   24[COMRAM] unsigned short 
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0
  7620 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7622 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7623 ;;Total ram usage:        2 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    5
  7626 ;; This function calls:
  7627 ;;		Nothing
  7628 ;; This function is called by:
  7629 ;;		_MrFormat
  7630 ;;		_MrInit
  7631 ;;		_MrAgregaReg
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text43
  7636  002344                     __ptext43:
  7637                           	opt stack 0
  7638  002344                     __MrPreparaPor:
  7639                           	opt stack 22
  7640                           
  7641                           ;MemoryRoller29.c: 187: unsigned short Ind;
  7642                           ;MemoryRoller29.c: 188: for (Ind = 1; Ind < 8; Ind++) { MrRegAux[Ind]=0xF0; }
  7643                           
  7644                           ;incstack = 0
  7645  002344  0E00               	movlw	0
  7646  002346  6E1A               	movwf	__MrPreparaPor@Ind+1,c
  7647  002348  0E01               	movlw	1
  7648  00234A  6E19               	movwf	__MrPreparaPor@Ind,c
  7649  00234C  501A               	movf	__MrPreparaPor@Ind+1,w,c
  7650  00234E  E111               	bnz	l435
  7651  002350  0E08               	movlw	8
  7652  002352  5C19               	subwf	__MrPreparaPor@Ind,w,c
  7653  002354  B0D8               	btfsc	status,0,c
  7654  002356  D00D               	goto	l435
  7655  002358  0E6C               	movlw	low _MrRegAux
  7656  00235A  2419               	addwf	__MrPreparaPor@Ind,w,c
  7657  00235C  6ED9               	movwf	fsr2l,c
  7658  00235E  0E01               	movlw	high _MrRegAux
  7659  002360  201A               	addwfc	__MrPreparaPor@Ind+1,w,c
  7660  002362  6EDA               	movwf	fsr2h,c
  7661  002364  0EF0               	movlw	240
  7662  002366  6EDF               	movwf	indf2,c
  7663  002368  4A19               	infsnz	__MrPreparaPor@Ind,f,c
  7664  00236A  2A1A               	incf	__MrPreparaPor@Ind+1,f,c
  7665  00236C  501A               	movf	__MrPreparaPor@Ind+1,w,c
  7666  00236E  E101               	bnz	u3020
  7667  002370  D7EF               	goto	L2
  7668  002372                     u3020:
  7669  002372                     l435:
  7670                           
  7671                           ;MemoryRoller29.c: 189: MrRegAux [0] = 255;
  7672  002372  0101               	movlb	1	; () banked
  7673  002374  696C               	setf	_MrRegAux& (0+255),b
  7674                           
  7675                           ; BSR set to: 1
  7676  002376  0012               	return		;funcret
  7677  002378                     __end_of__MrPreparaPor:
  7678                           	opt stack 0
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           intcon	equ	0xFF2
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           postdec1	equ	0xFE5
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function __MrPreparaFecha *****************
  7696 ;; Defined at:
  7697 ;;		line 192 in file "MemoryRoller29.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;		None
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  Ind             2   34[COMRAM] unsigned short 
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7711 ;;      Params:         0       0       0       0       0       0       0       0       0
  7712 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7714 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7715 ;;Total ram usage:        2 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    6
  7718 ;; This function calls:
  7719 ;;		_memcpy
  7720 ;; This function is called by:
  7721 ;;		_MrFormat
  7722 ;;		_MrAgregaReg
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text44
  7727  001D32                     __ptext44:
  7728                           	opt stack 0
  7729  001D32                     __MrPreparaFecha:
  7730                           	opt stack 20
  7731                           
  7732                           ;MemoryRoller29.c: 193: unsigned short Ind;
  7733                           ;MemoryRoller29.c: 194: for (Ind = 1; Ind < 8; Ind++) { MrRegAux[Ind]=0xF1; }
  7734                           
  7735                           ; BSR set to: 1
  7736                           ;incstack = 0
  7737  001D32  0E00               	movlw	0
  7738  001D34  6E24               	movwf	__MrPreparaFecha@Ind+1,c
  7739  001D36  0E01               	movlw	1
  7740  001D38  6E23               	movwf	__MrPreparaFecha@Ind,c
  7741  001D3A                     l4548:
  7742  001D3A  5024               	movf	__MrPreparaFecha@Ind+1,w,c
  7743  001D3C  E10F               	bnz	l4558
  7744  001D3E  0E08               	movlw	8
  7745  001D40  5C23               	subwf	__MrPreparaFecha@Ind,w,c
  7746  001D42  B0D8               	btfsc	status,0,c
  7747  001D44  D00B               	goto	l4558
  7748  001D46  0E6C               	movlw	low _MrRegAux
  7749  001D48  2423               	addwf	__MrPreparaFecha@Ind,w,c
  7750  001D4A  6ED9               	movwf	fsr2l,c
  7751  001D4C  0E01               	movlw	high _MrRegAux
  7752  001D4E  2024               	addwfc	__MrPreparaFecha@Ind+1,w,c
  7753  001D50  6EDA               	movwf	fsr2h,c
  7754  001D52  0EF1               	movlw	241
  7755  001D54  6EDF               	movwf	indf2,c
  7756  001D56  4A23               	infsnz	__MrPreparaFecha@Ind,f,c
  7757  001D58  2A24               	incf	__MrPreparaFecha@Ind+1,f,c
  7758  001D5A  D7EF               	goto	l4548
  7759  001D5C                     l4558:
  7760                           
  7761                           ;MemoryRoller29.c: 195: MrRegAux [0] = 254;
  7762  001D5C  0EFE               	movlw	254
  7763  001D5E  0101               	movlb	1	; () banked
  7764  001D60  6F6C               	movwf	_MrRegAux& (0+255),b
  7765                           
  7766                           ; BSR set to: 1
  7767                           ;MemoryRoller29.c: 196: memcpy (&MrRegAux[1], &MrFecha12, 3);
  7768  001D62  0E6D               	movlw	low (_MrRegAux+1)
  7769  001D64  6E19               	movwf	memcpy@d1,c
  7770  001D66  0E01               	movlw	high (_MrRegAux+1)
  7771  001D68  6E1A               	movwf	memcpy@d1+1,c
  7772  001D6A  0E3D               	movlw	low _MrFecha12
  7773  001D6C  6E1B               	movwf	memcpy@s1,c
  7774  001D6E  0E00               	movlw	high _MrFecha12
  7775  001D70  6E1C               	movwf	memcpy@s1+1,c
  7776  001D72  0E00               	movlw	0
  7777  001D74  6E1E               	movwf	memcpy@n+1,c
  7778  001D76  0E03               	movlw	3
  7779  001D78  6E1D               	movwf	memcpy@n,c
  7780  001D7A  ECEB  F010         	call	_memcpy	;wreg free
  7781                           
  7782                           ;MemoryRoller29.c: 197: memcpy (&MrRegAux[4], &MrFecha12Ult, 3);
  7783  001D7E  0E70               	movlw	low (_MrRegAux+4)
  7784  001D80  6E19               	movwf	memcpy@d1,c
  7785  001D82  0E01               	movlw	high (_MrRegAux+4)
  7786  001D84  6E1A               	movwf	memcpy@d1+1,c
  7787  001D86  0EEF               	movlw	low _MrFecha12Ult
  7788  001D88  6E1B               	movwf	memcpy@s1,c
  7789  001D8A  0E00               	movlw	high _MrFecha12Ult
  7790  001D8C  6E1C               	movwf	memcpy@s1+1,c
  7791  001D8E  0E00               	movlw	0
  7792  001D90  6E1E               	movwf	memcpy@n+1,c
  7793  001D92  0E03               	movlw	3
  7794  001D94  6E1D               	movwf	memcpy@n,c
  7795  001D96  ECEB  F010         	call	_memcpy	;wreg free
  7796  001D9A  0012               	return		;funcret
  7797  001D9C                     __end_of__MrPreparaFecha:
  7798                           	opt stack 0
  7799                           tblptru	equ	0xFF8
  7800                           tblptrh	equ	0xFF7
  7801                           tblptrl	equ	0xFF6
  7802                           tablat	equ	0xFF5
  7803                           intcon	equ	0xFF2
  7804                           postinc0	equ	0xFEE
  7805                           wreg	equ	0xFE8
  7806                           postdec1	equ	0xFE5
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function __MrEsc *****************
  7816 ;; Defined at:
  7817 ;;		line 307 in file "MemoryRoller29.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  MrNReg          2    4[BANK1 ] unsigned int 
  7820 ;;  MrReg1          2    6[BANK1 ] PTR unsigned char 
  7821 ;;		 -> MrRegAux(13), MrReg(13), 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      void 
  7826 ;; Registers used:
  7827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7833 ;;      Params:         0       0       4       0       0       0       0       0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7836 ;;      Totals:         0       0       4       0       0       0       0       0       0
  7837 ;;Total ram usage:        4 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    7
  7840 ;; This function calls:
  7841 ;;		_MseEsc
  7842 ;;		__CalculaRegPos
  7843 ;; This function is called by:
  7844 ;;		_MrFormat
  7845 ;;		_MrInit
  7846 ;;		_MrAgregaReg
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text45
  7851  0024C6                     __ptext45:
  7852                           	opt stack 0
  7853  0024C6                     __MrEsc:
  7854                           	opt stack 20
  7855                           
  7856                           ;MemoryRoller29.c: 310: _CalculaRegPos (MrNReg);
  7857                           
  7858                           ;incstack = 0
  7859  0024C6  C17D  F020         	movff	__MrEsc@MrNReg,__CalculaRegPos@MrNReg1
  7860  0024CA  C17E  F021         	movff	__MrEsc@MrNReg+1,__CalculaRegPos@MrNReg1+1
  7861  0024CE  EC7A  F00D         	call	__CalculaRegPos	;wreg free
  7862                           
  7863                           ;MemoryRoller29.c: 311: MseEsc (MrRegPos, MrReg1, 8);
  7864  0024D2  C07E  F029         	movff	_MrRegPos,MseEsc@Dir
  7865  0024D6  C07F  F02A         	movff	_MrRegPos+1,MseEsc@Dir+1
  7866  0024DA  C17F  F02B         	movff	__MrEsc@MrReg1,MseEsc@Datos
  7867  0024DE  C180  F02C         	movff	__MrEsc@MrReg1+1,MseEsc@Datos+1
  7868  0024E2  0E00               	movlw	0
  7869  0024E4  6E2E               	movwf	MseEsc@NBytes+1,c
  7870  0024E6  0E08               	movlw	8
  7871  0024E8  6E2D               	movwf	MseEsc@NBytes,c
  7872  0024EA  EC39  F008         	call	_MseEsc	;wreg free
  7873  0024EE  0012               	return		;funcret
  7874  0024F0                     __end_of__MrEsc:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           intcon	equ	0xFF2
  7881                           postinc0	equ	0xFEE
  7882                           wreg	equ	0xFE8
  7883                           postdec1	equ	0xFE5
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function __CalculaRegPos *****************
  7893 ;; Defined at:
  7894 ;;		line 231 in file "MemoryRoller29.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  MrNReg1         2   31[COMRAM] unsigned int 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;		None
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  1    wreg      void 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7908 ;;      Params:         2       0       0       0       0       0       0       0       0
  7909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7910 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7911 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7912 ;;Total ram usage:        6 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    6
  7915 ;; This function calls:
  7916 ;;		___lwdiv
  7917 ;;		___lwmod
  7918 ;; This function is called by:
  7919 ;;		__MrLee
  7920 ;;		__MrEsc
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text46
  7925  001AF4                     __ptext46:
  7926                           	opt stack 0
  7927  001AF4                     __CalculaRegPos:
  7928                           	opt stack 20
  7929                           
  7930                           ;MemoryRoller29.c: 232: MrGpo = MrNReg1 / MrRegsXGpo;
  7931                           
  7932                           ;incstack = 0
  7933  001AF4  C020  F019         	movff	__CalculaRegPos@MrNReg1,___lwdiv@dividend
  7934  001AF8  C021  F01A         	movff	__CalculaRegPos@MrNReg1+1,___lwdiv@dividend+1
  7935  001AFC  C0A4  F01B         	movff	_MrRegsXGpo,___lwdiv@divisor
  7936  001B00  C0A5  F01C         	movff	_MrRegsXGpo+1,___lwdiv@divisor+1
  7937  001B04  EC0C  F010         	call	___lwdiv	;wreg free
  7938  001B08  C019  F0A2         	movff	?___lwdiv,_MrGpo
  7939  001B0C  C01A  F0A3         	movff	?___lwdiv+1,_MrGpo+1
  7940                           
  7941                           ;MemoryRoller29.c: 233: MrNRegEnGpo = MrNReg1 % MrRegsXGpo;
  7942  001B10  C020  F019         	movff	__CalculaRegPos@MrNReg1,___lwmod@dividend
  7943  001B14  C021  F01A         	movff	__CalculaRegPos@MrNReg1+1,___lwmod@dividend+1
  7944  001B18  C0A4  F01B         	movff	_MrRegsXGpo,___lwmod@divisor
  7945  001B1C  C0A5  F01C         	movff	_MrRegsXGpo+1,___lwmod@divisor+1
  7946  001B20  ECCA  F010         	call	___lwmod	;wreg free
  7947  001B24  C019  F0A0         	movff	?___lwmod,_MrNRegEnGpo
  7948  001B28  C01A  F0A1         	movff	?___lwmod+1,_MrNRegEnGpo+1
  7949                           
  7950                           ;MemoryRoller29.c: 234: MrRegPos = (MrGpo * 32) + (MrNRegEnGpo * 8);
  7951  001B2C  C0A0  F022         	movff	_MrNRegEnGpo,??__CalculaRegPos
  7952  001B30  C0A1  F023         	movff	_MrNRegEnGpo+1,??__CalculaRegPos+1
  7953  001B34  90D8               	bcf	status,0,c
  7954  001B36  3622               	rlcf	??__CalculaRegPos,f,c
  7955  001B38  3623               	rlcf	??__CalculaRegPos+1,f,c
  7956  001B3A  90D8               	bcf	status,0,c
  7957  001B3C  3622               	rlcf	??__CalculaRegPos,f,c
  7958  001B3E  3623               	rlcf	??__CalculaRegPos+1,f,c
  7959  001B40  90D8               	bcf	status,0,c
  7960  001B42  3622               	rlcf	??__CalculaRegPos,f,c
  7961  001B44  3623               	rlcf	??__CalculaRegPos+1,f,c
  7962  001B46  C0A2  F024         	movff	_MrGpo,??__CalculaRegPos+2
  7963  001B4A  C0A3  F025         	movff	_MrGpo+1,??__CalculaRegPos+3
  7964  001B4E  0E05               	movlw	5
  7965  001B50                     u2795:
  7966  001B50  90D8               	bcf	status,0,c
  7967  001B52  3624               	rlcf	??__CalculaRegPos+2,f,c
  7968  001B54  3625               	rlcf	??__CalculaRegPos+3,f,c
  7969  001B56  2EE8               	decfsz	wreg,f,c
  7970  001B58  D7FB               	goto	u2795
  7971  001B5A  5022               	movf	??__CalculaRegPos,w,c
  7972  001B5C  2624               	addwf	??__CalculaRegPos+2,f,c
  7973  001B5E  5023               	movf	??__CalculaRegPos+1,w,c
  7974  001B60  2225               	addwfc	??__CalculaRegPos+3,f,c
  7975  001B62  C024  F07E         	movff	??__CalculaRegPos+2,_MrRegPos
  7976  001B66  C025  F07F         	movff	??__CalculaRegPos+3,_MrRegPos+1
  7977  001B6A  0100               	movlb	0	; () banked
  7978  001B6C  6B80               	clrf	(_MrRegPos+2)& (0+255),b
  7979  001B6E  6B81               	clrf	(_MrRegPos+3)& (0+255),b
  7980                           
  7981                           ; BSR set to: 0
  7982  001B70  0012               	return		;funcret
  7983  001B72                     __end_of__CalculaRegPos:
  7984                           	opt stack 0
  7985                           tblptru	equ	0xFF8
  7986                           tblptrh	equ	0xFF7
  7987                           tblptrl	equ	0xFF6
  7988                           tablat	equ	0xFF5
  7989                           intcon	equ	0xFF2
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           postdec1	equ	0xFE5
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function ___lwmod *****************
  8002 ;; Defined at:
  8003 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  dividend        2   24[COMRAM] unsigned int 
  8006 ;;  divisor         2   26[COMRAM] unsigned int 
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  counter         1   28[COMRAM] unsigned char 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  2   24[COMRAM] unsigned int 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8018 ;;      Params:         4       0       0       0       0       0       0       0       0
  8019 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8021 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8022 ;;Total ram usage:        5 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    5
  8025 ;; This function calls:
  8026 ;;		Nothing
  8027 ;; This function is called by:
  8028 ;;		__CalculaRegPos
  8029 ;; This function uses a non-reentrant model
  8030 ;;
  8031                           
  8032                           	psect	text47
  8033  002194                     __ptext47:
  8034                           	opt stack 0
  8035  002194                     ___lwmod:
  8036                           	opt stack 20
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;incstack = 0
  8040  002194  501B               	movf	___lwmod@divisor,w,c
  8041  002196  101C               	iorwf	___lwmod@divisor+1,w,c
  8042  002198  B4D8               	btfsc	status,2,c
  8043  00219A  D018               	goto	l1033
  8044  00219C  0E01               	movlw	1
  8045  00219E  6E1D               	movwf	___lwmod@counter,c
  8046  0021A0  D004               	goto	l4258
  8047  0021A2                     l4256:
  8048  0021A2  90D8               	bcf	status,0,c
  8049  0021A4  361B               	rlcf	___lwmod@divisor,f,c
  8050  0021A6  361C               	rlcf	___lwmod@divisor+1,f,c
  8051  0021A8  2A1D               	incf	___lwmod@counter,f,c
  8052  0021AA                     l4258:
  8053  0021AA  AE1C               	btfss	___lwmod@divisor+1,7,c
  8054  0021AC  D7FA               	goto	l4256
  8055  0021AE                     l4260:
  8056  0021AE  501B               	movf	___lwmod@divisor,w,c
  8057  0021B0  5C19               	subwf	___lwmod@dividend,w,c
  8058  0021B2  501C               	movf	___lwmod@divisor+1,w,c
  8059  0021B4  581A               	subwfb	___lwmod@dividend+1,w,c
  8060  0021B6  A0D8               	btfss	status,0,c
  8061  0021B8  D004               	goto	l4264
  8062  0021BA  501B               	movf	___lwmod@divisor,w,c
  8063  0021BC  5E19               	subwf	___lwmod@dividend,f,c
  8064  0021BE  501C               	movf	___lwmod@divisor+1,w,c
  8065  0021C0  5A1A               	subwfb	___lwmod@dividend+1,f,c
  8066  0021C2                     l4264:
  8067  0021C2  90D8               	bcf	status,0,c
  8068  0021C4  321C               	rrcf	___lwmod@divisor+1,f,c
  8069  0021C6  321B               	rrcf	___lwmod@divisor,f,c
  8070  0021C8  2E1D               	decfsz	___lwmod@counter,f,c
  8071  0021CA  D7F1               	goto	l4260
  8072  0021CC                     l1033:
  8073  0021CC  C019  F019         	movff	___lwmod@dividend,?___lwmod
  8074  0021D0  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  8075  0021D4  0012               	return		;funcret
  8076  0021D6                     __end_of___lwmod:
  8077                           	opt stack 0
  8078                           tblptru	equ	0xFF8
  8079                           tblptrh	equ	0xFF7
  8080                           tblptrl	equ	0xFF6
  8081                           tablat	equ	0xFF5
  8082                           intcon	equ	0xFF2
  8083                           postinc0	equ	0xFEE
  8084                           wreg	equ	0xFE8
  8085                           postdec1	equ	0xFE5
  8086                           fsr1l	equ	0xFE1
  8087                           indf2	equ	0xFDF
  8088                           postinc2	equ	0xFDE
  8089                           postdec2	equ	0xFDD
  8090                           fsr2h	equ	0xFDA
  8091                           fsr2l	equ	0xFD9
  8092                           status	equ	0xFD8
  8093                           
  8094 ;; *************** function ___lwdiv *****************
  8095 ;; Defined at:
  8096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  dividend        2   24[COMRAM] unsigned int 
  8099 ;;  divisor         2   26[COMRAM] unsigned int 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  quotient        2   29[COMRAM] unsigned int 
  8102 ;;  counter         1   28[COMRAM] unsigned char 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  2   24[COMRAM] unsigned int 
  8105 ;; Registers used:
  8106 ;;		wreg, status,2, status,0
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8112 ;;      Params:         4       0       0       0       0       0       0       0       0
  8113 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8115 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8116 ;;Total ram usage:        7 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    5
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		__CalculaRegPos
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text48
  8127  002018                     __ptext48:
  8128                           	opt stack 0
  8129  002018                     ___lwdiv:
  8130                           	opt stack 20
  8131                           
  8132                           ;incstack = 0
  8133  002018  0E00               	movlw	0
  8134  00201A  6E1F               	movwf	___lwdiv@quotient+1,c
  8135  00201C  0E00               	movlw	0
  8136  00201E  6E1E               	movwf	___lwdiv@quotient,c
  8137  002020  501B               	movf	___lwdiv@divisor,w,c
  8138  002022  101C               	iorwf	___lwdiv@divisor+1,w,c
  8139  002024  B4D8               	btfsc	status,2,c
  8140  002026  D01C               	goto	l1023
  8141  002028  0E01               	movlw	1
  8142  00202A  6E1D               	movwf	___lwdiv@counter,c
  8143  00202C  D004               	goto	l4238
  8144  00202E                     l4236:
  8145  00202E  90D8               	bcf	status,0,c
  8146  002030  361B               	rlcf	___lwdiv@divisor,f,c
  8147  002032  361C               	rlcf	___lwdiv@divisor+1,f,c
  8148  002034  2A1D               	incf	___lwdiv@counter,f,c
  8149  002036                     l4238:
  8150  002036  AE1C               	btfss	___lwdiv@divisor+1,7,c
  8151  002038  D7FA               	goto	l4236
  8152  00203A                     l4240:
  8153  00203A  90D8               	bcf	status,0,c
  8154  00203C  361E               	rlcf	___lwdiv@quotient,f,c
  8155  00203E  361F               	rlcf	___lwdiv@quotient+1,f,c
  8156  002040  501B               	movf	___lwdiv@divisor,w,c
  8157  002042  5C19               	subwf	___lwdiv@dividend,w,c
  8158  002044  501C               	movf	___lwdiv@divisor+1,w,c
  8159  002046  581A               	subwfb	___lwdiv@dividend+1,w,c
  8160  002048  A0D8               	btfss	status,0,c
  8161  00204A  D005               	goto	l4248
  8162  00204C  501B               	movf	___lwdiv@divisor,w,c
  8163  00204E  5E19               	subwf	___lwdiv@dividend,f,c
  8164  002050  501C               	movf	___lwdiv@divisor+1,w,c
  8165  002052  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  8166  002054  801E               	bsf	___lwdiv@quotient,0,c
  8167  002056                     l4248:
  8168  002056  90D8               	bcf	status,0,c
  8169  002058  321C               	rrcf	___lwdiv@divisor+1,f,c
  8170  00205A  321B               	rrcf	___lwdiv@divisor,f,c
  8171  00205C  2E1D               	decfsz	___lwdiv@counter,f,c
  8172  00205E  D7ED               	goto	l4240
  8173  002060                     l1023:
  8174  002060  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  8175  002064  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8176  002068  0012               	return		;funcret
  8177  00206A                     __end_of___lwdiv:
  8178                           	opt stack 0
  8179                           tblptru	equ	0xFF8
  8180                           tblptrh	equ	0xFF7
  8181                           tblptrl	equ	0xFF6
  8182                           tablat	equ	0xFF5
  8183                           intcon	equ	0xFF2
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           postdec1	equ	0xFE5
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           postdec2	equ	0xFDD
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _MseEsc *****************
  8196 ;; Defined at:
  8197 ;;		line 28 in file "Mse21.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  Dir             2   40[COMRAM] unsigned int 
  8200 ;;  Datos           2   42[COMRAM] PTR unsigned char 
  8201 ;;		 -> MrRegAux(13), MrReg(13), RsRxBuffer(30), 
  8202 ;;  NBytes          2   44[COMRAM] int 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  Index           4    0[BANK1 ] long 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8214 ;;      Params:         6       0       0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0       4       0       0       0       0       0       0
  8216 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8217 ;;      Totals:         6       5       4       0       0       0       0       0       0
  8218 ;;Total ram usage:       15 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    6
  8221 ;; This function calls:
  8222 ;;		_I2CEscByte
  8223 ;;		_I2CStart
  8224 ;;		_I2CStop
  8225 ;; This function is called by:
  8226 ;;		__MrEsc
  8227 ;;		_Ppal_RsComando
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text49
  8232  001072                     __ptext49:
  8233                           	opt stack 0
  8234  001072                     _MseEsc:
  8235                           	opt stack 20
  8236                           
  8237                           ;Mse21.c: 30: long Index;
  8238                           ;Mse21.c: 34: I2CAck = 0;
  8239                           
  8240                           ;incstack = 0
  8241  001072  0E00               	movlw	0
  8242  001074  0100               	movlb	0	; () banked
  8243  001076  6FA9               	movwf	(_I2CAck+1)& (0+255),b
  8244  001078  0E00               	movlw	0
  8245  00107A  6FA8               	movwf	_I2CAck& (0+255),b
  8246                           
  8247                           ;Mse21.c: 35: for (Index = 0; (Index<100000) & (!I2CAck); Index++) {
  8248  00107C  0E00               	movlw	0
  8249  00107E  0101               	movlb	1	; () banked
  8250  001080  6F79               	movwf	MseEsc@Index& (0+255),b
  8251  001082  0E00               	movlw	0
  8252  001084  6F7A               	movwf	(MseEsc@Index+1)& (0+255),b
  8253  001086  0E00               	movlw	0
  8254  001088  6F7B               	movwf	(MseEsc@Index+2)& (0+255),b
  8255  00108A  0E00               	movlw	0
  8256  00108C  6F7C               	movwf	(MseEsc@Index+3)& (0+255),b
  8257  00108E  D00F               	goto	l4326
  8258  001090                     l4320:
  8259                           
  8260                           ;Mse21.c: 36: I2CStart();
  8261  001090  ECEF  F011         	call	_I2CStart	;wreg free
  8262                           
  8263                           ;Mse21.c: 37: I2CEscByte(0xA0);
  8264  001094  0E00               	movlw	0
  8265  001096  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8266  001098  0EA0               	movlw	160
  8267  00109A  6E25               	movwf	I2CEscByte@I2CByte,c
  8268  00109C  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8269  0010A0  0E01               	movlw	1
  8270  0010A2  0101               	movlb	1	; () banked
  8271  0010A4  2779               	addwf	MseEsc@Index& (0+255),f,b
  8272  0010A6  0E00               	movlw	0
  8273  0010A8  237A               	addwfc	(MseEsc@Index+1)& (0+255),f,b
  8274  0010AA  237B               	addwfc	(MseEsc@Index+2)& (0+255),f,b
  8275  0010AC  237C               	addwfc	(MseEsc@Index+3)& (0+255),f,b
  8276  0010AE                     l4326:
  8277                           
  8278                           ; BSR set to: 1
  8279  0010AE  0101               	movlb	1	; () banked
  8280  0010B0  BF7C               	btfsc	(MseEsc@Index+3)& (0+255),7,b
  8281  0010B2  D00E               	goto	l4328
  8282  0010B4  0101               	movlb	1	; () banked
  8283  0010B6  517C               	movf	(MseEsc@Index+3)& (0+255),w,b
  8284  0010B8  E111               	bnz	l4330
  8285  0010BA  0EA0               	movlw	160
  8286  0010BC  0101               	movlb	1	; () banked
  8287  0010BE  5D79               	subwf	MseEsc@Index& (0+255),w,b
  8288  0010C0  0E86               	movlw	134
  8289  0010C2  0101               	movlb	1	; () banked
  8290  0010C4  597A               	subwfb	(MseEsc@Index+1)& (0+255),w,b
  8291  0010C6  0E01               	movlw	1
  8292  0010C8  0101               	movlb	1	; () banked
  8293  0010CA  597B               	subwfb	(MseEsc@Index+2)& (0+255),w,b
  8294  0010CC  B0D8               	btfsc	status,0,c
  8295  0010CE  D006               	goto	l4330
  8296  0010D0                     l4328:
  8297                           
  8298                           ; BSR set to: 1
  8299  0010D0  0100               	movlb	0	; () banked
  8300  0010D2  51A8               	movf	_I2CAck& (0+255),w,b
  8301  0010D4  0100               	movlb	0	; () banked
  8302  0010D6  11A9               	iorwf	(_I2CAck+1)& (0+255),w,b
  8303  0010D8  B4D8               	btfsc	status,2,c
  8304  0010DA  D7DA               	goto	l4320
  8305  0010DC                     l4330:
  8306                           
  8307                           ;Mse21.c: 38: }
  8308                           ;Mse21.c: 39: I2CEscByte((Dir>>8)&0xFF);
  8309  0010DC  C029  F0F5         	movff	MseEsc@Dir,??_MseEsc
  8310  0010E0  C02A  F0F6         	movff	MseEsc@Dir+1,??_MseEsc+1
  8311  0010E4  C0F6  F0F5         	movff	??_MseEsc+1,??_MseEsc
  8312  0010E8  0100               	movlb	0	; () banked
  8313  0010EA  6BF6               	clrf	(??_MseEsc+1)& (0+255),b
  8314  0010EC  0100               	movlb	0	; () banked
  8315  0010EE  51F5               	movf	??_MseEsc& (0+255),w,b
  8316  0010F0  6E25               	movwf	I2CEscByte@I2CByte,c
  8317  0010F2  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8318  0010F4  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8319                           
  8320                           ;Mse21.c: 40: I2CEscByte(Dir & 0xFF);
  8321  0010F8  5029               	movf	MseEsc@Dir,w,c
  8322  0010FA  6E25               	movwf	I2CEscByte@I2CByte,c
  8323  0010FC  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8324  0010FE  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8325                           
  8326                           ;Mse21.c: 41: for (Index = 0; Index < NBytes; Index++) {
  8327  001102  0E00               	movlw	0
  8328  001104  0101               	movlb	1	; () banked
  8329  001106  6F79               	movwf	MseEsc@Index& (0+255),b
  8330  001108  0E00               	movlw	0
  8331  00110A  6F7A               	movwf	(MseEsc@Index+1)& (0+255),b
  8332  00110C  0E00               	movlw	0
  8333  00110E  6F7B               	movwf	(MseEsc@Index+2)& (0+255),b
  8334  001110  0E00               	movlw	0
  8335  001112  6F7C               	movwf	(MseEsc@Index+3)& (0+255),b
  8336  001114  D018               	goto	l4338
  8337  001116                     l4334:
  8338                           
  8339                           ;Mse21.c: 42: I2CEscByte(Datos[Index]);
  8340  001116  0101               	movlb	1	; () banked
  8341  001118  5179               	movf	MseEsc@Index& (0+255),w,b
  8342  00111A  242B               	addwf	MseEsc@Datos,w,c
  8343  00111C  6ED9               	movwf	fsr2l,c
  8344  00111E  0101               	movlb	1	; () banked
  8345  001120  517A               	movf	(MseEsc@Index+1)& (0+255),w,b
  8346  001122  202C               	addwfc	MseEsc@Datos+1,w,c
  8347  001124  6EDA               	movwf	fsr2h,c
  8348  001126  50DF               	movf	indf2,w,c
  8349  001128  0100               	movlb	0	; () banked
  8350  00112A  6FF5               	movwf	??_MseEsc& (0+255),b
  8351  00112C  0100               	movlb	0	; () banked
  8352  00112E  51F5               	movf	??_MseEsc& (0+255),w,b
  8353  001130  6E25               	movwf	I2CEscByte@I2CByte,c
  8354  001132  6A26               	clrf	I2CEscByte@I2CByte+1,c
  8355  001134  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8356  001138  0E01               	movlw	1
  8357  00113A  0101               	movlb	1	; () banked
  8358  00113C  2779               	addwf	MseEsc@Index& (0+255),f,b
  8359  00113E  0E00               	movlw	0
  8360  001140  237A               	addwfc	(MseEsc@Index+1)& (0+255),f,b
  8361  001142  237B               	addwfc	(MseEsc@Index+2)& (0+255),f,b
  8362  001144  237C               	addwfc	(MseEsc@Index+3)& (0+255),f,b
  8363  001146                     l4338:
  8364                           
  8365                           ; BSR set to: 1
  8366  001146  C02D  F0F5         	movff	MseEsc@NBytes,??_MseEsc
  8367  00114A  C02E  F0F6         	movff	MseEsc@NBytes+1,??_MseEsc+1
  8368  00114E  0E00               	movlw	0
  8369  001150  0100               	movlb	0	; () banked
  8370  001152  BFF6               	btfsc	(??_MseEsc+1)& (0+255),7,b
  8371  001154  0EFF               	movlw	255
  8372  001156  6FF7               	movwf	(??_MseEsc+2)& (0+255),b
  8373  001158  6FF8               	movwf	(??_MseEsc+3)& (0+255),b
  8374  00115A  0100               	movlb	0	; () banked
  8375  00115C  51F5               	movf	??_MseEsc& (0+255),w,b
  8376  00115E  0101               	movlb	1	; () banked
  8377  001160  5D79               	subwf	MseEsc@Index& (0+255),w,b
  8378  001162  0100               	movlb	0	; () banked
  8379  001164  51F6               	movf	(??_MseEsc+1)& (0+255),w,b
  8380  001166  0101               	movlb	1	; () banked
  8381  001168  597A               	subwfb	(MseEsc@Index+1)& (0+255),w,b
  8382  00116A  0100               	movlb	0	; () banked
  8383  00116C  51F7               	movf	(??_MseEsc+2)& (0+255),w,b
  8384  00116E  0101               	movlb	1	; () banked
  8385  001170  597B               	subwfb	(MseEsc@Index+2)& (0+255),w,b
  8386  001172  0101               	movlb	1	; () banked
  8387  001174  517C               	movf	(MseEsc@Index+3)& (0+255),w,b
  8388  001176  0A80               	xorlw	128
  8389  001178  0100               	movlb	0	; () banked
  8390  00117A  6FF9               	movwf	(??_MseEsc+4)& (0+255),b
  8391  00117C  0100               	movlb	0	; () banked
  8392  00117E  51F8               	movf	(??_MseEsc+3)& (0+255),w,b
  8393  001180  0A80               	xorlw	128
  8394  001182  0100               	movlb	0	; () banked
  8395  001184  59F9               	subwfb	(??_MseEsc+4)& (0+255),w,b
  8396  001186  A0D8               	btfss	status,0,c
  8397  001188  D7C6               	goto	l4334
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;Mse21.c: 43: }
  8401                           ;Mse21.c: 44: I2CStop();
  8402                           
  8403                           ; BSR set to: 0
  8404  00118A  EC8C  F012         	call	_I2CStop	;wreg free
  8405  00118E  0012               	return		;funcret
  8406  001190                     __end_of_MseEsc:
  8407                           	opt stack 0
  8408                           tblptru	equ	0xFF8
  8409                           tblptrh	equ	0xFF7
  8410                           tblptrl	equ	0xFF6
  8411                           tablat	equ	0xFF5
  8412                           intcon	equ	0xFF2
  8413                           postinc0	equ	0xFEE
  8414                           wreg	equ	0xFE8
  8415                           postdec1	equ	0xFE5
  8416                           fsr1l	equ	0xFE1
  8417                           indf2	equ	0xFDF
  8418                           postinc2	equ	0xFDE
  8419                           postdec2	equ	0xFDD
  8420                           fsr2h	equ	0xFDA
  8421                           fsr2l	equ	0xFD9
  8422                           status	equ	0xFD8
  8423                           
  8424 ;; *************** function _RtcLee *****************
  8425 ;; Defined at:
  8426 ;;		line 55 in file "RTC21.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;		None
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  Char1           1   40[COMRAM] unsigned char 
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  1    wreg      void 
  8433 ;; Registers used:
  8434 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8440 ;;      Params:         0       0       0       0       0       0       0       0       0
  8441 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8443 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8444 ;;Total ram usage:        1 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    6
  8447 ;; This function calls:
  8448 ;;		_Bcd2Hex
  8449 ;;		_I2CEscByte
  8450 ;;		_I2CLeeByte
  8451 ;;		_I2CSendAck
  8452 ;;		_I2CSendNAck
  8453 ;;		_I2CStart
  8454 ;;		_I2CStop
  8455 ;; This function is called by:
  8456 ;;		_RtcInit
  8457 ;;		_MrFormat
  8458 ;;		_MrAgregaReg
  8459 ;;		_Tpo_init
  8460 ;;		_Tpo_Ciclo
  8461 ;;		_Ppal_RsComando
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text50
  8466  001560                     __ptext50:
  8467                           	opt stack 0
  8468  001560                     _RtcLee:
  8469                           	opt stack 21
  8470                           
  8471                           ;RTC21.c: 56: char Char1;
  8472                           ;RTC21.c: 57: I2CStart();
  8473                           
  8474                           ;incstack = 0
  8475  001560  ECEF  F011         	call	_I2CStart	;wreg free
  8476                           
  8477                           ;RTC21.c: 58: I2CEscByte(0xD0);
  8478  001564  0E00               	movlw	0
  8479  001566  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8480  001568  0ED0               	movlw	208
  8481  00156A  6E25               	movwf	I2CEscByte@I2CByte,c
  8482  00156C  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8483                           
  8484                           ;RTC21.c: 59: I2CEscByte(0);
  8485  001570  0E00               	movlw	0
  8486  001572  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8487  001574  0E00               	movlw	0
  8488  001576  6E25               	movwf	I2CEscByte@I2CByte,c
  8489  001578  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8490                           
  8491                           ;RTC21.c: 60: I2CStart();
  8492  00157C  ECEF  F011         	call	_I2CStart	;wreg free
  8493                           
  8494                           ;RTC21.c: 61: I2CEscByte(0xD1);
  8495  001580  0E00               	movlw	0
  8496  001582  6E26               	movwf	I2CEscByte@I2CByte+1,c
  8497  001584  0ED1               	movlw	209
  8498  001586  6E25               	movwf	I2CEscByte@I2CByte,c
  8499  001588  ECE8  F00C         	call	_I2CEscByte	;wreg free
  8500                           
  8501                           ;RTC21.c: 62: Char1 = I2CLeeByte();
  8502  00158C  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8503  001590  5019               	movf	?_I2CLeeByte,w,c
  8504  001592  6E29               	movwf	RtcLee@Char1,c
  8505                           
  8506                           ;RTC21.c: 63: if ( (Char1 & 0x80) == 0 ) {RtcFechaHora[5] = Bcd2Hex(Char1);}
  8507  001594  BE29               	btfsc	RtcLee@Char1,7,c
  8508  001596  D006               	goto	l375
  8509  001598  5029               	movf	RtcLee@Char1,w,c
  8510  00159A  EC0C  F013         	call	_Bcd2Hex
  8511  00159E  0100               	movlb	0	; () banked
  8512  0015A0  6FED               	movwf	(_RtcFechaHora+5)& (0+255),b
  8513  0015A2  D002               	goto	l4470
  8514  0015A4                     l375:
  8515                           
  8516                           ;RTC21.c: 64: else {RtcFechaHora[5] = Char1;}
  8517  0015A4  C029  F0ED         	movff	RtcLee@Char1,_RtcFechaHora+5
  8518  0015A8                     l4470:
  8519                           
  8520                           ;RTC21.c: 65: I2CSendAck();
  8521  0015A8  EC4A  F011         	call	_I2CSendAck	;wreg free
  8522                           
  8523                           ;RTC21.c: 67: Char1 = I2CLeeByte();
  8524  0015AC  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8525  0015B0  5019               	movf	?_I2CLeeByte,w,c
  8526  0015B2  6E29               	movwf	RtcLee@Char1,c
  8527                           
  8528                           ;RTC21.c: 68: RtcFechaHora[4] = Bcd2Hex(Char1);
  8529  0015B4  5029               	movf	RtcLee@Char1,w,c
  8530  0015B6  EC0C  F013         	call	_Bcd2Hex
  8531  0015BA  0100               	movlb	0	; () banked
  8532  0015BC  6FEC               	movwf	(_RtcFechaHora+4)& (0+255),b
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;RTC21.c: 69: I2CSendAck();
  8536  0015BE  EC4A  F011         	call	_I2CSendAck	;wreg free
  8537                           
  8538                           ;RTC21.c: 71: Char1 = I2CLeeByte();
  8539  0015C2  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8540  0015C6  5019               	movf	?_I2CLeeByte,w,c
  8541  0015C8  6E29               	movwf	RtcLee@Char1,c
  8542                           
  8543                           ;RTC21.c: 72: RtcFechaHora[3] = Bcd2Hex(Char1);
  8544  0015CA  5029               	movf	RtcLee@Char1,w,c
  8545  0015CC  EC0C  F013         	call	_Bcd2Hex
  8546  0015D0  0100               	movlb	0	; () banked
  8547  0015D2  6FEB               	movwf	(_RtcFechaHora+3)& (0+255),b
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;RTC21.c: 73: I2CSendAck();
  8551  0015D4  EC4A  F011         	call	_I2CSendAck	;wreg free
  8552                           
  8553                           ;RTC21.c: 75: Char1 = I2CLeeByte();
  8554  0015D8  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8555  0015DC  5019               	movf	?_I2CLeeByte,w,c
  8556  0015DE  6E29               	movwf	RtcLee@Char1,c
  8557                           
  8558                           ;RTC21.c: 76: RtcFechaHora[6] = Bcd2Hex(Char1);
  8559  0015E0  5029               	movf	RtcLee@Char1,w,c
  8560  0015E2  EC0C  F013         	call	_Bcd2Hex
  8561  0015E6  0100               	movlb	0	; () banked
  8562  0015E8  6FEE               	movwf	(_RtcFechaHora+6)& (0+255),b
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;RTC21.c: 77: I2CSendAck();
  8566  0015EA  EC4A  F011         	call	_I2CSendAck	;wreg free
  8567                           
  8568                           ;RTC21.c: 79: Char1 = I2CLeeByte();
  8569  0015EE  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8570  0015F2  5019               	movf	?_I2CLeeByte,w,c
  8571  0015F4  6E29               	movwf	RtcLee@Char1,c
  8572                           
  8573                           ;RTC21.c: 80: RtcFechaHora[2] = Bcd2Hex(Char1);
  8574  0015F6  5029               	movf	RtcLee@Char1,w,c
  8575  0015F8  EC0C  F013         	call	_Bcd2Hex
  8576  0015FC  0100               	movlb	0	; () banked
  8577  0015FE  6FEA               	movwf	(_RtcFechaHora+2)& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;RTC21.c: 81: I2CSendAck();
  8581  001600  EC4A  F011         	call	_I2CSendAck	;wreg free
  8582                           
  8583                           ;RTC21.c: 83: Char1 = I2CLeeByte();
  8584  001604  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8585  001608  5019               	movf	?_I2CLeeByte,w,c
  8586  00160A  6E29               	movwf	RtcLee@Char1,c
  8587                           
  8588                           ;RTC21.c: 84: RtcFechaHora[1] = Bcd2Hex(Char1);
  8589  00160C  5029               	movf	RtcLee@Char1,w,c
  8590  00160E  EC0C  F013         	call	_Bcd2Hex
  8591  001612  0100               	movlb	0	; () banked
  8592  001614  6FE9               	movwf	(_RtcFechaHora+1)& (0+255),b
  8593                           
  8594                           ;RTC21.c: 85: I2CSendAck();
  8595  001616  EC4A  F011         	call	_I2CSendAck	;wreg free
  8596                           
  8597                           ;RTC21.c: 87: Char1 = I2CLeeByte();
  8598  00161A  ECB9  F00D         	call	_I2CLeeByte	;wreg free
  8599  00161E  5019               	movf	?_I2CLeeByte,w,c
  8600  001620  6E29               	movwf	RtcLee@Char1,c
  8601                           
  8602                           ;RTC21.c: 88: RtcFechaHora[0] = Bcd2Hex(Char1);
  8603  001622  5029               	movf	RtcLee@Char1,w,c
  8604  001624  EC0C  F013         	call	_Bcd2Hex
  8605  001628  0100               	movlb	0	; () banked
  8606  00162A  6FE8               	movwf	_RtcFechaHora& (0+255),b
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;RTC21.c: 89: I2CSendNAck();
  8610  00162C  ECBC  F011         	call	_I2CSendNAck	;wreg free
  8611                           
  8612                           ;RTC21.c: 90: I2CStop();
  8613  001630  EC8C  F012         	call	_I2CStop	;wreg free
  8614  001634  0012               	return		;funcret
  8615  001636                     __end_of_RtcLee:
  8616                           	opt stack 0
  8617                           tblptru	equ	0xFF8
  8618                           tblptrh	equ	0xFF7
  8619                           tblptrl	equ	0xFF6
  8620                           tablat	equ	0xFF5
  8621                           intcon	equ	0xFF2
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           fsr1l	equ	0xFE1
  8626                           indf2	equ	0xFDF
  8627                           postinc2	equ	0xFDE
  8628                           postdec2	equ	0xFDD
  8629                           fsr2h	equ	0xFDA
  8630                           fsr2l	equ	0xFD9
  8631                           status	equ	0xFD8
  8632                           
  8633 ;; *************** function _I2CStop *****************
  8634 ;; Defined at:
  8635 ;;		line 49 in file "I2C30.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    5
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_MseEsc
  8660 ;;		_MseLee
  8661 ;;		_RtcEsc
  8662 ;;		_RtcLee
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           	psect	text51
  8667  002518                     __ptext51:
  8668                           	opt stack 0
  8669  002518                     _I2CStop:
  8670                           	opt stack 21
  8671                           
  8672                           ;I2C30.c: 50: TRISBbits.RB0=0;
  8673                           
  8674                           ;incstack = 0
  8675  002518  9093               	bcf	3987,0,c	;volatile
  8676                           
  8677                           ;I2C30.c: 51: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8678  00251A  0E0C               	movlw	12
  8679  00251C                     u3627:
  8680  00251C  2EE8               	decfsz	wreg,f,c
  8681  00251E  D7FE               	bra	u3627
  8682  002520  D000               	nop2	
  8683                           
  8684                           ;I2C30.c: 52: TRISBbits.RB1=1;
  8685  002522  8293               	bsf	3987,1,c	;volatile
  8686                           
  8687                           ;I2C30.c: 53: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8688  002524  0E0C               	movlw	12
  8689  002526                     u3637:
  8690  002526  2EE8               	decfsz	wreg,f,c
  8691  002528  D7FE               	bra	u3637
  8692  00252A  D000               	nop2	
  8693                           
  8694                           ;I2C30.c: 54: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8695  00252C  0E0C               	movlw	12
  8696  00252E                     u3647:
  8697  00252E  2EE8               	decfsz	wreg,f,c
  8698  002530  D7FE               	bra	u3647
  8699  002532  D000               	nop2	
  8700                           
  8701                           ;I2C30.c: 55: TRISBbits.RB0=1;
  8702  002534  8093               	bsf	3987,0,c	;volatile
  8703                           
  8704                           ;I2C30.c: 56: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8705  002536  0E0C               	movlw	12
  8706  002538                     u3657:
  8707  002538  2EE8               	decfsz	wreg,f,c
  8708  00253A  D7FE               	bra	u3657
  8709  00253C  D000               	nop2	
  8710  00253E  0012               	return		;funcret
  8711  002540                     __end_of_I2CStop:
  8712                           	opt stack 0
  8713                           tblptru	equ	0xFF8
  8714                           tblptrh	equ	0xFF7
  8715                           tblptrl	equ	0xFF6
  8716                           tablat	equ	0xFF5
  8717                           intcon	equ	0xFF2
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _I2CStart *****************
  8730 ;; Defined at:
  8731 ;;		line 37 in file "I2C30.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    5
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_MseEsc
  8756 ;;		_MseLee
  8757 ;;		_RtcEsc
  8758 ;;		_RtcLee
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text52
  8763  0023DE                     __ptext52:
  8764                           	opt stack 0
  8765  0023DE                     _I2CStart:
  8766                           	opt stack 21
  8767                           
  8768                           ;I2C30.c: 38: TRISBbits.RB0=1;
  8769                           
  8770                           ;incstack = 0
  8771  0023DE  8093               	bsf	3987,0,c	;volatile
  8772                           
  8773                           ;I2C30.c: 39: TRISBbits.RB1=1;
  8774  0023E0  8293               	bsf	3987,1,c	;volatile
  8775                           
  8776                           ;I2C30.c: 40: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8777  0023E2  0E0C               	movlw	12
  8778  0023E4                     u3667:
  8779  0023E4  2EE8               	decfsz	wreg,f,c
  8780  0023E6  D7FE               	bra	u3667
  8781  0023E8  D000               	nop2	
  8782                           
  8783                           ;I2C30.c: 41: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8784  0023EA  0E0C               	movlw	12
  8785  0023EC                     u3677:
  8786  0023EC  2EE8               	decfsz	wreg,f,c
  8787  0023EE  D7FE               	bra	u3677
  8788  0023F0  D000               	nop2	
  8789                           
  8790                           ;I2C30.c: 42: TRISBbits.RB0=0;
  8791  0023F2  9093               	bcf	3987,0,c	;volatile
  8792                           
  8793                           ;I2C30.c: 43: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8794  0023F4  0E0C               	movlw	12
  8795  0023F6                     u3687:
  8796  0023F6  2EE8               	decfsz	wreg,f,c
  8797  0023F8  D7FE               	bra	u3687
  8798  0023FA  D000               	nop2	
  8799                           
  8800                           ;I2C30.c: 44: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8801  0023FC  0E0C               	movlw	12
  8802  0023FE                     u3697:
  8803  0023FE  2EE8               	decfsz	wreg,f,c
  8804  002400  D7FE               	bra	u3697
  8805  002402  D000               	nop2	
  8806                           
  8807                           ;I2C30.c: 45: TRISBbits.RB1=0;
  8808  002404  9293               	bcf	3987,1,c	;volatile
  8809                           
  8810                           ;I2C30.c: 46: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8811  002406  0E0C               	movlw	12
  8812  002408                     u3707:
  8813  002408  2EE8               	decfsz	wreg,f,c
  8814  00240A  D7FE               	bra	u3707
  8815  00240C  D000               	nop2	
  8816  00240E  0012               	return		;funcret
  8817  002410                     __end_of_I2CStart:
  8818                           	opt stack 0
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           intcon	equ	0xFF2
  8824                           postinc0	equ	0xFEE
  8825                           wreg	equ	0xFE8
  8826                           postdec1	equ	0xFE5
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _I2CSendNAck *****************
  8836 ;; Defined at:
  8837 ;;		line 128 in file "I2C30.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8854 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8855 ;;Total ram usage:        0 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    5
  8858 ;; This function calls:
  8859 ;;		Nothing
  8860 ;; This function is called by:
  8861 ;;		_MseLee
  8862 ;;		_RtcLee
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text53
  8867  002378                     __ptext53:
  8868                           	opt stack 0
  8869  002378                     _I2CSendNAck:
  8870                           	opt stack 21
  8871                           
  8872                           ;I2C30.c: 129: TRISBbits.RB1=0;
  8873                           
  8874                           ;incstack = 0
  8875  002378  9293               	bcf	3987,1,c	;volatile
  8876                           
  8877                           ;I2C30.c: 130: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8878  00237A  0E0C               	movlw	12
  8879  00237C                     u3717:
  8880  00237C  2EE8               	decfsz	wreg,f,c
  8881  00237E  D7FE               	bra	u3717
  8882  002380  D000               	nop2	
  8883                           
  8884                           ;I2C30.c: 131: TRISBbits.RB0=1;
  8885  002382  8093               	bsf	3987,0,c	;volatile
  8886                           
  8887                           ;I2C30.c: 132: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8888  002384  0E0C               	movlw	12
  8889  002386                     u3727:
  8890  002386  2EE8               	decfsz	wreg,f,c
  8891  002388  D7FE               	bra	u3727
  8892  00238A  D000               	nop2	
  8893                           
  8894                           ;I2C30.c: 133: TRISBbits.RB1=1;
  8895  00238C  8293               	bsf	3987,1,c	;volatile
  8896                           
  8897                           ;I2C30.c: 134: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8898  00238E  0E0C               	movlw	12
  8899  002390                     u3737:
  8900  002390  2EE8               	decfsz	wreg,f,c
  8901  002392  D7FE               	bra	u3737
  8902  002394  D000               	nop2	
  8903                           
  8904                           ;I2C30.c: 135: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8905  002396  0E0C               	movlw	12
  8906  002398                     u3747:
  8907  002398  2EE8               	decfsz	wreg,f,c
  8908  00239A  D7FE               	bra	u3747
  8909  00239C  D000               	nop2	
  8910                           
  8911                           ;I2C30.c: 136: TRISBbits.RB1=0;
  8912  00239E  9293               	bcf	3987,1,c	;volatile
  8913                           
  8914                           ;I2C30.c: 137: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8915  0023A0  0E0C               	movlw	12
  8916  0023A2                     u3757:
  8917  0023A2  2EE8               	decfsz	wreg,f,c
  8918  0023A4  D7FE               	bra	u3757
  8919  0023A6  D000               	nop2	
  8920                           
  8921                           ;I2C30.c: 138: TRISBbits.RB0=1;
  8922  0023A8  8093               	bsf	3987,0,c	;volatile
  8923  0023AA  0012               	return		;funcret
  8924  0023AC                     __end_of_I2CSendNAck:
  8925                           	opt stack 0
  8926                           tblptru	equ	0xFF8
  8927                           tblptrh	equ	0xFF7
  8928                           tblptrl	equ	0xFF6
  8929                           tablat	equ	0xFF5
  8930                           intcon	equ	0xFF2
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           postdec1	equ	0xFE5
  8934                           fsr1l	equ	0xFE1
  8935                           indf2	equ	0xFDF
  8936                           postinc2	equ	0xFDE
  8937                           postdec2	equ	0xFDD
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _I2CSendAck *****************
  8943 ;; Defined at:
  8944 ;;		line 114 in file "I2C30.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;		None
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;		None
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  1    wreg      void 
  8951 ;; Registers used:
  8952 ;;		wreg
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8958 ;;      Params:         0       0       0       0       0       0       0       0       0
  8959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8961 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8962 ;;Total ram usage:        0 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:    5
  8965 ;; This function calls:
  8966 ;;		Nothing
  8967 ;; This function is called by:
  8968 ;;		_MseLee
  8969 ;;		_RtcLee
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	text54
  8974  002294                     __ptext54:
  8975                           	opt stack 0
  8976  002294                     _I2CSendAck:
  8977                           	opt stack 21
  8978                           
  8979                           ;I2C30.c: 115: TRISBbits.RB1=0;
  8980                           
  8981                           ;incstack = 0
  8982  002294  9293               	bcf	3987,1,c	;volatile
  8983                           
  8984                           ;I2C30.c: 116: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8985  002296  0E0C               	movlw	12
  8986  002298                     u3767:
  8987  002298  2EE8               	decfsz	wreg,f,c
  8988  00229A  D7FE               	bra	u3767
  8989  00229C  D000               	nop2	
  8990                           
  8991                           ;I2C30.c: 117: TRISBbits.RB0=0;
  8992  00229E  9093               	bcf	3987,0,c	;volatile
  8993                           
  8994                           ;I2C30.c: 118: _delay((unsigned long)((19)*(8000000/4000000.0)));
  8995  0022A0  0E0C               	movlw	12
  8996  0022A2                     u3777:
  8997  0022A2  2EE8               	decfsz	wreg,f,c
  8998  0022A4  D7FE               	bra	u3777
  8999  0022A6  D000               	nop2	
  9000                           
  9001                           ;I2C30.c: 119: TRISBbits.RB1=1;
  9002  0022A8  8293               	bsf	3987,1,c	;volatile
  9003                           
  9004                           ;I2C30.c: 120: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9005  0022AA  0E0C               	movlw	12
  9006  0022AC                     u3787:
  9007  0022AC  2EE8               	decfsz	wreg,f,c
  9008  0022AE  D7FE               	bra	u3787
  9009  0022B0  D000               	nop2	
  9010                           
  9011                           ;I2C30.c: 121: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9012  0022B2  0E0C               	movlw	12
  9013  0022B4                     u3797:
  9014  0022B4  2EE8               	decfsz	wreg,f,c
  9015  0022B6  D7FE               	bra	u3797
  9016  0022B8  D000               	nop2	
  9017                           
  9018                           ;I2C30.c: 122: TRISBbits.RB1=0;
  9019  0022BA  9293               	bcf	3987,1,c	;volatile
  9020                           
  9021                           ;I2C30.c: 123: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9022  0022BC  0E0C               	movlw	12
  9023  0022BE                     u3807:
  9024  0022BE  2EE8               	decfsz	wreg,f,c
  9025  0022C0  D7FE               	bra	u3807
  9026  0022C2  D000               	nop2	
  9027                           
  9028                           ;I2C30.c: 124: TRISBbits.RB0=1;
  9029  0022C4  8093               	bsf	3987,0,c	;volatile
  9030                           
  9031                           ;I2C30.c: 125: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9032  0022C6  0E0C               	movlw	12
  9033  0022C8                     u3817:
  9034  0022C8  2EE8               	decfsz	wreg,f,c
  9035  0022CA  D7FE               	bra	u3817
  9036  0022CC  D000               	nop2	
  9037  0022CE  0012               	return		;funcret
  9038  0022D0                     __end_of_I2CSendAck:
  9039                           	opt stack 0
  9040                           tblptru	equ	0xFF8
  9041                           tblptrh	equ	0xFF7
  9042                           tblptrl	equ	0xFF6
  9043                           tablat	equ	0xFF5
  9044                           intcon	equ	0xFF2
  9045                           postinc0	equ	0xFEE
  9046                           wreg	equ	0xFE8
  9047                           postdec1	equ	0xFE5
  9048                           fsr1l	equ	0xFE1
  9049                           indf2	equ	0xFDF
  9050                           postinc2	equ	0xFDE
  9051                           postdec2	equ	0xFDD
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           
  9056 ;; *************** function _I2CLeeByte *****************
  9057 ;; Defined at:
  9058 ;;		line 91 in file "I2C30.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;		None
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  I2CByte         2   28[COMRAM] unsigned short 
  9063 ;;  Index           2   26[COMRAM] short 
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  2   24[COMRAM] unsigned short 
  9066 ;; Registers used:
  9067 ;;		wreg, status,2, status,0
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9073 ;;      Params:         2       0       0       0       0       0       0       0       0
  9074 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9076 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9077 ;;Total ram usage:        6 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; Hardware stack levels required when called:    5
  9080 ;; This function calls:
  9081 ;;		Nothing
  9082 ;; This function is called by:
  9083 ;;		_MseLee
  9084 ;;		_RtcLee
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           	psect	text55
  9089  001B72                     __ptext55:
  9090                           	opt stack 0
  9091  001B72                     _I2CLeeByte:
  9092                           	opt stack 21
  9093                           
  9094                           ;I2C30.c: 92: unsigned short I2CByte;
  9095                           ;I2C30.c: 93: short Index;
  9096                           ;I2C30.c: 94: TRISBbits.RB1=0;
  9097                           
  9098                           ;incstack = 0
  9099  001B72  9293               	bcf	3987,1,c	;volatile
  9100                           
  9101                           ;I2C30.c: 95: TRISBbits.RB0=1;
  9102  001B74  8093               	bsf	3987,0,c	;volatile
  9103                           
  9104                           ;I2C30.c: 96: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9105  001B76  0E0C               	movlw	12
  9106  001B78                     u3827:
  9107  001B78  2EE8               	decfsz	wreg,f,c
  9108  001B7A  D7FE               	bra	u3827
  9109  001B7C  D000               	nop2	
  9110                           
  9111                           ;I2C30.c: 97: I2CByte = 0;
  9112  001B7E  0E00               	movlw	0
  9113  001B80  6E1E               	movwf	I2CLeeByte@I2CByte+1,c
  9114  001B82  0E00               	movlw	0
  9115  001B84  6E1D               	movwf	I2CLeeByte@I2CByte,c
  9116                           
  9117                           ;I2C30.c: 98: for (Index = 1; Index <= 8; Index++) {
  9118  001B86  0E00               	movlw	0
  9119  001B88  6E1C               	movwf	I2CLeeByte@Index+1,c
  9120  001B8A  0E01               	movlw	1
  9121  001B8C  6E1B               	movwf	I2CLeeByte@Index,c
  9122  001B8E  BE1C               	btfsc	I2CLeeByte@Index+1,7,c
  9123  001B90  D006               	goto	l4180
  9124  001B92  501C               	movf	I2CLeeByte@Index+1,w,c
  9125  001B94  E122               	bnz	l325
  9126  001B96  0E09               	movlw	9
  9127  001B98  5C1B               	subwf	I2CLeeByte@Index,w,c
  9128  001B9A  B0D8               	btfsc	status,0,c
  9129  001B9C  D01E               	goto	l325
  9130  001B9E                     l4180:
  9131                           
  9132                           ;I2C30.c: 99: I2CByte = I2CByte << 1;
  9133  001B9E  90D8               	bcf	status,0,c
  9134  001BA0  341D               	rlcf	I2CLeeByte@I2CByte,w,c
  9135  001BA2  6E1D               	movwf	I2CLeeByte@I2CByte,c
  9136  001BA4  341E               	rlcf	I2CLeeByte@I2CByte+1,w,c
  9137  001BA6  6E1E               	movwf	I2CLeeByte@I2CByte+1,c
  9138                           
  9139                           ;I2C30.c: 100: TRISBbits.RB1=1;
  9140  001BA8  8293               	bsf	3987,1,c	;volatile
  9141                           
  9142                           ;I2C30.c: 101: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9143  001BAA  0E0C               	movlw	12
  9144  001BAC                     u3837:
  9145  001BAC  2EE8               	decfsz	wreg,f,c
  9146  001BAE  D7FE               	bra	u3837
  9147  001BB0  D000               	nop2	
  9148                           
  9149                           ;I2C30.c: 102: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9150  001BB2  0E0C               	movlw	12
  9151  001BB4                     u3847:
  9152  001BB4  2EE8               	decfsz	wreg,f,c
  9153  001BB6  D7FE               	bra	u3847
  9154  001BB8  D000               	nop2	
  9155                           
  9156                           ;I2C30.c: 103: if (PORTBbits.RB0 == 1) {
  9157  001BBA  A081               	btfss	3969,0,c	;volatile
  9158  001BBC  D002               	goto	l4192
  9159                           
  9160                           ;I2C30.c: 104: I2CByte += 1;
  9161  001BBE  4A1D               	infsnz	I2CLeeByte@I2CByte,f,c
  9162  001BC0  2A1E               	incf	I2CLeeByte@I2CByte+1,f,c
  9163  001BC2                     l4192:
  9164                           
  9165                           ;I2C30.c: 105: }
  9166                           ;I2C30.c: 106: TRISBbits.RB1=0;
  9167  001BC2  9293               	bcf	3987,1,c	;volatile
  9168                           
  9169                           ;I2C30.c: 107: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9170  001BC4  0E0C               	movlw	12
  9171  001BC6                     u3857:
  9172  001BC6  2EE8               	decfsz	wreg,f,c
  9173  001BC8  D7FE               	bra	u3857
  9174  001BCA  D000               	nop2	
  9175  001BCC  4A1B               	infsnz	I2CLeeByte@Index,f,c
  9176  001BCE  2A1C               	incf	I2CLeeByte@Index+1,f,c
  9177  001BD0  BE1C               	btfsc	I2CLeeByte@Index+1,7,c
  9178  001BD2  D7E5               	goto	l4180
  9179  001BD4  501C               	movf	I2CLeeByte@Index+1,w,c
  9180  001BD6  E101               	bnz	u2690
  9181  001BD8  D7DE               	goto	L3
  9182  001BDA                     u2690:
  9183  001BDA                     l325:
  9184                           
  9185                           ;I2C30.c: 108: }
  9186                           ;I2C30.c: 109: TRISBbits.RB0=1;;
  9187  001BDA  8093               	bsf	3987,0,c	;volatile
  9188                           
  9189                           ;I2C30.c: 110: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9190  001BDC  0E0C               	movlw	12
  9191  001BDE                     u3867:
  9192  001BDE  2EE8               	decfsz	wreg,f,c
  9193  001BE0  D7FE               	bra	u3867
  9194  001BE2  D000               	nop2	
  9195                           
  9196                           ;I2C30.c: 111: return (I2CByte);
  9197  001BE4  C01D  F019         	movff	I2CLeeByte@I2CByte,?_I2CLeeByte
  9198  001BE8  C01E  F01A         	movff	I2CLeeByte@I2CByte+1,?_I2CLeeByte+1
  9199  001BEC  0012               	return	
  9200  001BEE                     __end_of_I2CLeeByte:
  9201                           	opt stack 0
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           intcon	equ	0xFF2
  9207                           postinc0	equ	0xFEE
  9208                           wreg	equ	0xFE8
  9209                           postdec1	equ	0xFE5
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           postdec2	equ	0xFDD
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function _I2CEscByte *****************
  9219 ;; Defined at:
  9220 ;;		line 59 in file "I2C30.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  I2CByte         2   36[COMRAM] unsigned short 
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  Index           2   38[COMRAM] short 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      void 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9234 ;;      Params:         2       0       0       0       0       0       0       0       0
  9235 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9237 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9238 ;;Total ram usage:        4 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    5
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		_MseEsc
  9245 ;;		_MseLee
  9246 ;;		_RtcEsc
  9247 ;;		_RtcLee
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text56
  9252  0019D0                     __ptext56:
  9253                           	opt stack 0
  9254  0019D0                     _I2CEscByte:
  9255                           	opt stack 21
  9256                           
  9257                           ;I2C30.c: 61: short Index;
  9258                           ;I2C30.c: 62: TRISBbits.RB1=0;
  9259                           
  9260                           ;incstack = 0
  9261  0019D0  9293               	bcf	3987,1,c	;volatile
  9262                           
  9263                           ;I2C30.c: 63: for (Index = 1; Index <= 8; Index++) {
  9264  0019D2  0E00               	movlw	0
  9265  0019D4  6E28               	movwf	I2CEscByte@Index+1,c
  9266  0019D6  0E01               	movlw	1
  9267  0019D8  6E27               	movwf	I2CEscByte@Index,c
  9268  0019DA  BE28               	btfsc	I2CEscByte@Index+1,7,c
  9269  0019DC  D006               	goto	l315
  9270  0019DE  5028               	movf	I2CEscByte@Index+1,w,c
  9271  0019E0  E127               	bnz	l316
  9272  0019E2  0E09               	movlw	9
  9273  0019E4  5C27               	subwf	I2CEscByte@Index,w,c
  9274  0019E6  B0D8               	btfsc	status,0,c
  9275  0019E8  D023               	goto	l316
  9276  0019EA                     l315:
  9277                           
  9278                           ;I2C30.c: 64: if ((I2CByte & 0x80) == 0) {
  9279  0019EA  BE25               	btfsc	I2CEscByte@I2CByte,7,c
  9280  0019EC  D002               	goto	l317
  9281                           
  9282                           ;I2C30.c: 65: TRISBbits.RB0=0;;
  9283  0019EE  9093               	bcf	3987,0,c	;volatile
  9284                           
  9285                           ;I2C30.c: 66: } else {
  9286  0019F0  D001               	goto	l4134
  9287  0019F2                     l317:
  9288                           
  9289                           ;I2C30.c: 67: TRISBbits.RB0=1;;
  9290  0019F2  8093               	bsf	3987,0,c	;volatile
  9291  0019F4                     l4134:
  9292                           
  9293                           ;I2C30.c: 68: }
  9294                           ;I2C30.c: 69: I2CByte = I2CByte << 1;
  9295  0019F4  90D8               	bcf	status,0,c
  9296  0019F6  3425               	rlcf	I2CEscByte@I2CByte,w,c
  9297  0019F8  6E25               	movwf	I2CEscByte@I2CByte,c
  9298  0019FA  3426               	rlcf	I2CEscByte@I2CByte+1,w,c
  9299  0019FC  6E26               	movwf	I2CEscByte@I2CByte+1,c
  9300                           
  9301                           ;I2C30.c: 70: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9302  0019FE  0E0C               	movlw	12
  9303  001A00                     u3877:
  9304  001A00  2EE8               	decfsz	wreg,f,c
  9305  001A02  D7FE               	bra	u3877
  9306  001A04  D000               	nop2	
  9307                           
  9308                           ;I2C30.c: 71: TRISBbits.RB1=1;;
  9309  001A06  8293               	bsf	3987,1,c	;volatile
  9310                           
  9311                           ;I2C30.c: 72: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9312  001A08  0E0C               	movlw	12
  9313  001A0A                     u3887:
  9314  001A0A  2EE8               	decfsz	wreg,f,c
  9315  001A0C  D7FE               	bra	u3887
  9316  001A0E  D000               	nop2	
  9317                           
  9318                           ;I2C30.c: 73: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9319  001A10  0E0C               	movlw	12
  9320  001A12                     u3897:
  9321  001A12  2EE8               	decfsz	wreg,f,c
  9322  001A14  D7FE               	bra	u3897
  9323  001A16  D000               	nop2	
  9324                           
  9325                           ;I2C30.c: 74: TRISBbits.RB1=0;;
  9326  001A18  9293               	bcf	3987,1,c	;volatile
  9327                           
  9328                           ;I2C30.c: 75: _delay((unsigned long)((19)*(8000000/4000000.0)));;
  9329  001A1A  0E0C               	movlw	12
  9330  001A1C                     u3907:
  9331  001A1C  2EE8               	decfsz	wreg,f,c
  9332  001A1E  D7FE               	bra	u3907
  9333  001A20  D000               	nop2	
  9334  001A22  4A27               	infsnz	I2CEscByte@Index,f,c
  9335  001A24  2A28               	incf	I2CEscByte@Index+1,f,c
  9336  001A26  BE28               	btfsc	I2CEscByte@Index+1,7,c
  9337  001A28  D7E0               	goto	l315
  9338  001A2A  5028               	movf	I2CEscByte@Index+1,w,c
  9339  001A2C  E101               	bnz	u2650
  9340  001A2E  D7D9               	goto	L4
  9341  001A30                     u2650:
  9342  001A30                     l316:
  9343                           
  9344                           ;I2C30.c: 76: }
  9345                           ;I2C30.c: 78: TRISBbits.RB0=1;
  9346  001A30  8093               	bsf	3987,0,c	;volatile
  9347                           
  9348                           ;I2C30.c: 79: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9349  001A32  0E0C               	movlw	12
  9350  001A34                     u3917:
  9351  001A34  2EE8               	decfsz	wreg,f,c
  9352  001A36  D7FE               	bra	u3917
  9353  001A38  D000               	nop2	
  9354                           
  9355                           ;I2C30.c: 80: TRISBbits.RB1=1;
  9356  001A3A  8293               	bsf	3987,1,c	;volatile
  9357                           
  9358                           ;I2C30.c: 81: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9359  001A3C  0E0C               	movlw	12
  9360  001A3E                     u3927:
  9361  001A3E  2EE8               	decfsz	wreg,f,c
  9362  001A40  D7FE               	bra	u3927
  9363  001A42  D000               	nop2	
  9364                           
  9365                           ;I2C30.c: 84: if (PORTBbits.RB0 == 0) {I2CAck = 1;}
  9366  001A44  B081               	btfsc	3969,0,c	;volatile
  9367  001A46  D005               	goto	l4160
  9368  001A48  0E00               	movlw	0
  9369  001A4A  0100               	movlb	0	; () banked
  9370  001A4C  6FA9               	movwf	(_I2CAck+1)& (0+255),b
  9371  001A4E  0E01               	movlw	1
  9372  001A50  D004               	goto	L5
  9373  001A52                     l4160:
  9374                           
  9375                           ;I2C30.c: 85: else {I2CAck = 0;}
  9376  001A52  0E00               	movlw	0
  9377  001A54  0100               	movlb	0	; () banked
  9378  001A56  6FA9               	movwf	(_I2CAck+1)& (0+255),b
  9379  001A58  0E00               	movlw	0
  9380  001A5A                     L5:
  9381  001A5A  6FA8               	movwf	_I2CAck& (0+255),b
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;I2C30.c: 86: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9385                           
  9386                           ; BSR set to: 0
  9387  001A5C  0E0C               	movlw	12
  9388  001A5E                     u3937:
  9389  001A5E  2EE8               	decfsz	wreg,f,c
  9390  001A60  D7FE               	bra	u3937
  9391  001A62  D000               	nop2	
  9392                           
  9393                           ;I2C30.c: 87: TRISBbits.RB1=0;
  9394  001A64  9293               	bcf	3987,1,c	;volatile
  9395                           
  9396                           ;I2C30.c: 88: _delay((unsigned long)((19)*(8000000/4000000.0)));
  9397  001A66  0E0C               	movlw	12
  9398  001A68                     u3947:
  9399  001A68  2EE8               	decfsz	wreg,f,c
  9400  001A6A  D7FE               	bra	u3947
  9401  001A6C  D000               	nop2	
  9402  001A6E  0012               	return		;funcret
  9403  001A70                     __end_of_I2CEscByte:
  9404                           	opt stack 0
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           intcon	equ	0xFF2
  9410                           postinc0	equ	0xFEE
  9411                           wreg	equ	0xFE8
  9412                           postdec1	equ	0xFE5
  9413                           fsr1l	equ	0xFE1
  9414                           indf2	equ	0xFDF
  9415                           postinc2	equ	0xFDE
  9416                           postdec2	equ	0xFDD
  9417                           fsr2h	equ	0xFDA
  9418                           fsr2l	equ	0xFD9
  9419                           status	equ	0xFD8
  9420                           
  9421 ;; *************** function _Bcd2Hex *****************
  9422 ;; Defined at:
  9423 ;;		line 19 in file "RTC21.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;  Bcd1            1    wreg     unsigned char 
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;  Bcd1            1   26[COMRAM] unsigned char 
  9428 ;;  Hex1            1   25[COMRAM] unsigned char 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  1    wreg      unsigned char 
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, prodl, prodh
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0
  9439 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9440 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9441 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9442 ;;Total ram usage:        3 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    5
  9445 ;; This function calls:
  9446 ;;		Nothing
  9447 ;; This function is called by:
  9448 ;;		_RtcLee
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           	psect	text57
  9453  002618                     __ptext57:
  9454                           	opt stack 0
  9455  002618                     _Bcd2Hex:
  9456                           	opt stack 21
  9457                           
  9458                           ;incstack = 0
  9459                           ;Bcd2Hex@Bcd1 stored from wreg
  9460  002618  6E1B               	movwf	Bcd2Hex@Bcd1,c
  9461                           
  9462                           ;RTC21.c: 20: char Hex1;
  9463                           ;RTC21.c: 21: Hex1 = ((Bcd1 >> 4)*10) +(Bcd1 & 0x0F);
  9464  00261A  C01B  F019         	movff	Bcd2Hex@Bcd1,??_Bcd2Hex
  9465  00261E  0E0F               	movlw	15
  9466  002620  1619               	andwf	??_Bcd2Hex,f,c
  9467  002622  381B               	swapf	Bcd2Hex@Bcd1,w,c
  9468  002624  0B0F               	andlw	15
  9469  002626  0D0A               	mullw	10
  9470  002628  50F3               	movf	prodl,w,c
  9471  00262A  2419               	addwf	??_Bcd2Hex,w,c
  9472  00262C  6E1A               	movwf	Bcd2Hex@Hex1,c
  9473                           
  9474                           ;RTC21.c: 22: return (Hex1);
  9475  00262E  501A               	movf	Bcd2Hex@Hex1,w,c
  9476  002630  0012               	return	
  9477  002632                     __end_of_Bcd2Hex:
  9478                           	opt stack 0
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           postinc0	equ	0xFEE
  9486                           wreg	equ	0xFE8
  9487                           postdec1	equ	0xFE5
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _MrSeparaFecha *****************
  9497 ;; Defined at:
  9498 ;;		line 258 in file "MemoryRoller29.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  MrAmPm          2   36[COMRAM] unsigned short 
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  1    wreg      void 
  9505 ;; Registers used:
  9506 ;;		wreg, status,2, status,0
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0
  9513 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9514 ;;      Temps:         12       0       0       0       0       0       0       0       0
  9515 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9516 ;;Total ram usage:       14 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    5
  9519 ;; This function calls:
  9520 ;;		Nothing
  9521 ;; This function is called by:
  9522 ;;		_MrFormat
  9523 ;;		_MrAgregaReg
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text58
  9528  001190                     __ptext58:
  9529                           	opt stack 0
  9530  001190                     _MrSeparaFecha:
  9531                           	opt stack 21
  9532                           
  9533                           ;MemoryRoller29.c: 259: unsigned short MrAmPm;
  9534                           ;MemoryRoller29.c: 260: MrHora12 = RtcFechaHora[3] & 0x1F;
  9535                           
  9536                           ;incstack = 0
  9537  001190  C0EB  F019         	movff	_RtcFechaHora+3,??_MrSeparaFecha
  9538  001194  0E1F               	movlw	31
  9539  001196  1619               	andwf	??_MrSeparaFecha,f,c
  9540  001198  5019               	movf	??_MrSeparaFecha,w,c
  9541  00119A  0100               	movlb	0	; () banked
  9542  00119C  6FF3               	movwf	_MrHora12& (0+255),b
  9543  00119E  6BF4               	clrf	(_MrHora12+1)& (0+255),b
  9544                           
  9545                           ;MemoryRoller29.c: 261: if (MrHora12 < 12) {MrAmPm = 0;}
  9546  0011A0  0100               	movlb	0	; () banked
  9547  0011A2  51F4               	movf	(_MrHora12+1)& (0+255),w,b
  9548  0011A4  E10A               	bnz	l4540
  9549  0011A6  0E0C               	movlw	12
  9550  0011A8  0100               	movlb	0	; () banked
  9551  0011AA  5DF3               	subwf	_MrHora12& (0+255),w,b
  9552  0011AC  B0D8               	btfsc	status,0,c
  9553  0011AE  D005               	goto	l4540
  9554                           
  9555                           ; BSR set to: 0
  9556  0011B0  0E00               	movlw	0
  9557  0011B2  6E26               	movwf	MrSeparaFecha@MrAmPm+1,c
  9558  0011B4  0E00               	movlw	0
  9559  0011B6  6E25               	movwf	MrSeparaFecha@MrAmPm,c
  9560  0011B8  D009               	goto	l4544
  9561  0011BA                     l4540:
  9562                           
  9563                           ; BSR set to: 0
  9564                           ;MemoryRoller29.c: 262: else {MrAmPm = 1; MrHora12 -= 12;}
  9565  0011BA  0E00               	movlw	0
  9566  0011BC  6E26               	movwf	MrSeparaFecha@MrAmPm+1,c
  9567  0011BE  0E01               	movlw	1
  9568  0011C0  6E25               	movwf	MrSeparaFecha@MrAmPm,c
  9569                           
  9570                           ; BSR set to: 0
  9571  0011C2  0E0C               	movlw	12
  9572  0011C4  0100               	movlb	0	; () banked
  9573  0011C6  5FF3               	subwf	_MrHora12& (0+255),f,b
  9574  0011C8  0E00               	movlw	0
  9575  0011CA  5BF4               	subwfb	(_MrHora12+1)& (0+255),f,b
  9576  0011CC                     l4544:
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;MemoryRoller29.c: 263: MrFecha12 = RtcFechaHora[0];
  9580  0011CC  0100               	movlb	0	; () banked
  9581  0011CE  51E8               	movf	_RtcFechaHora& (0+255),w,b
  9582  0011D0  6E3D               	movwf	_MrFecha12,c
  9583  0011D2  6A3E               	clrf	_MrFecha12+1,c
  9584  0011D4  6A3F               	clrf	_MrFecha12+2,c
  9585  0011D6  6A40               	clrf	_MrFecha12+3,c
  9586                           
  9587                           ;MemoryRoller29.c: 264: MrFecha12 = (MrFecha12<<8) + RtcFechaHora[1];
  9588  0011D8  0100               	movlb	0	; () banked
  9589  0011DA  51E9               	movf	(_RtcFechaHora+1)& (0+255),w,b
  9590  0011DC  C03D  F01A         	movff	_MrFecha12,??_MrSeparaFecha+1
  9591  0011E0  C03E  F01B         	movff	_MrFecha12+1,??_MrSeparaFecha+2
  9592  0011E4  C03F  F01C         	movff	_MrFecha12+2,??_MrSeparaFecha+3
  9593  0011E8  6A19               	clrf	??_MrSeparaFecha& (0+255),c
  9594  0011EA  2419               	addwf	??_MrSeparaFecha,w,c
  9595  0011EC  6E3D               	movwf	_MrFecha12,c
  9596  0011EE  0E00               	movlw	0
  9597  0011F0  201A               	addwfc	??_MrSeparaFecha+1,w,c
  9598  0011F2  6E3E               	movwf	_MrFecha12+1,c
  9599  0011F4  0E00               	movlw	0
  9600  0011F6  201B               	addwfc	??_MrSeparaFecha+2,w,c
  9601  0011F8  6E3F               	movwf	_MrFecha12+2,c
  9602  0011FA  0E00               	movlw	0
  9603  0011FC  201C               	addwfc	??_MrSeparaFecha+3,w,c
  9604  0011FE  6E40               	movwf	_MrFecha12+3,c
  9605                           
  9606                           ;MemoryRoller29.c: 265: MrFecha12 = (MrFecha12<<8) + (RtcFechaHora[2]<<1) + MrAmPm;
  9607  001200  90D8               	bcf	status,0,c
  9608  001202  0100               	movlb	0	; () banked
  9609  001204  35EA               	rlcf	(_RtcFechaHora+2)& (0+255),w,b
  9610  001206  6E19               	movwf	??_MrSeparaFecha& (0+255),c
  9611  001208  6A1A               	clrf	(??_MrSeparaFecha+1)& (0+255),c
  9612  00120A  361A               	rlcf	(??_MrSeparaFecha+1)& (0+255),f,c
  9613  00120C  6A1B               	clrf	(??_MrSeparaFecha+2)& (0+255),c
  9614  00120E  BE1A               	btfsc	(??_MrSeparaFecha+1)& (0+255),7,c
  9615  001210  061B               	decf	(??_MrSeparaFecha+2)& (0+255),f,c
  9616  001212  501B               	movf	(??_MrSeparaFecha+2)& (0+255),w,c
  9617  001214  6E1C               	movwf	(??_MrSeparaFecha+3)& (0+255),c
  9618  001216  C03D  F01E         	movff	_MrFecha12,??_MrSeparaFecha+5
  9619  00121A  C03E  F01F         	movff	_MrFecha12+1,??_MrSeparaFecha+6
  9620  00121E  C03F  F020         	movff	_MrFecha12+2,??_MrSeparaFecha+7
  9621  001222  6A1D               	clrf	(??_MrSeparaFecha+4)& (0+255),c
  9622  001224  5019               	movf	??_MrSeparaFecha,w,c
  9623  001226  241D               	addwf	??_MrSeparaFecha+4,w,c
  9624  001228  6E21               	movwf	(??_MrSeparaFecha+8)& (0+255),c
  9625  00122A  501A               	movf	??_MrSeparaFecha+1,w,c
  9626  00122C  201E               	addwfc	??_MrSeparaFecha+5,w,c
  9627  00122E  6E22               	movwf	(??_MrSeparaFecha+9)& (0+255),c
  9628  001230  501B               	movf	??_MrSeparaFecha+2,w,c
  9629  001232  201F               	addwfc	??_MrSeparaFecha+6,w,c
  9630  001234  6E23               	movwf	(??_MrSeparaFecha+10)& (0+255),c
  9631  001236  501C               	movf	??_MrSeparaFecha+3,w,c
  9632  001238  2020               	addwfc	??_MrSeparaFecha+7,w,c
  9633  00123A  6E24               	movwf	(??_MrSeparaFecha+11)& (0+255),c
  9634  00123C  5025               	movf	MrSeparaFecha@MrAmPm,w,c
  9635  00123E  2421               	addwf	??_MrSeparaFecha+8,w,c
  9636  001240  6E3D               	movwf	_MrFecha12,c
  9637  001242  5026               	movf	MrSeparaFecha@MrAmPm+1,w,c
  9638  001244  2022               	addwfc	??_MrSeparaFecha+9,w,c
  9639  001246  6E3E               	movwf	_MrFecha12+1,c
  9640  001248  0E00               	movlw	0
  9641  00124A  2023               	addwfc	??_MrSeparaFecha+10,w,c
  9642  00124C  6E3F               	movwf	_MrFecha12+2,c
  9643  00124E  0E00               	movlw	0
  9644  001250  2024               	addwfc	??_MrSeparaFecha+11,w,c
  9645  001252  6E40               	movwf	_MrFecha12+3,c
  9646                           
  9647                           ;MemoryRoller29.c: 266: MrHora12 = (( (MrHora12<<6)+RtcFechaHora[4] ) <<6) +RtcFechaHora
      +                          [5];
  9648  001254  C0F3  F019         	movff	_MrHora12,??_MrSeparaFecha
  9649  001258  C0F4  F01A         	movff	_MrHora12+1,??_MrSeparaFecha+1
  9650  00125C  0E06               	movlw	6
  9651  00125E                     u3045:
  9652  00125E  90D8               	bcf	status,0,c
  9653  001260  3619               	rlcf	??_MrSeparaFecha,f,c
  9654  001262  361A               	rlcf	??_MrSeparaFecha+1,f,c
  9655  001264  2EE8               	decfsz	wreg,f,c
  9656  001266  D7FB               	goto	u3045
  9657  001268  0100               	movlb	0	; () banked
  9658  00126A  51EC               	movf	(_RtcFechaHora+4)& (0+255),w,b
  9659  00126C  2619               	addwf	??_MrSeparaFecha,f,c
  9660  00126E  0E00               	movlw	0
  9661  001270  221A               	addwfc	??_MrSeparaFecha+1,f,c
  9662  001272  0E06               	movlw	6
  9663  001274                     u3055:
  9664  001274  90D8               	bcf	status,0,c
  9665  001276  3619               	rlcf	??_MrSeparaFecha,f,c
  9666  001278  361A               	rlcf	??_MrSeparaFecha+1,f,c
  9667  00127A  2EE8               	decfsz	wreg,f,c
  9668  00127C  D7FB               	goto	u3055
  9669  00127E  0100               	movlb	0	; () banked
  9670  001280  51ED               	movf	(_RtcFechaHora+5)& (0+255),w,b
  9671  001282  2419               	addwf	??_MrSeparaFecha,w,c
  9672  001284  0100               	movlb	0	; () banked
  9673  001286  6FF3               	movwf	_MrHora12& (0+255),b
  9674  001288  0100               	movlb	0	; () banked
  9675  00128A  0E00               	movlw	0
  9676  00128C  201A               	addwfc	??_MrSeparaFecha+1,w,c
  9677  00128E  0100               	movlb	0	; () banked
  9678  001290  6FF4               	movwf	(_MrHora12+1)& (0+255),b
  9679                           
  9680                           ; BSR set to: 0
  9681  001292  0012               	return		;funcret
  9682  001294                     __end_of_MrSeparaFecha:
  9683                           	opt stack 0
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodl	equ	0xFF3
  9689                           intcon	equ	0xFF2
  9690                           postinc0	equ	0xFEE
  9691                           wreg	equ	0xFE8
  9692                           postdec1	equ	0xFE5
  9693                           fsr1l	equ	0xFE1
  9694                           indf2	equ	0xFDF
  9695                           postinc2	equ	0xFDE
  9696                           postdec2	equ	0xFDD
  9697                           fsr2h	equ	0xFDA
  9698                           fsr2l	equ	0xFD9
  9699                           status	equ	0xFD8
  9700                           
  9701 ;; *************** function _LeeRAM *****************
  9702 ;; Defined at:
  9703 ;;		line 10 in file "RsComando14.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;  Dir             2   34[COMRAM] int 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      unsigned char 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9717 ;;      Params:         2       0       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9720 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:        2 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    6
  9724 ;; This function calls:
  9725 ;;		_memcpy
  9726 ;; This function is called by:
  9727 ;;		_MstRsComando
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           	psect	text59
  9732  002540                     __ptext59:
  9733                           	opt stack 0
  9734  002540                     _LeeRAM:
  9735                           	opt stack 21
  9736                           
  9737                           ;RsComando14.c: 11: Ptr1 = (void *) Dir;
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;incstack = 0
  9741  002540  C023  F0B0         	movff	LeeRAM@Dir,_Ptr1
  9742  002544  C024  F0B1         	movff	LeeRAM@Dir+1,_Ptr1+1
  9743                           
  9744                           ;RsComando14.c: 12: memcpy(&Car1, Ptr1, 1);
  9745  002548  0E45               	movlw	low _Car1
  9746  00254A  6E19               	movwf	memcpy@d1,c
  9747  00254C  0E00               	movlw	high _Car1
  9748  00254E  6E1A               	movwf	memcpy@d1+1,c
  9749  002550  C0B0  F01B         	movff	_Ptr1,memcpy@s1
  9750  002554  C0B1  F01C         	movff	_Ptr1+1,memcpy@s1+1
  9751  002558  0E00               	movlw	0
  9752  00255A  6E1E               	movwf	memcpy@n+1,c
  9753  00255C  0E01               	movlw	1
  9754  00255E  6E1D               	movwf	memcpy@n,c
  9755  002560  ECEB  F010         	call	_memcpy	;wreg free
  9756                           
  9757                           ;RsComando14.c: 13: return (Car1);
  9758  002564  5045               	movf	_Car1,w,c
  9759  002566  0012               	return	
  9760  002568                     __end_of_LeeRAM:
  9761                           	opt stack 0
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodl	equ	0xFF3
  9767                           intcon	equ	0xFF2
  9768                           postinc0	equ	0xFEE
  9769                           wreg	equ	0xFE8
  9770                           postdec1	equ	0xFE5
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _EscRAM *****************
  9780 ;; Defined at:
  9781 ;;		line 16 in file "RsComando14.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  Dir             2   34[COMRAM] int 
  9784 ;;  Car2P           2   36[COMRAM] PTR void 
  9785 ;;		 -> RsRxBuffer(30), 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9797 ;;      Params:         4       0       0       0       0       0       0       0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9800 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9801 ;;Total ram usage:        4 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    6
  9804 ;; This function calls:
  9805 ;;		_memcpy
  9806 ;; This function is called by:
  9807 ;;		_MstRsComando
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text60
  9812  0025B4                     __ptext60:
  9813                           	opt stack 0
  9814  0025B4                     _EscRAM:
  9815                           	opt stack 21
  9816                           
  9817                           ;RsComando14.c: 17: Ptr1 = (void *) Dir;
  9818                           
  9819                           ;incstack = 0
  9820  0025B4  C023  F0B0         	movff	EscRAM@Dir,_Ptr1
  9821  0025B8  C024  F0B1         	movff	EscRAM@Dir+1,_Ptr1+1
  9822                           
  9823                           ;RsComando14.c: 19: memcpy(Ptr1, Car2P, 1);
  9824  0025BC  C0B0  F019         	movff	_Ptr1,memcpy@d1
  9825  0025C0  C0B1  F01A         	movff	_Ptr1+1,memcpy@d1+1
  9826  0025C4  C025  F01B         	movff	EscRAM@Car2P,memcpy@s1
  9827  0025C8  C026  F01C         	movff	EscRAM@Car2P+1,memcpy@s1+1
  9828  0025CC  0E00               	movlw	0
  9829  0025CE  6E1E               	movwf	memcpy@n+1,c
  9830  0025D0  0E01               	movlw	1
  9831  0025D2  6E1D               	movwf	memcpy@n,c
  9832  0025D4  ECEB  F010         	call	_memcpy	;wreg free
  9833  0025D8  0012               	return	
  9834  0025DA                     __end_of_EscRAM:
  9835                           	opt stack 0
  9836                           tblptru	equ	0xFF8
  9837                           tblptrh	equ	0xFF7
  9838                           tblptrl	equ	0xFF6
  9839                           tablat	equ	0xFF5
  9840                           prodl	equ	0xFF3
  9841                           intcon	equ	0xFF2
  9842                           postinc0	equ	0xFEE
  9843                           wreg	equ	0xFE8
  9844                           postdec1	equ	0xFE5
  9845                           fsr1l	equ	0xFE1
  9846                           indf2	equ	0xFDF
  9847                           postinc2	equ	0xFDE
  9848                           postdec2	equ	0xFDD
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function _memcpy *****************
  9854 ;; Defined at:
  9855 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  d1              2   24[COMRAM] PTR void 
  9858 ;;		 -> NULL(0), MrDirV(2), MrRegAux(13), MrReg(13), 
  9859 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), Car1(1), RAM(2047), 
  9860 ;;		 -> RsTxBuffer(30), 
  9861 ;;  s1              2   26[COMRAM] PTR const void 
  9862 ;;		 -> NULL(0), MIOAdcAct(10), MIOAdcLeido(10), MrHora12(2), 
  9863 ;;		 -> MrFecha12(4), MrDirV(2), MrUltV(2), MrReg(13), 
  9864 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), RAM(2047), RsRxBuffer(30), 
  9865 ;;  n               2   28[COMRAM] unsigned int 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  s               2   32[COMRAM] PTR const unsigned char 
  9868 ;;		 -> NULL(0), MIOAdcAct(10), MIOAdcLeido(10), MrHora12(2), 
  9869 ;;		 -> MrFecha12(4), MrDirV(2), MrUltV(2), MrReg(13), 
  9870 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), RAM(2047), RsRxBuffer(30), 
  9871 ;;  d               2   30[COMRAM] PTR unsigned char 
  9872 ;;		 -> NULL(0), MrDirV(2), MrRegAux(13), MrReg(13), 
  9873 ;;		 -> MrFecha12Ult(4), RtcFechaHora(7), Car1(1), RAM(2047), 
  9874 ;;		 -> RsTxBuffer(30), 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  2   24[COMRAM] PTR void 
  9877 ;; Registers used:
  9878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9884 ;;      Params:         6       0       0       0       0       0       0       0       0
  9885 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9887 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9888 ;;Total ram usage:       10 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    5
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_LeeRAM
  9895 ;;		_EscRAM
  9896 ;;		_MrInit
  9897 ;;		_MrAgregaReg
  9898 ;;		__MrPreparaFecha
  9899 ;;		_Ppal_RsComando
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           	psect	text61
  9904  0021D6                     __ptext61:
  9905                           	opt stack 0
  9906  0021D6                     _memcpy:
  9907                           	opt stack 22
  9908                           
  9909                           ;incstack = 0
  9910  0021D6  C01B  F021         	movff	memcpy@s1,memcpy@s
  9911  0021DA  C01C  F022         	movff	memcpy@s1+1,memcpy@s+1
  9912  0021DE  C019  F01F         	movff	memcpy@d1,memcpy@d
  9913  0021E2  C01A  F020         	movff	memcpy@d1+1,memcpy@d+1
  9914  0021E6  D00E               	goto	l4316
  9915  0021E8                     l4310:
  9916  0021E8  C021  FFD9         	movff	memcpy@s,fsr2l
  9917  0021EC  C022  FFDA         	movff	memcpy@s+1,fsr2h
  9918  0021F0  C01F  FFE1         	movff	memcpy@d,fsr1l
  9919  0021F4  C020  FFE2         	movff	memcpy@d+1,fsr1h
  9920  0021F8  CFDF FFE7          	movff	indf2,indf1
  9921  0021FC  4A21               	infsnz	memcpy@s,f,c
  9922  0021FE  2A22               	incf	memcpy@s+1,f,c
  9923  002200  4A1F               	infsnz	memcpy@d,f,c
  9924  002202  2A20               	incf	memcpy@d+1,f,c
  9925  002204                     l4316:
  9926  002204  061D               	decf	memcpy@n,f,c
  9927  002206  A0D8               	btfss	status,0,c
  9928  002208  061E               	decf	memcpy@n+1,f,c
  9929  00220A  281D               	incf	memcpy@n,w,c
  9930  00220C  E1ED               	bnz	l4310
  9931  00220E  281E               	incf	memcpy@n+1,w,c
  9932  002210  B4D8               	btfsc	status,2,c
  9933  002212  0012               	return	
  9934  002214  D7E9               	goto	l4310
  9935  002216                     __end_of_memcpy:
  9936                           	opt stack 0
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           postinc0	equ	0xFEE
  9944                           wreg	equ	0xFE8
  9945                           indf1	equ	0xFE7
  9946                           postdec1	equ	0xFE5
  9947                           fsr1h	equ	0xFE2
  9948                           fsr1l	equ	0xFE1
  9949                           indf2	equ	0xFDF
  9950                           postinc2	equ	0xFDE
  9951                           postdec2	equ	0xFDD
  9952                           fsr2h	equ	0xFDA
  9953                           fsr2l	equ	0xFD9
  9954                           status	equ	0xFD8
  9955                           
  9956 ;; *************** function _Interr *****************
  9957 ;; Defined at:
  9958 ;;		line 378 in file "ModIO24.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;		None
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;		None
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9972 ;;      Params:         0       0       0       0       0       0       0       0       0
  9973 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9974 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9975 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9976 ;;Total ram usage:       14 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    4
  9979 ;; This function calls:
  9980 ;;		_MstInterr
  9981 ;;		_Ppal_Interr
  9982 ;; This function is called by:
  9983 ;;		Interrupt level 2
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           	psect	intcode
  9988  000008                     __pintcode:
  9989                           	opt stack 0
  9990  000008                     _Interr:
  9991                           	opt stack 17
  9992                           
  9993                           ;incstack = 0
  9994  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9995  00000A  CFFA F00B          	movff	pclath,??_Interr
  9996  00000E  CFFB F00C          	movff	pclatu,??_Interr+1
  9997  000012  CFE9 F00D          	movff	fsr0l,??_Interr+2
  9998  000016  CFEA F00E          	movff	fsr0h,??_Interr+3
  9999  00001A  CFE1 F00F          	movff	fsr1l,??_Interr+4
 10000  00001E  CFE2 F010          	movff	fsr1h,??_Interr+5
 10001  000022  CFD9 F011          	movff	fsr2l,??_Interr+6
 10002  000026  CFDA F012          	movff	fsr2h,??_Interr+7
 10003  00002A  CFF3 F013          	movff	prodl,??_Interr+8
 10004  00002E  CFF4 F014          	movff	prodh,??_Interr+9
 10005  000032  CFF6 F015          	movff	tblptrl,??_Interr+10
 10006  000036  CFF7 F016          	movff	tblptrh,??_Interr+11
 10007  00003A  CFF8 F017          	movff	tblptru,??_Interr+12
 10008  00003E  CFF5 F018          	movff	tablat,??_Interr+13
 10009                           
 10010                           ;ModIO24.c: 379: TMR2IF = 0;
 10011  000042  929E               	bcf	3998,1,c	;volatile
 10012                           
 10013                           ;ModIO24.c: 381: MstInterr();
 10014  000044  EC6D  F013         	call	_MstInterr	;wreg free
 10015                           
 10016                           ;ModIO24.c: 382: if (MstPpEjecutaF == 1) {
 10017  000048  0100               	movlb	0	; () banked
 10018  00004A  05FF               	decf	_MstPpEjecutaF& (0+255),w,b
 10019  00004C  A4D8               	btfss	status,2,c
 10020  00004E  D004               	goto	i2l613
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;ModIO24.c: 383: if (MstPpInicializadoF == 1) {
 10024  000050  042F               	decf	_MstPpInicializadoF,w,c
 10025  000052  B4D8               	btfsc	status,2,c
 10026                           
 10027                           ; BSR set to: 0
 10028                           ;ModIO24.c: 384: Ppal_Interr();
 10029  000054  EC54  F013         	call	_Ppal_Interr	;wreg free
 10030  000058                     i2l613:
 10031  000058  C018  FFF5         	movff	??_Interr+13,tablat
 10032  00005C  C017  FFF8         	movff	??_Interr+12,tblptru
 10033  000060  C016  FFF7         	movff	??_Interr+11,tblptrh
 10034  000064  C015  FFF6         	movff	??_Interr+10,tblptrl
 10035  000068  C014  FFF4         	movff	??_Interr+9,prodh
 10036  00006C  C013  FFF3         	movff	??_Interr+8,prodl
 10037  000070  C012  FFDA         	movff	??_Interr+7,fsr2h
 10038  000074  C011  FFD9         	movff	??_Interr+6,fsr2l
 10039  000078  C010  FFE2         	movff	??_Interr+5,fsr1h
 10040  00007C  C00F  FFE1         	movff	??_Interr+4,fsr1l
 10041  000080  C00E  FFEA         	movff	??_Interr+3,fsr0h
 10042  000084  C00D  FFE9         	movff	??_Interr+2,fsr0l
 10043  000088  C00C  FFFB         	movff	??_Interr+1,pclatu
 10044  00008C  C00B  FFFA         	movff	??_Interr,pclath
 10045  000090  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10046  000092  0011               	retfie		f
 10047  000094                     __end_of_Interr:
 10048                           	opt stack 0
 10049                           pclatu	equ	0xFFB
 10050                           pclath	equ	0xFFA
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           postinc0	equ	0xFEE
 10059                           fsr0h	equ	0xFEA
 10060                           fsr0l	equ	0xFE9
 10061                           wreg	equ	0xFE8
 10062                           indf1	equ	0xFE7
 10063                           postdec1	equ	0xFE5
 10064                           fsr1h	equ	0xFE2
 10065                           fsr1l	equ	0xFE1
 10066                           indf2	equ	0xFDF
 10067                           postinc2	equ	0xFDE
 10068                           postdec2	equ	0xFDD
 10069                           fsr2h	equ	0xFDA
 10070                           fsr2l	equ	0xFD9
 10071                           status	equ	0xFD8
 10072                           
 10073 ;; *************** function _Ppal_Interr *****************
 10074 ;; Defined at:
 10075 ;;		line 133 in file "ModIO24.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;		None
 10078 ;; Auto vars:     Size  Location     Type
 10079 ;;		None
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  1    wreg      void 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10089 ;;      Params:         0       0       0       0       0       0       0       0       0
 10090 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10091 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10092 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10093 ;;Total ram usage:        0 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    2
 10096 ;; This function calls:
 10097 ;;		_LedAmarilloInterr
 10098 ;;		_MioInterr
 10099 ;;		_Tpo_interr
 10100 ;; This function is called by:
 10101 ;;		_Interr
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text63
 10106  0026A8                     __ptext63:
 10107                           	opt stack 0
 10108  0026A8                     _Ppal_Interr:
 10109                           	opt stack 18
 10110                           
 10111                           ;ModIO24.c: 139: MioInterr();
 10112                           
 10113                           ;incstack = 0
 10114  0026A8  EC35  F010         	call	_MioInterr	;wreg free
 10115                           
 10116                           ;ModIO24.c: 143: Tpo_interr();
 10117  0026AC  EC38  F012         	call	_Tpo_interr	;wreg free
 10118                           
 10119                           ;ModIO24.c: 145: LedAmarilloInterr();
 10120  0026B0  EC0B  F011         	call	_LedAmarilloInterr	;wreg free
 10121  0026B4  0012               	return		;funcret
 10122  0026B6                     __end_of_Ppal_Interr:
 10123                           	opt stack 0
 10124                           pclatu	equ	0xFFB
 10125                           pclath	equ	0xFFA
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon	equ	0xFF2
 10133                           postinc0	equ	0xFEE
 10134                           fsr0h	equ	0xFEA
 10135                           fsr0l	equ	0xFE9
 10136                           wreg	equ	0xFE8
 10137                           indf1	equ	0xFE7
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _Tpo_interr *****************
 10149 ;; Defined at:
 10150 ;;		line 30 in file "RutinaTpo20.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10167 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10168 ;;Total ram usage:        0 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_Ppal_Interr
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text64
 10178  002470                     __ptext64:
 10179                           	opt stack 0
 10180  002470                     _Tpo_interr:
 10181                           	opt stack 19
 10182                           
 10183                           ;RutinaTpo20.c: 32: TpoMsCont++;
 10184                           
 10185                           ;incstack = 0
 10186  002470  0100               	movlb	0	; () banked
 10187  002472  4B9E               	infsnz	_TpoMsCont& (0+255),f,b
 10188  002474  2B9F               	incf	(_TpoMsCont+1)& (0+255),f,b
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;RutinaTpo20.c: 34: if (TpoMsCont >= 50) {
 10192  002476  0100               	movlb	0	; () banked
 10193  002478  519F               	movf	(_TpoMsCont+1)& (0+255),w,b
 10194  00247A  E105               	bnz	i2u256_40
 10195  00247C  0E32               	movlw	50
 10196  00247E  0100               	movlb	0	; () banked
 10197  002480  5D9E               	subwf	_TpoMsCont& (0+255),w,b
 10198  002482  A0D8               	btfss	status,0,c
 10199  002484  0012               	return	
 10200  002486                     i2u256_40:
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;RutinaTpo20.c: 35: TpoMsCont = 0;
 10204  002486  0E00               	movlw	0
 10205  002488  0100               	movlb	0	; () banked
 10206  00248A  6F9F               	movwf	(_TpoMsCont+1)& (0+255),b
 10207  00248C  0E00               	movlw	0
 10208  00248E  6F9E               	movwf	_TpoMsCont& (0+255),b
 10209                           
 10210                           ;RutinaTpo20.c: 36: Tpo50msF = 1;
 10211  002490  0E00               	movlw	0
 10212  002492  0100               	movlb	0	; () banked
 10213  002494  6F9D               	movwf	(_Tpo50msF+1)& (0+255),b
 10214  002496  0E01               	movlw	1
 10215  002498  6F9C               	movwf	_Tpo50msF& (0+255),b
 10216  00249A  0012               	return	
 10217  00249C                     __end_of_Tpo_interr:
 10218                           	opt stack 0
 10219                           pclatu	equ	0xFFB
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           postinc0	equ	0xFEE
 10229                           fsr0h	equ	0xFEA
 10230                           fsr0l	equ	0xFE9
 10231                           wreg	equ	0xFE8
 10232                           indf1	equ	0xFE7
 10233                           postdec1	equ	0xFE5
 10234                           fsr1h	equ	0xFE2
 10235                           fsr1l	equ	0xFE1
 10236                           indf2	equ	0xFDF
 10237                           postinc2	equ	0xFDE
 10238                           postdec2	equ	0xFDD
 10239                           fsr2h	equ	0xFDA
 10240                           fsr2l	equ	0xFD9
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function _MioInterr *****************
 10244 ;; Defined at:
 10245 ;;		line 84 in file "RutinaModIO15.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  1    wreg      void 
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10259 ;;      Params:         0       0       0       0       0       0       0       0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10261 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10262 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10263 ;;Total ram usage:        0 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    1
 10266 ;; This function calls:
 10267 ;;		_ADC_Lee
 10268 ;; This function is called by:
 10269 ;;		_Ppal_Interr
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text65
 10274  00206A                     __ptext65:
 10275                           	opt stack 0
 10276  00206A                     _MioInterr:
 10277                           	opt stack 18
 10278                           
 10279                           ;RutinaModIO15.c: 90: MIOAdcLeido[0] = ADC_Lee(0);
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;incstack = 0
 10283  00206A  0E00               	movlw	0
 10284  00206C  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10285  00206E  0E00               	movlw	0
 10286  002070  6E01               	movwf	ADC_Lee@AdcCanal,c
 10287  002072  EC5E  F010         	call	_ADC_Lee	;wreg free
 10288  002076  C001  F0DE         	movff	?_ADC_Lee,_MIOAdcLeido
 10289  00207A  C002  F0DF         	movff	?_ADC_Lee+1,_MIOAdcLeido+1
 10290                           
 10291                           ;RutinaModIO15.c: 91: MIOAdcLeido[1] = ADC_Lee(1);
 10292  00207E  0E00               	movlw	0
 10293  002080  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10294  002082  0E01               	movlw	1
 10295  002084  6E01               	movwf	ADC_Lee@AdcCanal,c
 10296  002086  EC5E  F010         	call	_ADC_Lee	;wreg free
 10297  00208A  C001  F0E0         	movff	?_ADC_Lee,_MIOAdcLeido+2
 10298  00208E  C002  F0E1         	movff	?_ADC_Lee+1,_MIOAdcLeido+3
 10299                           
 10300                           ;RutinaModIO15.c: 92: MIOAdcLeido[2] = ADC_Lee(2);
 10301  002092  0E00               	movlw	0
 10302  002094  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10303  002096  0E02               	movlw	2
 10304  002098  6E01               	movwf	ADC_Lee@AdcCanal,c
 10305  00209A  EC5E  F010         	call	_ADC_Lee	;wreg free
 10306  00209E  C001  F0E2         	movff	?_ADC_Lee,_MIOAdcLeido+4
 10307  0020A2  C002  F0E3         	movff	?_ADC_Lee+1,_MIOAdcLeido+5
 10308                           
 10309                           ;RutinaModIO15.c: 94: MIOAdcLeido[3] = ADC_Lee(4);
 10310  0020A6  0E00               	movlw	0
 10311  0020A8  6E02               	movwf	ADC_Lee@AdcCanal+1,c
 10312  0020AA  0E04               	movlw	4
 10313  0020AC  6E01               	movwf	ADC_Lee@AdcCanal,c
 10314  0020AE  EC5E  F010         	call	_ADC_Lee	;wreg free
 10315  0020B2  C001  F0E4         	movff	?_ADC_Lee,_MIOAdcLeido+6
 10316  0020B6  C002  F0E5         	movff	?_ADC_Lee+1,_MIOAdcLeido+7
 10317  0020BA  0012               	return		;funcret
 10318  0020BC                     __end_of_MioInterr:
 10319                           	opt stack 0
 10320                           pclatu	equ	0xFFB
 10321                           pclath	equ	0xFFA
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           postinc0	equ	0xFEE
 10330                           fsr0h	equ	0xFEA
 10331                           fsr0l	equ	0xFE9
 10332                           wreg	equ	0xFE8
 10333                           indf1	equ	0xFE7
 10334                           postdec1	equ	0xFE5
 10335                           fsr1h	equ	0xFE2
 10336                           fsr1l	equ	0xFE1
 10337                           indf2	equ	0xFDF
 10338                           postinc2	equ	0xFDE
 10339                           postdec2	equ	0xFDD
 10340                           fsr2h	equ	0xFDA
 10341                           fsr2l	equ	0xFD9
 10342                           status	equ	0xFD8
 10343                           
 10344 ;; *************** function _ADC_Lee *****************
 10345 ;; Defined at:
 10346 ;;		line 19 in file "ADC30.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;  AdcCanal        2    0[COMRAM] short 
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;  ind             2    4[COMRAM] short 
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  2    0[COMRAM] int 
 10353 ;; Registers used:
 10354 ;;		wreg, status,2, status,0
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10360 ;;      Params:         2       0       0       0       0       0       0       0       0
 10361 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10362 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10363 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10364 ;;Total ram usage:        6 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; This function calls:
 10367 ;;		Nothing
 10368 ;; This function is called by:
 10369 ;;		_MioInterr
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text66
 10374  0020BC                     __ptext66:
 10375                           	opt stack 0
 10376  0020BC                     _ADC_Lee:
 10377                           	opt stack 18
 10378                           
 10379                           ;ADC30.c: 20: short ind;
 10380                           ;ADC30.c: 22: ADCON0 = 1+(AdcCanal << 2);
 10381                           
 10382                           ;incstack = 0
 10383  0020BC  C001  F003         	movff	ADC_Lee@AdcCanal,??_ADC_Lee
 10384  0020C0  90D8               	bcf	status,0,c
 10385  0020C2  3603               	rlcf	??_ADC_Lee,f,c
 10386  0020C4  90D8               	bcf	status,0,c
 10387  0020C6  3603               	rlcf	??_ADC_Lee,f,c
 10388  0020C8  2803               	incf	??_ADC_Lee,w,c
 10389  0020CA  6EC2               	movwf	4034,c	;volatile
 10390                           
 10391                           ;ADC30.c: 23: _delay((unsigned long)((3)*(8000000/4000000.0)));
 10392  0020CC  D000               	nop2		;2 cycle nop
 10393  0020CE  D000               	nop2		;2 cycle nop
 10394  0020D0  D000               	nop2		;2 cycle nop
 10395                           
 10396                           ;ADC30.c: 24: GO = 1;
 10397  0020D2  82C2               	bsf	4034,1,c	;volatile
 10398                           
 10399                           ;ADC30.c: 25: for (ind = 0; ind <= 60; ind++) {
 10400  0020D4  0E00               	movlw	0
 10401  0020D6  6E06               	movwf	ADC_Lee@ind+1,c
 10402  0020D8  0E00               	movlw	0
 10403  0020DA  6E05               	movwf	ADC_Lee@ind,c
 10404  0020DC                     i2l3858:
 10405  0020DC  BE06               	btfsc	ADC_Lee@ind+1,7,c
 10406  0020DE  D006               	goto	i2l515
 10407  0020E0  5006               	movf	ADC_Lee@ind+1,w,c
 10408  0020E2  E109               	bnz	i2l3868
 10409  0020E4  0E3D               	movlw	61
 10410  0020E6  5C05               	subwf	ADC_Lee@ind,w,c
 10411  0020E8  B0D8               	btfsc	status,0,c
 10412  0020EA  D005               	goto	i2l3868
 10413  0020EC                     i2l515:
 10414                           
 10415                           ;ADC30.c: 26: if (GO == 0) {break;}
 10416  0020EC  A2C2               	btfss	4034,1,c	;volatile
 10417  0020EE  D003               	goto	i2l3868
 10418  0020F0  4A05               	infsnz	ADC_Lee@ind,f,c
 10419  0020F2  2A06               	incf	ADC_Lee@ind+1,f,c
 10420  0020F4  D7F3               	goto	i2l3858
 10421  0020F6                     i2l3868:
 10422                           
 10423                           ;ADC30.c: 27: }
 10424                           ;ADC30.c: 28: return ( (ADRESH * 256) + ADRESL );
 10425  0020F6  50C4               	movf	4036,w,c	;volatile
 10426  0020F8  6E04               	movwf	(??_ADC_Lee+1)& (0+255),c
 10427  0020FA  6A03               	clrf	??_ADC_Lee& (0+255),c
 10428  0020FC  50C3               	movf	4035,w,c	;volatile
 10429  0020FE  2403               	addwf	??_ADC_Lee,w,c
 10430  002100  6E01               	movwf	?_ADC_Lee,c
 10431  002102  0E00               	movlw	0
 10432  002104  2004               	addwfc	??_ADC_Lee+1,w,c
 10433  002106  6E02               	movwf	?_ADC_Lee+1,c
 10434  002108  0012               	return	
 10435  00210A                     __end_of_ADC_Lee:
 10436                           	opt stack 0
 10437                           pclatu	equ	0xFFB
 10438                           pclath	equ	0xFFA
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           intcon	equ	0xFF2
 10446                           postinc0	equ	0xFEE
 10447                           fsr0h	equ	0xFEA
 10448                           fsr0l	equ	0xFE9
 10449                           wreg	equ	0xFE8
 10450                           indf1	equ	0xFE7
 10451                           postdec1	equ	0xFE5
 10452                           fsr1h	equ	0xFE2
 10453                           fsr1l	equ	0xFE1
 10454                           indf2	equ	0xFDF
 10455                           postinc2	equ	0xFDE
 10456                           postdec2	equ	0xFDD
 10457                           fsr2h	equ	0xFDA
 10458                           fsr2l	equ	0xFD9
 10459                           status	equ	0xFD8
 10460                           
 10461 ;; *************** function _MstInterr *****************
 10462 ;; Defined at:
 10463 ;;		line 18 in file "Maestro21.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;		None
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      void 
 10470 ;; Registers used:
 10471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10477 ;;      Params:         0       0       0       0       0       0       0       0       0
 10478 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10479 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10480 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10481 ;;Total ram usage:        0 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    3
 10484 ;; This function calls:
 10485 ;;		_IntDelay_ms
 10486 ;;		_IntLedParpadea
 10487 ;;		_LedAmarilloInterr
 10488 ;;		_RsInterr
 10489 ;; This function is called by:
 10490 ;;		_Interr
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text67
 10495  0026DA                     __ptext67:
 10496                           	opt stack 0
 10497  0026DA                     _MstInterr:
 10498                           	opt stack 17
 10499                           
 10500                           ;Maestro21.c: 19: RsInterr ();
 10501                           
 10502                           ;incstack = 0
 10503  0026DA  EC60  F013         	call	_RsInterr	;wreg free
 10504                           
 10505                           ;Maestro21.c: 21: if (0) {
 10506  0026DE  0012               	return	
 10507  0026E0                     __end_of_MstInterr:
 10508                           	opt stack 0
 10509                           pclatu	equ	0xFFB
 10510                           pclath	equ	0xFFA
 10511                           tblptru	equ	0xFF8
 10512                           tblptrh	equ	0xFF7
 10513                           tblptrl	equ	0xFF6
 10514                           tablat	equ	0xFF5
 10515                           prodh	equ	0xFF4
 10516                           prodl	equ	0xFF3
 10517                           intcon	equ	0xFF2
 10518                           postinc0	equ	0xFEE
 10519                           fsr0h	equ	0xFEA
 10520                           fsr0l	equ	0xFE9
 10521                           wreg	equ	0xFE8
 10522                           indf1	equ	0xFE7
 10523                           postdec1	equ	0xFE5
 10524                           fsr1h	equ	0xFE2
 10525                           fsr1l	equ	0xFE1
 10526                           indf2	equ	0xFDF
 10527                           postinc2	equ	0xFDE
 10528                           postdec2	equ	0xFDD
 10529                           fsr2h	equ	0xFDA
 10530                           fsr2l	equ	0xFD9
 10531                           status	equ	0xFD8
 10532                           
 10533 ;; *************** function _RsInterr *****************
 10534 ;; Defined at:
 10535 ;;		line 156 in file "RedSerie13.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;		None
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      void 
 10542 ;; Registers used:
 10543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10549 ;;      Params:         0       0       0       0       0       0       0       0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10552 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10553 ;;Total ram usage:        0 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    2
 10556 ;; This function calls:
 10557 ;;		_PsRxInterrupt
 10558 ;;		_PsTxInterrupt
 10559 ;; This function is called by:
 10560 ;;		_MstInterr
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           	psect	text68
 10565  0026C0                     __ptext68:
 10566                           	opt stack 0
 10567  0026C0                     _RsInterr:
 10568                           	opt stack 17
 10569                           
 10570                           ;RedSerie13.c: 157: PsRxInterrupt ();
 10571                           
 10572                           ;incstack = 0
 10573  0026C0  EC4A  F009         	call	_PsRxInterrupt	;wreg free
 10574                           
 10575                           ;RedSerie13.c: 158: PsTxInterrupt ();
 10576  0026C4  EC8F  F00C         	call	_PsTxInterrupt	;wreg free
 10577  0026C8  0012               	return		;funcret
 10578  0026CA                     __end_of_RsInterr:
 10579                           	opt stack 0
 10580                           pclatu	equ	0xFFB
 10581                           pclath	equ	0xFFA
 10582                           tblptru	equ	0xFF8
 10583                           tblptrh	equ	0xFF7
 10584                           tblptrl	equ	0xFF6
 10585                           tablat	equ	0xFF5
 10586                           prodh	equ	0xFF4
 10587                           prodl	equ	0xFF3
 10588                           intcon	equ	0xFF2
 10589                           postinc0	equ	0xFEE
 10590                           fsr0h	equ	0xFEA
 10591                           fsr0l	equ	0xFE9
 10592                           wreg	equ	0xFE8
 10593                           indf1	equ	0xFE7
 10594                           postdec1	equ	0xFE5
 10595                           fsr1h	equ	0xFE2
 10596                           fsr1l	equ	0xFE1
 10597                           indf2	equ	0xFDF
 10598                           postinc2	equ	0xFDE
 10599                           postdec2	equ	0xFDD
 10600                           fsr2h	equ	0xFDA
 10601                           fsr2l	equ	0xFD9
 10602                           status	equ	0xFD8
 10603                           
 10604 ;; *************** function _PsTxInterrupt *****************
 10605 ;; Defined at:
 10606 ;;		line 131 in file "RedSerie13.c"
 10607 ;; Parameters:    Size  Location     Type
 10608 ;;		None
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;		None
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  1    wreg      void 
 10613 ;; Registers used:
 10614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10620 ;;      Params:         0       0       0       0       0       0       0       0       0
 10621 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10622 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10623 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10624 ;;Total ram usage:        1 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    1
 10627 ;; This function calls:
 10628 ;;		_PsTxEnviaCar
 10629 ;; This function is called by:
 10630 ;;		_RsInterr
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text69
 10635  00191E                     __ptext69:
 10636                           	opt stack 0
 10637  00191E                     _PsTxInterrupt:
 10638                           	opt stack 17
 10639                           
 10640                           ;RedSerie13.c: 132: if ( (!RsTxTransmitiendoF) || (!TXIF) ) {return;}
 10641                           
 10642                           ;incstack = 0
 10643  00191E  0100               	movlb	0	; () banked
 10644  001920  51BC               	movf	_RsTxTransmitiendoF& (0+255),w,b
 10645  001922  0100               	movlb	0	; () banked
 10646  001924  11BD               	iorwf	(_RsTxTransmitiendoF+1)& (0+255),w,b
 10647  001926  B4D8               	btfsc	status,2,c
 10648  001928  0012               	return	
 10649                           
 10650                           ; BSR set to: 0
 10651  00192A  A89E               	btfss	3998,4,c	;volatile
 10652  00192C  0012               	return	
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;RedSerie13.c: 135: if (RsTxIndex < 0) {PsTxEnviaCar(254); RsTxIndex ++;}
 10656                           
 10657                           ; BSR set to: 0
 10658                           
 10659                           ; BSR set to: 0
 10660  00192E  0100               	movlb	0	; () banked
 10661  001930  AFC5               	btfss	(_RsTxIndex+1)& (0+255),7,b
 10662  001932  D007               	goto	i2l3700
 10663                           
 10664                           ; BSR set to: 0
 10665  001934  0EFE               	movlw	254
 10666  001936  EC69  F013         	call	_PsTxEnviaCar
 10667  00193A  0100               	movlb	0	; () banked
 10668  00193C  4BC4               	infsnz	_RsTxIndex& (0+255),f,b
 10669  00193E  2BC5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10670  001940  0012               	return	
 10671  001942                     i2l3700:
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;RedSerie13.c: 136: else if (RsTxIndex <= RsTxBufferLen) {
 10675  001942  0100               	movlb	0	; () banked
 10676  001944  51C4               	movf	_RsTxIndex& (0+255),w,b
 10677  001946  0100               	movlb	0	; () banked
 10678  001948  5DC8               	subwf	_RsTxBufferLen& (0+255),w,b
 10679  00194A  0100               	movlb	0	; () banked
 10680  00194C  51C9               	movf	(_RsTxBufferLen+1)& (0+255),w,b
 10681  00194E  0A80               	xorlw	128
 10682  001950  6E02               	movwf	??_PsTxInterrupt& (0+255),c
 10683  001952  0100               	movlb	0	; () banked
 10684  001954  51C5               	movf	(_RsTxIndex+1)& (0+255),w,b
 10685  001956  0A80               	xorlw	128
 10686  001958  5802               	subwfb	??_PsTxInterrupt& (0+255),w,c
 10687  00195A  A0D8               	btfss	status,0,c
 10688  00195C  D030               	goto	i2l3722
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;RedSerie13.c: 137: RsTxCar = RsTxBuffer[RsTxIndex];
 10692  00195E  0E30               	movlw	low _RsTxBuffer
 10693  001960  0100               	movlb	0	; () banked
 10694  001962  25C4               	addwf	_RsTxIndex& (0+255),w,b
 10695  001964  6ED9               	movwf	fsr2l,c
 10696  001966  0E01               	movlw	high _RsTxBuffer
 10697  001968  0100               	movlb	0	; () banked
 10698  00196A  21C5               	addwfc	(_RsTxIndex+1)& (0+255),w,b
 10699  00196C  6EDA               	movwf	fsr2h,c
 10700  00196E  50DF               	movf	indf2,w,c
 10701  001970  6E31               	movwf	_RsTxCar,c
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;RedSerie13.c: 138: if (RsTxCar >= 250) {
 10705  001972  0EF9               	movlw	249
 10706  001974  6431               	cpfsgt	_RsTxCar,c
 10707  001976  D01C               	goto	i2l3718
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;RedSerie13.c: 139: if (!RsTxCarDobleF) {
 10711  001978  0100               	movlb	0	; () banked
 10712  00197A  51BA               	movf	_RsTxCarDobleF& (0+255),w,b
 10713  00197C  0100               	movlb	0	; () banked
 10714  00197E  11BB               	iorwf	(_RsTxCarDobleF+1)& (0+255),w,b
 10715  001980  A4D8               	btfss	status,2,c
 10716  001982  D009               	goto	i2l3712
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;RedSerie13.c: 140: PsTxEnviaCar (250);
 10720  001984  0EFA               	movlw	250
 10721  001986  EC69  F013         	call	_PsTxEnviaCar
 10722                           
 10723                           ;RedSerie13.c: 141: RsTxCarDobleF = 1;
 10724  00198A  0E00               	movlw	0
 10725  00198C  0100               	movlb	0	; () banked
 10726  00198E  6FBB               	movwf	(_RsTxCarDobleF+1)& (0+255),b
 10727  001990  0E01               	movlw	1
 10728  001992  6FBA               	movwf	_RsTxCarDobleF& (0+255),b
 10729                           
 10730                           ;RedSerie13.c: 142: }
 10731  001994  0012               	return	
 10732  001996                     i2l3712:
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;RedSerie13.c: 143: else{
 10736                           ;RedSerie13.c: 144: PsTxEnviaCar(RsTxCar - 250);
 10737  001996  5031               	movf	_RsTxCar,w,c
 10738  001998  0F06               	addlw	6
 10739  00199A  EC69  F013         	call	_PsTxEnviaCar
 10740                           
 10741                           ;RedSerie13.c: 145: RsTxCarDobleF = 0;
 10742  00199E  0E00               	movlw	0
 10743  0019A0  0100               	movlb	0	; () banked
 10744  0019A2  6FBB               	movwf	(_RsTxCarDobleF+1)& (0+255),b
 10745  0019A4  0E00               	movlw	0
 10746  0019A6  6FBA               	movwf	_RsTxCarDobleF& (0+255),b
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;RedSerie13.c: 146: RsTxIndex++;
 10750  0019A8  0100               	movlb	0	; () banked
 10751  0019AA  4BC4               	infsnz	_RsTxIndex& (0+255),f,b
 10752  0019AC  2BC5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;RedSerie13.c: 147: }
 10756                           ;RedSerie13.c: 148: }
 10757  0019AE  0012               	return	
 10758  0019B0                     i2l3718:
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;RedSerie13.c: 149: else {PsTxEnviaCar(RsTxCar); RsTxIndex ++;}
 10762  0019B0  5031               	movf	_RsTxCar,w,c
 10763  0019B2  EC69  F013         	call	_PsTxEnviaCar
 10764  0019B6  0100               	movlb	0	; () banked
 10765  0019B8  4BC4               	infsnz	_RsTxIndex& (0+255),f,b
 10766  0019BA  2BC5               	incf	(_RsTxIndex+1)& (0+255),f,b
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;RedSerie13.c: 150: }
 10770  0019BC  0012               	return	
 10771  0019BE                     i2l3722:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;RedSerie13.c: 151: else {
 10775                           ;RedSerie13.c: 152: PsTxEnviaCar (255);
 10776  0019BE  0EFF               	movlw	255
 10777  0019C0  EC69  F013         	call	_PsTxEnviaCar
 10778                           
 10779                           ;RedSerie13.c: 153: RsTxTransmitiendoF = 0;
 10780  0019C4  0E00               	movlw	0
 10781  0019C6  0100               	movlb	0	; () banked
 10782  0019C8  6FBD               	movwf	(_RsTxTransmitiendoF+1)& (0+255),b
 10783  0019CA  0E00               	movlw	0
 10784  0019CC  6FBC               	movwf	_RsTxTransmitiendoF& (0+255),b
 10785                           
 10786                           ; BSR set to: 0
 10787  0019CE  0012               	return	
 10788  0019D0                     __end_of_PsTxInterrupt:
 10789                           	opt stack 0
 10790                           pclatu	equ	0xFFB
 10791                           pclath	equ	0xFFA
 10792                           tblptru	equ	0xFF8
 10793                           tblptrh	equ	0xFF7
 10794                           tblptrl	equ	0xFF6
 10795                           tablat	equ	0xFF5
 10796                           prodh	equ	0xFF4
 10797                           prodl	equ	0xFF3
 10798                           intcon	equ	0xFF2
 10799                           postinc0	equ	0xFEE
 10800                           fsr0h	equ	0xFEA
 10801                           fsr0l	equ	0xFE9
 10802                           wreg	equ	0xFE8
 10803                           indf1	equ	0xFE7
 10804                           postdec1	equ	0xFE5
 10805                           fsr1h	equ	0xFE2
 10806                           fsr1l	equ	0xFE1
 10807                           indf2	equ	0xFDF
 10808                           postinc2	equ	0xFDE
 10809                           postdec2	equ	0xFDD
 10810                           fsr2h	equ	0xFDA
 10811                           fsr2l	equ	0xFD9
 10812                           status	equ	0xFD8
 10813                           
 10814 ;; *************** function _PsTxEnviaCar *****************
 10815 ;; Defined at:
 10816 ;;		line 48 in file "RedSerie13.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  car             1    wreg     unsigned char 
 10819 ;; Auto vars:     Size  Location     Type
 10820 ;;  car             1    0[COMRAM] unsigned char 
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  1    wreg      void 
 10823 ;; Registers used:
 10824 ;;		wreg
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10830 ;;      Params:         0       0       0       0       0       0       0       0       0
 10831 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10832 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10833 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10834 ;;Total ram usage:        1 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; This function calls:
 10837 ;;		Nothing
 10838 ;; This function is called by:
 10839 ;;		_PsTxInterrupt
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text70
 10844  0026D2                     __ptext70:
 10845                           	opt stack 0
 10846  0026D2                     _PsTxEnviaCar:
 10847                           	opt stack 17
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;incstack = 0
 10851                           ;PsTxEnviaCar@car stored from wreg
 10852  0026D2  6E01               	movwf	PsTxEnviaCar@car,c
 10853                           
 10854                           ;RedSerie13.c: 49: TXREG1 = car;
 10855  0026D4  C001  FFAD         	movff	PsTxEnviaCar@car,4013	;volatile
 10856  0026D8  0012               	return		;funcret
 10857  0026DA                     __end_of_PsTxEnviaCar:
 10858                           	opt stack 0
 10859                           pclatu	equ	0xFFB
 10860                           pclath	equ	0xFFA
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodh	equ	0xFF4
 10866                           prodl	equ	0xFF3
 10867                           intcon	equ	0xFF2
 10868                           postinc0	equ	0xFEE
 10869                           fsr0h	equ	0xFEA
 10870                           fsr0l	equ	0xFE9
 10871                           wreg	equ	0xFE8
 10872                           indf1	equ	0xFE7
 10873                           postdec1	equ	0xFE5
 10874                           fsr1h	equ	0xFE2
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function _PsRxInterrupt *****************
 10884 ;; Defined at:
 10885 ;;		line 85 in file "RedSerie13.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10899 ;;      Params:         0       0       0       0       0       0       0       0       0
 10900 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10902 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10903 ;;Total ram usage:        0 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    1
 10906 ;; This function calls:
 10907 ;;		_PsRxRecibeCar
 10908 ;; This function is called by:
 10909 ;;		_RsInterr
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text71
 10914  001294                     __ptext71:
 10915                           	opt stack 0
 10916  001294                     _PsRxInterrupt:
 10917                           	opt stack 17
 10918                           
 10919                           ;RedSerie13.c: 86: if (RCIF){
 10920                           
 10921                           ;incstack = 0
 10922  001294  AA9E               	btfss	3998,5,c	;volatile
 10923  001296  0012               	return	
 10924                           
 10925                           ;RedSerie13.c: 88: RsRxCar = PsRxRecibeCar();
 10926  001298  EC72  F013         	call	_PsRxRecibeCar	;wreg free
 10927  00129C  6E32               	movwf	_RsRxCar,c
 10928                           
 10929                           ;RedSerie13.c: 89: if (!RsRxRecibioMsgF) {
 10930  00129E  0100               	movlb	0	; () banked
 10931  0012A0  51C0               	movf	_RsRxRecibioMsgF& (0+255),w,b
 10932  0012A2  0100               	movlb	0	; () banked
 10933  0012A4  11C1               	iorwf	(_RsRxRecibioMsgF+1)& (0+255),w,b
 10934  0012A6  A4D8               	btfss	status,2,c
 10935  0012A8  0012               	return	
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;RedSerie13.c: 90: if (RsRxIndex == -1) {
 10939  0012AA  0100               	movlb	0	; () banked
 10940  0012AC  29C6               	incf	_RsRxIndex& (0+255),w,b
 10941  0012AE  E113               	bnz	i2l3660
 10942  0012B0  0100               	movlb	0	; () banked
 10943  0012B2  29C7               	incf	(_RsRxIndex+1)& (0+255),w,b
 10944  0012B4  A4D8               	btfss	status,2,c
 10945  0012B6  D00F               	goto	i2l3660
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;RedSerie13.c: 91: if (RsRxCar == 254) {
 10949  0012B8  0EFE               	movlw	254
 10950  0012BA  1832               	xorwf	_RsRxCar,w,c
 10951  0012BC  A4D8               	btfss	status,2,c
 10952  0012BE  0012               	return	
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;RedSerie13.c: 92: RsRxIndex = 0;
 10956  0012C0  0E00               	movlw	0
 10957  0012C2  0100               	movlb	0	; () banked
 10958  0012C4  6FC7               	movwf	(_RsRxIndex+1)& (0+255),b
 10959  0012C6  0E00               	movlw	0
 10960  0012C8  6FC6               	movwf	_RsRxIndex& (0+255),b
 10961                           
 10962                           ;RedSerie13.c: 93: RsRxCarDobleF = 0;
 10963  0012CA  0E00               	movlw	0
 10964  0012CC  0100               	movlb	0	; () banked
 10965  0012CE  6FBF               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 10966  0012D0  0E00               	movlw	0
 10967  0012D2  6FBE               	movwf	_RsRxCarDobleF& (0+255),b
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;RedSerie13.c: 94: }
 10971                           ;RedSerie13.c: 95: }
 10972  0012D4  0012               	return	
 10973  0012D6                     i2l3660:
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;RedSerie13.c: 96: else if (RsRxCar != 255) {
 10977  0012D6  2832               	incf	_RsRxCar,w,c
 10978  0012D8  B4D8               	btfsc	status,2,c
 10979  0012DA  D043               	goto	i2l3684
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;RedSerie13.c: 97: if (RsRxCar == 254){
 10983  0012DC  0EFE               	movlw	254
 10984  0012DE  1832               	xorwf	_RsRxCar,w,c
 10985  0012E0  A4D8               	btfss	status,2,c
 10986  0012E2  D00B               	goto	i2l3666
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;RedSerie13.c: 98: RsRxIndex = 0;
 10990  0012E4  0E00               	movlw	0
 10991  0012E6  0100               	movlb	0	; () banked
 10992  0012E8  6FC7               	movwf	(_RsRxIndex+1)& (0+255),b
 10993  0012EA  0E00               	movlw	0
 10994  0012EC  6FC6               	movwf	_RsRxIndex& (0+255),b
 10995                           
 10996                           ;RedSerie13.c: 99: RsRxCarDobleF = 0;
 10997  0012EE  0E00               	movlw	0
 10998  0012F0  0100               	movlb	0	; () banked
 10999  0012F2  6FBF               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 11000  0012F4  0E00               	movlw	0
 11001  0012F6  6FBE               	movwf	_RsRxCarDobleF& (0+255),b
 11002                           
 11003                           ;RedSerie13.c: 100: }
 11004  0012F8  0012               	return	
 11005  0012FA                     i2l3666:
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;RedSerie13.c: 101: else {
 11009                           ;RedSerie13.c: 102: if (
 11010                           ;RedSerie13.c: 103: RsRxCar == 250) {RsRxCarDobleF = 1;}
 11011  0012FA  0EFA               	movlw	250
 11012  0012FC  1832               	xorwf	_RsRxCar,w,c
 11013  0012FE  A4D8               	btfss	status,2,c
 11014  001300  D006               	goto	i2l3670
 11015                           
 11016                           ; BSR set to: 0
 11017  001302  0E00               	movlw	0
 11018  001304  0100               	movlb	0	; () banked
 11019  001306  6FBF               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 11020  001308  0E01               	movlw	1
 11021  00130A  6FBE               	movwf	_RsRxCarDobleF& (0+255),b
 11022  00130C  0012               	return	
 11023  00130E                     i2l3670:
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;RedSerie13.c: 104: else {
 11027                           ;RedSerie13.c: 105: if (RsRxCarDobleF) {RsRxCar += 250; RsRxCarDobleF=0;}
 11028  00130E  0100               	movlb	0	; () banked
 11029  001310  51BE               	movf	_RsRxCarDobleF& (0+255),w,b
 11030  001312  0100               	movlb	0	; () banked
 11031  001314  11BF               	iorwf	(_RsRxCarDobleF+1)& (0+255),w,b
 11032  001316  B4D8               	btfsc	status,2,c
 11033  001318  D007               	goto	i2l3676
 11034                           
 11035                           ; BSR set to: 0
 11036  00131A  0EFA               	movlw	250
 11037  00131C  2632               	addwf	_RsRxCar,f,c
 11038                           
 11039                           ; BSR set to: 0
 11040  00131E  0E00               	movlw	0
 11041  001320  0100               	movlb	0	; () banked
 11042  001322  6FBF               	movwf	(_RsRxCarDobleF+1)& (0+255),b
 11043  001324  0E00               	movlw	0
 11044  001326  6FBE               	movwf	_RsRxCarDobleF& (0+255),b
 11045  001328                     i2l3676:
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;RedSerie13.c: 106: if (RsRxIndex >= 30){RsRxIndex = -1;}
 11049  001328  0100               	movlb	0	; () banked
 11050  00132A  BFC7               	btfsc	(_RsRxIndex+1)& (0+255),7,b
 11051  00132C  D00C               	goto	i2l3680
 11052  00132E  0100               	movlb	0	; () banked
 11053  001330  51C7               	movf	(_RsRxIndex+1)& (0+255),w,b
 11054  001332  E105               	bnz	i2u223_40
 11055  001334  0E1E               	movlw	30
 11056  001336  0100               	movlb	0	; () banked
 11057  001338  5DC6               	subwf	_RsRxIndex& (0+255),w,b
 11058  00133A  A0D8               	btfss	status,0,c
 11059  00133C  D004               	goto	i2l3680
 11060  00133E                     i2u223_40:
 11061                           
 11062                           ; BSR set to: 0
 11063  00133E  0100               	movlb	0	; () banked
 11064  001340  69C6               	setf	_RsRxIndex& (0+255),b
 11065  001342  69C7               	setf	(_RsRxIndex+1)& (0+255),b
 11066  001344  0012               	return	
 11067  001346                     i2l3680:
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;RedSerie13.c: 107: else {
 11071                           ;RedSerie13.c: 108: RsRxBuffer[RsRxIndex] = RsRxCar;
 11072  001346  0E4E               	movlw	low _RsRxBuffer
 11073  001348  0100               	movlb	0	; () banked
 11074  00134A  25C6               	addwf	_RsRxIndex& (0+255),w,b
 11075  00134C  6ED9               	movwf	fsr2l,c
 11076  00134E  0E01               	movlw	high _RsRxBuffer
 11077  001350  0100               	movlb	0	; () banked
 11078  001352  21C7               	addwfc	(_RsRxIndex+1)& (0+255),w,b
 11079  001354  6EDA               	movwf	fsr2h,c
 11080  001356  C032  FFDF         	movff	_RsRxCar,indf2
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;RedSerie13.c: 109: RsRxIndex ++;
 11084  00135A  0100               	movlb	0	; () banked
 11085  00135C  4BC6               	infsnz	_RsRxIndex& (0+255),f,b
 11086  00135E  2BC7               	incf	(_RsRxIndex+1)& (0+255),f,b
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;RedSerie13.c: 110: }
 11090                           ;RedSerie13.c: 111: }
 11091                           ;RedSerie13.c: 112: }
 11092                           ;RedSerie13.c: 113: }
 11093                           
 11094                           ; BSR set to: 0
 11095                           
 11096                           ; BSR set to: 0
 11097  001360  0012               	return	
 11098  001362                     i2l3684:
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;RedSerie13.c: 114: else {
 11102                           ;RedSerie13.c: 119: if (RsRxBuffer[0] == 0x02) {
 11103  001362  0E02               	movlw	2
 11104  001364  0101               	movlb	1	; () banked
 11105  001366  194E               	xorwf	_RsRxBuffer& (0+255),w,b
 11106  001368  A4D8               	btfss	status,2,c
 11107  00136A  0012               	return	
 11108                           
 11109                           ; BSR set to: 1
 11110                           ;RedSerie13.c: 120: RsRxBufferLen = RsRxIndex -1;
 11111  00136C  0EFF               	movlw	255
 11112  00136E  0100               	movlb	0	; () banked
 11113  001370  25C6               	addwf	_RsRxIndex& (0+255),w,b
 11114  001372  0100               	movlb	0	; () banked
 11115  001374  6FCA               	movwf	_RsRxBufferLen& (0+255),b
 11116  001376  0EFF               	movlw	255
 11117  001378  0100               	movlb	0	; () banked
 11118  00137A  21C7               	addwfc	(_RsRxIndex+1)& (0+255),w,b
 11119  00137C  0100               	movlb	0	; () banked
 11120  00137E  6FCB               	movwf	(_RsRxBufferLen+1)& (0+255),b
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;RedSerie13.c: 121: RsRxRecibioMsgF =1;
 11124  001380  0E00               	movlw	0
 11125  001382  0100               	movlb	0	; () banked
 11126  001384  6FC1               	movwf	(_RsRxRecibioMsgF+1)& (0+255),b
 11127  001386  0E01               	movlw	1
 11128  001388  6FC0               	movwf	_RsRxRecibioMsgF& (0+255),b
 11129                           
 11130                           ; BSR set to: 0
 11131                           
 11132                           ; BSR set to: 0
 11133                           
 11134                           ; BSR set to: 0
 11135                           
 11136                           ; BSR set to: 0
 11137  00138A  0012               	return	
 11138  00138C                     __end_of_PsRxInterrupt:
 11139                           	opt stack 0
 11140                           pclatu	equ	0xFFB
 11141                           pclath	equ	0xFFA
 11142                           tblptru	equ	0xFF8
 11143                           tblptrh	equ	0xFF7
 11144                           tblptrl	equ	0xFF6
 11145                           tablat	equ	0xFF5
 11146                           prodh	equ	0xFF4
 11147                           prodl	equ	0xFF3
 11148                           intcon	equ	0xFF2
 11149                           postinc0	equ	0xFEE
 11150                           fsr0h	equ	0xFEA
 11151                           fsr0l	equ	0xFE9
 11152                           wreg	equ	0xFE8
 11153                           indf1	equ	0xFE7
 11154                           postdec1	equ	0xFE5
 11155                           fsr1h	equ	0xFE2
 11156                           fsr1l	equ	0xFE1
 11157                           indf2	equ	0xFDF
 11158                           postinc2	equ	0xFDE
 11159                           postdec2	equ	0xFDD
 11160                           fsr2h	equ	0xFDA
 11161                           fsr2l	equ	0xFD9
 11162                           status	equ	0xFD8
 11163                           
 11164 ;; *************** function _PsRxRecibeCar *****************
 11165 ;; Defined at:
 11166 ;;		line 45 in file "RedSerie13.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;		None
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;		None
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  1    wreg      unsigned char 
 11173 ;; Registers used:
 11174 ;;		wreg, status,2
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11180 ;;      Params:         0       0       0       0       0       0       0       0       0
 11181 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11183 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11184 ;;Total ram usage:        0 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; This function calls:
 11187 ;;		Nothing
 11188 ;; This function is called by:
 11189 ;;		_PsRxInterrupt
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text72
 11194  0026E4                     __ptext72:
 11195                           	opt stack 0
 11196  0026E4                     _PsRxRecibeCar:
 11197                           	opt stack 17
 11198                           
 11199                           ;RedSerie13.c: 46: return (RCREG1) ;
 11200                           
 11201                           ;incstack = 0
 11202  0026E4  50AE               	movf	4014,w,c	;volatile
 11203  0026E6  0012               	return	
 11204  0026E8                     __end_of_PsRxRecibeCar:
 11205                           	opt stack 0
 11206                           pclatu	equ	0xFFB
 11207                           pclath	equ	0xFFA
 11208                           tblptru	equ	0xFF8
 11209                           tblptrh	equ	0xFF7
 11210                           tblptrl	equ	0xFF6
 11211                           tablat	equ	0xFF5
 11212                           prodh	equ	0xFF4
 11213                           prodl	equ	0xFF3
 11214                           intcon	equ	0xFF2
 11215                           postinc0	equ	0xFEE
 11216                           fsr0h	equ	0xFEA
 11217                           fsr0l	equ	0xFE9
 11218                           wreg	equ	0xFE8
 11219                           indf1	equ	0xFE7
 11220                           postdec1	equ	0xFE5
 11221                           fsr1h	equ	0xFE2
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           postdec2	equ	0xFDD
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230 ;; *************** function _LedAmarilloInterr *****************
 11231 ;; Defined at:
 11232 ;;		line 25 in file "PruebaLed20.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;		None
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, status,2, status,0
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11246 ;;      Params:         0       0       0       0       0       0       0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11249 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11250 ;;Total ram usage:        0 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; This function calls:
 11253 ;;		Nothing
 11254 ;; This function is called by:
 11255 ;;		_MstInterr
 11256 ;;		_Ppal_Interr
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text73
 11261  002216                     __ptext73:
 11262                           	opt stack 0
 11263  002216                     _LedAmarilloInterr:
 11264                           	opt stack 19
 11265                           
 11266                           ;PruebaLed20.c: 26: LedContMs -= 1;
 11267                           
 11268                           ;incstack = 0
 11269  002216  0101               	movlb	1	; () banked
 11270  002218  0791               	decf	_LedContMs& (0+255),f,b
 11271  00221A  A0D8               	btfss	status,0,c
 11272  00221C  0792               	decf	(_LedContMs+1)& (0+255),f,b
 11273                           
 11274                           ; BSR set to: 1
 11275                           ;PruebaLed20.c: 27: if (LedContMs <= 1) {
 11276  00221E  0101               	movlb	1	; () banked
 11277  002220  BF92               	btfsc	(_LedContMs+1)& (0+255),7,b
 11278  002222  D008               	goto	i2l3924
 11279  002224  0101               	movlb	1	; () banked
 11280  002226  5192               	movf	(_LedContMs+1)& (0+255),w,b
 11281  002228  E115               	bnz	i2l111
 11282  00222A  0E02               	movlw	2
 11283  00222C  0101               	movlb	1	; () banked
 11284  00222E  5D91               	subwf	_LedContMs& (0+255),w,b
 11285  002230  B0D8               	btfsc	status,0,c
 11286  002232  0012               	return	
 11287  002234                     i2l3924:
 11288                           
 11289                           ; BSR set to: 1
 11290                           ;PruebaLed20.c: 28: if (PORTCbits.RC0 == 1){
 11291  002234  A082               	btfss	3970,0,c	;volatile
 11292  002236  D007               	goto	i2l109
 11293                           
 11294                           ; BSR set to: 1
 11295                           ;PruebaLed20.c: 29: PORTCbits.RC0 = 0;
 11296  002238  9082               	bcf	3970,0,c	;volatile
 11297                           
 11298                           ; BSR set to: 1
 11299                           ;PruebaLed20.c: 30: LedContMs = 100;
 11300  00223A  0E00               	movlw	0
 11301  00223C  0101               	movlb	1	; () banked
 11302  00223E  6F92               	movwf	(_LedContMs+1)& (0+255),b
 11303  002240  0E64               	movlw	100
 11304  002242  6F91               	movwf	_LedContMs& (0+255),b
 11305                           
 11306                           ;PruebaLed20.c: 31: }
 11307  002244  0012               	return	
 11308  002246                     i2l109:
 11309                           
 11310                           ; BSR set to: 1
 11311                           ;PruebaLed20.c: 32: else {
 11312                           ;PruebaLed20.c: 33: PORTCbits.RC0 = 1;
 11313  002246  8082               	bsf	3970,0,c	;volatile
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;PruebaLed20.c: 34: LedContMs = 100;
 11317  002248  0E00               	movlw	0
 11318  00224A  0101               	movlb	1	; () banked
 11319  00224C  6F92               	movwf	(_LedContMs+1)& (0+255),b
 11320  00224E  0E64               	movlw	100
 11321  002250  6F91               	movwf	_LedContMs& (0+255),b
 11322                           
 11323                           ; BSR set to: 1
 11324  002252  0012               	return	
 11325  002254                     i2l111:
 11326                           
 11327                           ; BSR set to: 1
 11328  002254  0012               	return		;funcret
 11329  002256                     __end_of_LedAmarilloInterr:
 11330                           	opt stack 0
 11331                           pclatu	equ	0xFFB
 11332                           pclath	equ	0xFFA
 11333                           tblptru	equ	0xFF8
 11334                           tblptrh	equ	0xFF7
 11335                           tblptrl	equ	0xFF6
 11336                           tablat	equ	0xFF5
 11337                           prodh	equ	0xFF4
 11338                           prodl	equ	0xFF3
 11339                           intcon	equ	0xFF2
 11340                           postinc0	equ	0xFEE
 11341                           fsr0h	equ	0xFEA
 11342                           fsr0l	equ	0xFE9
 11343                           wreg	equ	0xFE8
 11344                           indf1	equ	0xFE7
 11345                           postdec1	equ	0xFE5
 11346                           fsr1h	equ	0xFE2
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _IntLedParpadea *****************
 11356 ;; Defined at:
 11357 ;;		line 66 in file "PruebaLed20.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;  Nveces          2    5[COMRAM] int 
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  I               2    8[COMRAM] int 
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      void 
 11364 ;; Registers used:
 11365 ;;		wreg, status,2, status,0, cstack
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11371 ;;      Params:         2       0       0       0       0       0       0       0       0
 11372 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11373 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11374 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11375 ;;Total ram usage:        5 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    1
 11378 ;; This function calls:
 11379 ;;		_IntDelay_ms
 11380 ;; This function is called by:
 11381 ;;		_MstInterr
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text74
 11386  001EBA                     __ptext74:
 11387                           	opt stack 0
 11388  001EBA                     _IntLedParpadea:
 11389                           	opt stack 18
 11390                           
 11391                           ;PruebaLed20.c: 67: int I;
 11392                           ;PruebaLed20.c: 68: INTCON &= 0x7F;;
 11393                           
 11394                           ; BSR set to: 1
 11395                           ;incstack = 0
 11396  001EBA  9EF2               	bcf	intcon,7,c	;volatile
 11397                           
 11398                           ;PruebaLed20.c: 69: PORTCbits.RC0 = 0;
 11399  001EBC  9082               	bcf	3970,0,c	;volatile
 11400                           
 11401                           ;PruebaLed20.c: 70: IntDelay_ms (1000);
 11402  001EBE  0E03               	movlw	3
 11403  001EC0  6E02               	movwf	IntDelay_ms@delay+1,c
 11404  001EC2  0EE8               	movlw	232
 11405  001EC4  6E01               	movwf	IntDelay_ms@delay,c
 11406  001EC6  EC08  F012         	call	_IntDelay_ms	;wreg free
 11407  001ECA                     i2l3938:
 11408                           
 11409                           ;PruebaLed20.c: 72: for (I=1; I<=Nveces; I++) {
 11410  001ECA  0E00               	movlw	0
 11411  001ECC  6E0A               	movwf	IntLedParpadea@I+1,c
 11412  001ECE  0E01               	movlw	1
 11413  001ED0  6E09               	movwf	IntLedParpadea@I,c
 11414  001ED2  D010               	goto	i2l3946
 11415  001ED4                     i2l131:
 11416                           
 11417                           ;PruebaLed20.c: 73: PORTCbits.RC0 = 1;
 11418  001ED4  8082               	bsf	3970,0,c	;volatile
 11419                           
 11420                           ;PruebaLed20.c: 74: IntDelay_ms (400);
 11421  001ED6  0E01               	movlw	1
 11422  001ED8  6E02               	movwf	IntDelay_ms@delay+1,c
 11423  001EDA  0E90               	movlw	144
 11424  001EDC  6E01               	movwf	IntDelay_ms@delay,c
 11425  001EDE  EC08  F012         	call	_IntDelay_ms	;wreg free
 11426                           
 11427                           ;PruebaLed20.c: 75: PORTCbits.RC0 = 0;
 11428  001EE2  9082               	bcf	3970,0,c	;volatile
 11429                           
 11430                           ;PruebaLed20.c: 76: IntDelay_ms (400);
 11431  001EE4  0E01               	movlw	1
 11432  001EE6  6E02               	movwf	IntDelay_ms@delay+1,c
 11433  001EE8  0E90               	movlw	144
 11434  001EEA  6E01               	movwf	IntDelay_ms@delay,c
 11435  001EEC  EC08  F012         	call	_IntDelay_ms	;wreg free
 11436  001EF0  4A09               	infsnz	IntLedParpadea@I,f,c
 11437  001EF2  2A0A               	incf	IntLedParpadea@I+1,f,c
 11438  001EF4                     i2l3946:
 11439  001EF4  5009               	movf	IntLedParpadea@I,w,c
 11440  001EF6  5C06               	subwf	IntLedParpadea@Nveces,w,c
 11441  001EF8  5007               	movf	IntLedParpadea@Nveces+1,w,c
 11442  001EFA  0A80               	xorlw	128
 11443  001EFC  6E08               	movwf	??_IntLedParpadea& (0+255),c
 11444  001EFE  500A               	movf	IntLedParpadea@I+1,w,c
 11445  001F00  0A80               	xorlw	128
 11446  001F02  5808               	subwfb	??_IntLedParpadea& (0+255),w,c
 11447  001F04  B0D8               	btfsc	status,0,c
 11448  001F06  D7E6               	goto	i2l131
 11449                           
 11450                           ;PruebaLed20.c: 77: }
 11451                           ;PruebaLed20.c: 78: IntDelay_ms (500);
 11452  001F08  0E01               	movlw	1
 11453  001F0A  6E02               	movwf	IntDelay_ms@delay+1,c
 11454  001F0C  0EF4               	movlw	244
 11455  001F0E  6E01               	movwf	IntDelay_ms@delay,c
 11456  001F10  EC08  F012         	call	_IntDelay_ms	;wreg free
 11457  001F14  D7DA               	goto	i2l3938
 11458  001F16                     __end_of_IntLedParpadea:
 11459                           	opt stack 0
 11460                           pclatu	equ	0xFFB
 11461                           pclath	equ	0xFFA
 11462                           tblptru	equ	0xFF8
 11463                           tblptrh	equ	0xFF7
 11464                           tblptrl	equ	0xFF6
 11465                           tablat	equ	0xFF5
 11466                           prodh	equ	0xFF4
 11467                           prodl	equ	0xFF3
 11468                           intcon	equ	0xFF2
 11469                           postinc0	equ	0xFEE
 11470                           fsr0h	equ	0xFEA
 11471                           fsr0l	equ	0xFE9
 11472                           wreg	equ	0xFE8
 11473                           indf1	equ	0xFE7
 11474                           postdec1	equ	0xFE5
 11475                           fsr1h	equ	0xFE2
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function _IntDelay_ms *****************
 11485 ;; Defined at:
 11486 ;;		line 83 in file "PruebaLed20.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;  delay           2    0[COMRAM] int 
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;  I               2    3[COMRAM] int 
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, status,2, status,0
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11500 ;;      Params:         2       0       0       0       0       0       0       0       0
 11501 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11502 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11503 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11504 ;;Total ram usage:        5 bytes
 11505 ;; Hardware stack levels used:    1
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_IntLedParpadea
 11510 ;;		_MstInterr
 11511 ;; This function uses a non-reentrant model
 11512 ;;
 11513                           
 11514                           	psect	text75
 11515  002410                     __ptext75:
 11516                           	opt stack 0
 11517  002410                     _IntDelay_ms:
 11518                           	opt stack 18
 11519                           
 11520                           ;PruebaLed20.c: 84: int I;
 11521                           ;PruebaLed20.c: 85: for (I=1; I<=delay; I++) { _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); }
 11522                           
 11523                           ;incstack = 0
 11524  002410  0E00               	movlw	0
 11525  002412  6E05               	movwf	IntDelay_ms@I+1,c
 11526  002414  0E01               	movlw	1
 11527  002416  6E04               	movwf	IntDelay_ms@I,c
 11528  002418  D009               	goto	i2l138
 11529  00241A                     i2l3634:
 11530  00241A  0E03               	movlw	3
 11531  00241C  6E03               	movwf	??_IntDelay_ms& (0+255),c
 11532  00241E  0E98               	movlw	152
 11533  002420                     i2u395_47:
 11534  002420  2EE8               	decfsz	wreg,f,c
 11535  002422  D7FE               	bra	i2u395_47
 11536  002424  2E03               	decfsz	??_IntDelay_ms& (0+255),f,c
 11537  002426  D7FC               	bra	i2u395_47
 11538  002428  4A04               	infsnz	IntDelay_ms@I,f,c
 11539  00242A  2A05               	incf	IntDelay_ms@I+1,f,c
 11540  00242C                     i2l138:
 11541  00242C  5004               	movf	IntDelay_ms@I,w,c
 11542  00242E  5C01               	subwf	IntDelay_ms@delay,w,c
 11543  002430  5002               	movf	IntDelay_ms@delay+1,w,c
 11544  002432  0A80               	xorlw	128
 11545  002434  6E03               	movwf	??_IntDelay_ms& (0+255),c
 11546  002436  5005               	movf	IntDelay_ms@I+1,w,c
 11547  002438  0A80               	xorlw	128
 11548  00243A  5803               	subwfb	??_IntDelay_ms& (0+255),w,c
 11549  00243C  A0D8               	btfss	status,0,c
 11550  00243E  0012               	return	
 11551  002440  D7EC               	goto	i2l3634
 11552  002442                     __end_of_IntDelay_ms:
 11553                           	opt stack 0
 11554  0000                     pclatu	equ	0xFFB
 11555                           pclath	equ	0xFFA
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           postinc0	equ	0xFEE
 11564                           fsr0h	equ	0xFEA
 11565                           fsr0l	equ	0xFE9
 11566                           wreg	equ	0xFE8
 11567                           indf1	equ	0xFE7
 11568                           postdec1	equ	0xFE5
 11569                           fsr1h	equ	0xFE2
 11570                           fsr1l	equ	0xFE1
 11571                           indf2	equ	0xFDF
 11572                           postinc2	equ	0xFDE
 11573                           postdec2	equ	0xFDD
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           pclatu	equ	0xFFB
 11578                           pclath	equ	0xFFA
 11579                           tblptru	equ	0xFF8
 11580                           tblptrh	equ	0xFF7
 11581                           tblptrl	equ	0xFF6
 11582                           tablat	equ	0xFF5
 11583                           prodh	equ	0xFF4
 11584                           prodl	equ	0xFF3
 11585                           intcon	equ	0xFF2
 11586                           postinc0	equ	0xFEE
 11587                           fsr0h	equ	0xFEA
 11588                           fsr0l	equ	0xFE9
 11589                           wreg	equ	0xFE8
 11590                           indf1	equ	0xFE7
 11591                           postdec1	equ	0xFE5
 11592                           fsr1h	equ	0xFE2
 11593                           fsr1l	equ	0xFE1
 11594                           indf2	equ	0xFDF
 11595                           postinc2	equ	0xFDE
 11596                           postdec2	equ	0xFDD
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8
 11600                           
 11601                           	psect	rparam
 11602  0000                     pclatu	equ	0xFFB
 11603                           pclath	equ	0xFFA
 11604                           tblptru	equ	0xFF8
 11605                           tblptrh	equ	0xFF7
 11606                           tblptrl	equ	0xFF6
 11607                           tablat	equ	0xFF5
 11608                           prodh	equ	0xFF4
 11609                           prodl	equ	0xFF3
 11610                           intcon	equ	0xFF2
 11611                           postinc0	equ	0xFEE
 11612                           fsr0h	equ	0xFEA
 11613                           fsr0l	equ	0xFE9
 11614                           wreg	equ	0xFE8
 11615                           indf1	equ	0xFE7
 11616                           postdec1	equ	0xFE5
 11617                           fsr1h	equ	0xFE2
 11618                           fsr1l	equ	0xFE1
 11619                           indf2	equ	0xFDF
 11620                           postinc2	equ	0xFDE
 11621                           postdec2	equ	0xFDD
 11622                           fsr2h	equ	0xFDA
 11623                           fsr2l	equ	0xFD9
 11624                           status	equ	0xFD8
 11625                           
 11626                           	psect	temp
 11627  000047                     btemp:
 11628                           	opt stack 0
 11629  000047                     	ds	1
 11630  0000                     int$flags	set	btemp
 11631                           pclatu	equ	0xFFB
 11632                           pclath	equ	0xFFA
 11633                           tblptru	equ	0xFF8
 11634                           tblptrh	equ	0xFF7
 11635                           tblptrl	equ	0xFF6
 11636                           tablat	equ	0xFF5
 11637                           prodh	equ	0xFF4
 11638                           prodl	equ	0xFF3
 11639                           intcon	equ	0xFF2
 11640                           postinc0	equ	0xFEE
 11641                           fsr0h	equ	0xFEA
 11642                           fsr0l	equ	0xFE9
 11643                           wreg	equ	0xFE8
 11644                           indf1	equ	0xFE7
 11645                           postdec1	equ	0xFE5
 11646                           fsr1h	equ	0xFE2
 11647                           fsr1l	equ	0xFE1
 11648                           indf2	equ	0xFDF
 11649                           postinc2	equ	0xFDE
 11650                           postdec2	equ	0xFDD
 11651                           fsr2h	equ	0xFDA
 11652                           fsr2l	equ	0xFD9
 11653                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         293
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      70
    BANK0           160      6     160
    BANK1           256     24     147
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    memcpy@s1	PTR const void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MIOAdcAct(COMRAM[10]), MIOAdcLeido(BANK0[10]), MrHora12(BANK0[2]), 
		 -> MrFecha12(COMRAM[4]), MrDirV(COMRAM[2]), MrUltV(COMRAM[2]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), RAM(DATA[2047]), RsRxBuffer(BANK1[30]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MIOAdcAct(COMRAM[10]), MIOAdcLeido(BANK0[10]), MrHora12(BANK0[2]), 
		 -> MrFecha12(COMRAM[4]), MrDirV(COMRAM[2]), MrUltV(COMRAM[2]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), RAM(DATA[2047]), RsRxBuffer(BANK1[30]), 

    _MrEsc@MrReg1	PTR unsigned char  size(2) Largest target is 13
		 -> MrRegAux(BANK1[13]), MrReg(BANK0[13]), 

    _MrLee@MrReg1	PTR unsigned char  size(2) Largest target is 13
		 -> MrReg(BANK0[13]), 

    MseLee@Datos	PTR unsigned char  size(2) Largest target is 30
		 -> MrReg(BANK0[13]), RsTxBuffer(BANK1[30]), 

    MseEsc@Datos	PTR unsigned char  size(2) Largest target is 30
		 -> MrRegAux(BANK1[13]), MrReg(BANK0[13]), RsRxBuffer(BANK1[30]), 

    EscRAM@Car2P	PTR void  size(2) Largest target is 30
		 -> RsRxBuffer(BANK1[30]), 

    sp__memcpy	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), MrDirV(COMRAM[2]), MrRegAux(BANK1[13]), MrReg(BANK0[13]), 
		 -> MrFecha12Ult(BANK0[4]), RtcFechaHora(BANK0[7]), Car1(COMRAM[1]), RAM(DATA[2047]), 
		 -> RsTxBuffer(BANK1[30]), 

    Ptr1	PTR void  size(2) Largest target is 2047
		 -> NULL(NULL[0]), RAM(DATA[2047]), 

    RsCheckSum@RsBuffer	PTR unsigned char  size(2) Largest target is 30
		 -> RsTxBuffer(BANK1[30]), 


Critical Paths under _main in COMRAM

    _Tpo_init->_RtcLee
    _RtcInit->_RtcEsc
    _RtcInit->_RtcLee
    _Tpo_Ciclo->_RtcLee
    _MIOAdcAjuste2_5->___aldiv
    ___aldiv->___lmul
    _MstInit->_LedParpadea
    _RsInit->_PsInit
    _LedParpadea->_Delay_ms
    _Ppal_RsComando->_MseEsc
    _Ppal_RsComando->_MseLee
    _RtcEsc->_I2CEscByte
    _Hex2Bcd->___awdiv
    _RsTxEnviaMsg->_RsCheckSum
    _MrSgte->__MrSgte
    __MrLee->_MseLee
    _MseLee->_I2CEscByte
    __MrPreparaFecha->_memcpy
    __MrEsc->_MseEsc
    __CalculaRegPos->___lwdiv
    _MseEsc->_I2CEscByte
    _RtcLee->_I2CEscByte
    _I2CEscByte->_Hex2Bcd
    _LeeRAM->_memcpy
    _EscRAM->_memcpy

Critical Paths under _Interr in COMRAM

    _MioInterr->_ADC_Lee
    _MstInterr->_IntLedParpadea
    _RsInterr->_PsTxInterrupt
    _PsTxInterrupt->_PsTxEnviaCar
    _IntLedParpadea->_IntDelay_ms

Critical Paths under _main in BANK0

    _MIOAdcAjuste2_5->___aldiv
    _Ppal_RsComando->_MseEsc
    _Ppal_RsComando->_MseLee
    __MrLee->_MseLee
    __MrEsc->_MseEsc

Critical Paths under _Interr in BANK0

    None.

Critical Paths under _main in BANK1

    _Ppal_Ciclo->_MioCiclo
    _MioCiclo->_MrAgregaReg
    _MstCiclo->_MstRsComando
    _MstRsComando->_Ppal_RsComando
    _Ppal_RsComando->_MrAgregaReg
    _MrInit->__MrEsc
    _MrLeeReg->__MrLee
    __MrLee->_MseLee
    _MrFormat->__MrEsc
    _MrAgregaReg->__MrEsc
    __MrEsc->_MseEsc

Critical Paths under _Interr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  190512
                                             19 BANK1      5     0      5
                            _MstMain
 ---------------------------------------------------------------------------------
 (1) _MstMain                                              0     0      0  190512
                           _MstCiclo
                            _MstInit
                         _Ppal_Ciclo
                          _Ppal_Init
 ---------------------------------------------------------------------------------
 (2) _Ppal_Init                                            0     0      0   31149
                           _ADC_Init
                           _Delay_ms
                            _I2CInit
                            _MIOInit
                       _MrInicializa
                             _MrInit
                       _RsTxEnviaMsg
                            _RtcInit
                           _Tpo_init
 ---------------------------------------------------------------------------------
 (3) _Tpo_init                                             0     0      0    2285
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _RtcInit                                              0     0      0    5317
                             _RtcEsc
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _MIOInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Ppal_Ciclo                                           0     0      0   34897
                           _MioCiclo
                          _Tpo_Ciclo
 ---------------------------------------------------------------------------------
 (3) _Tpo_Ciclo                                            2     2      0    2285
                                             41 COMRAM     2     2      0
                             _RtcLee
 ---------------------------------------------------------------------------------
 (3) _MioCiclo                                             5     5      0   32612
                                             10 BANK1      3     3      0
                    _MIOAdcAjuste2_5
                      _MioPreparaReg
                        _MrAgregaReg
                                _abs
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     322
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _MioPreparaReg                                        3     3      0       0
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _MIOAdcAjuste2_5                                      4     4      0    2054
                                              0 BANK1      4     4      0
                    _MIOAdcLeido2Act
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     866
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8    1061
                                             36 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _MIOAdcLeido2Act                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MstInit                                              0     0      0    1270
                           _Delay_ms
                    _LedAmarilloInit
                        _LedParpadea
                             _RsInit
 ---------------------------------------------------------------------------------
 (3) _RsInit                                               4     0      4     172
                                             28 COMRAM     4     0      4
                             _PsInit
 ---------------------------------------------------------------------------------
 (4) _PsInit                                               4     0      4      86
                                             24 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _LedParpadea                                          5     3      2     604
                                             29 COMRAM     5     3      2
                           _Delay_ms
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             5     3      2     494
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _LedAmarilloInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MstCiclo                                             0     0      0  123196
                       _MstRsComando
 ---------------------------------------------------------------------------------
 (3) _MstRsComando                                         5     5      0  123196
                                             14 BANK1      5     5      0
                             _EscRAM
                             _LeeRAM
                     _Ppal_RsComando
                       _RsTxEnviaMsg
 ---------------------------------------------------------------------------------
 (4) _Ppal_RsComando                                       4     4      0   98174
                                             10 BANK1      4     4      0
                        _MrAgregaReg
                              _MrAnt
                           _MrFormat
                             _MrInit
                           _MrLeeReg
                             _MrSgte
                              _MrUlt
                             _MseEsc
                             _MseLee
                       _RsTxEnviaMsg
                             _RtcEsc
                             _RtcLee
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _RtcEsc                                               1     1      0    3032
                                             40 COMRAM     1     1      0
                            _Hex2Bcd
                         _I2CEscByte
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _Hex2Bcd                                              4     4      0    1282
                                             32 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     587
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     599
                                             24 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RsTxEnviaMsg                                         5     3      2    2506
                                             36 COMRAM     5     3      2
                         _RsCheckSum
 ---------------------------------------------------------------------------------
 (4) _RsCheckSum                                          12     8      4     454
                                             24 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (5) _MrUlt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MrSgte                                               0     0      0     450
                            __MrSgte
 ---------------------------------------------------------------------------------
 (3) _MrInit                                               0     0      0   20417
                       _MrInicializa
                           _MrLeeReg
                             __MrEsc
                      __MrPreparaPor
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MrLeeReg                                             0     0      0    4117
                             __MrLee
 ---------------------------------------------------------------------------------
 (5) __MrLee                                               4     0      4    4117
                                              4 BANK1      4     0      4
                             _MseLee
                     __CalculaRegPos
 ---------------------------------------------------------------------------------
 (6) _MseLee                                              15     9      6    2904
                                             40 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                                              0 BANK1      4     4      0
                         _I2CEscByte
                         _I2CLeeByte
                         _I2CSendAck
                        _I2CSendNAck
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _MrFormat                                             0     0      0   18721
                       _MrInicializa
                      _MrSeparaFecha
                             _RtcLee
                             __MrEsc
                    __MrPreparaFecha
                      __MrPreparaPor
 ---------------------------------------------------------------------------------
 (4) _MrInicializa                                         2     2      0     130
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _MrAnt                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MrAgregaReg                                          2     2      0   30236
                                              8 BANK1      2     2      0
                      _MrSeparaFecha
                             _RtcLee
                             __MrEsc
                    __MrPreparaFecha
                      __MrPreparaPor
                            __MrSgte
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) __MrSgte                                              2     0      2     450
                                             24 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) __MrPreparaPor                                        2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) __MrPreparaFecha                                      2     2      0   11130
                                             34 COMRAM     2     2      0
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) __MrEsc                                               4     0      4    5040
                                              4 BANK1      4     0      4
                             _MseEsc
                     __CalculaRegPos
 ---------------------------------------------------------------------------------
 (5) __CalculaRegPos                                       6     4      2     997
                                             31 COMRAM     6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     386
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     395
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _MseEsc                                              15     9      6    2441
                                             40 COMRAM     6     0      6
                                              0 BANK0      5     5      0
                                              0 BANK1      4     4      0
                         _I2CEscByte
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (4) _RtcLee                                               1     1      0    2285
                                             40 COMRAM     1     1      0
                            _Bcd2Hex
                         _I2CEscByte
                         _I2CLeeByte
                         _I2CSendAck
                        _I2CSendNAck
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (5) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CSendNAck                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CSendAck                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2CLeeByte                                           6     4      2     139
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _I2CEscByte                                           4     2      2    1750
                                             36 COMRAM     4     2      2
                            _Hex2Bcd (ARG)
 ---------------------------------------------------------------------------------
 (5) _Bcd2Hex                                              3     3      0      96
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _MrSeparaFecha                                       14    14      0      37
                                             24 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 (4) _LeeRAM                                               2     0      2   11139
                                             34 COMRAM     2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _EscRAM                                               4     0      4   11247
                                             34 COMRAM     4     0      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     4      6   11031
                                             24 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _Interr                                             14    14      0    1188
                                             10 COMRAM    14    14      0
                          _MstInterr
                        _Ppal_Interr
 ---------------------------------------------------------------------------------
 (11) _Ppal_Interr                                         0     0      0     324
                  _LedAmarilloInterr
                          _MioInterr
                         _Tpo_interr
 ---------------------------------------------------------------------------------
 (12) _Tpo_interr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MioInterr                                           0     0      0     324
                            _ADC_Lee
 ---------------------------------------------------------------------------------
 (13) _ADC_Lee                                             6     4      2     324
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (11) _MstInterr                                           0     0      0     864
                        _IntDelay_ms
                     _IntLedParpadea
                  _LedAmarilloInterr
                           _RsInterr
 ---------------------------------------------------------------------------------
 (12) _RsInterr                                            0     0      0      22
                      _PsRxInterrupt
                      _PsTxInterrupt
 ---------------------------------------------------------------------------------
 (13) _PsTxInterrupt                                       1     1      0      22
                                              1 COMRAM     1     1      0
                       _PsTxEnviaCar
 ---------------------------------------------------------------------------------
 (14) _PsTxEnviaCar                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) _PsRxInterrupt                                       0     0      0       0
                      _PsRxRecibeCar
 ---------------------------------------------------------------------------------
 (14) _PsRxRecibeCar                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _LedAmarilloInterr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IntLedParpadea                                      5     3      2     476
                                              5 COMRAM     5     3      2
                        _IntDelay_ms
 ---------------------------------------------------------------------------------
 (13) _IntDelay_ms                                         5     3      2     366
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MstMain
     _MstCiclo
       _MstRsComando
         _EscRAM
           _memcpy
         _LeeRAM
           _memcpy
         _Ppal_RsComando
           _MrAgregaReg
             _MrSeparaFecha
             _RtcLee
               _Bcd2Hex
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaFecha
               _memcpy
             __MrPreparaPor
             __MrSgte
             _memcpy
           _MrAnt
           _MrFormat
             _MrInicializa
             _MrSeparaFecha
             _RtcLee
               _Bcd2Hex
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaFecha
               _memcpy
             __MrPreparaPor
           _MrInit
             _MrInicializa
             _MrLeeReg
               __MrLee
                 _MseLee
                   _I2CEscByte
                     _Hex2Bcd (ARG)
                       ___awdiv
                       ___awmod
                   _I2CLeeByte
                   _I2CSendAck
                   _I2CSendNAck
                   _I2CStart
                   _I2CStop
                 __CalculaRegPos
                   ___lwdiv
                   ___lwmod
             __MrEsc
               _MseEsc
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
             __MrPreparaPor
             _memcpy
           _MrLeeReg
             __MrLee
               _MseLee
                 _I2CEscByte
                   _Hex2Bcd (ARG)
                     ___awdiv
                     ___awmod
                 _I2CLeeByte
                 _I2CSendAck
                 _I2CSendNAck
                 _I2CStart
                 _I2CStop
               __CalculaRegPos
                 ___lwdiv
                 ___lwmod
           _MrSgte
             __MrSgte
           _MrUlt
           _MseEsc
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           _MseLee
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           _RsTxEnviaMsg
             _RsCheckSum
           _RtcEsc
             _Hex2Bcd
               ___awdiv
               ___awmod
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           _RtcLee
             _Bcd2Hex
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           _memcpy
         _RsTxEnviaMsg
           _RsCheckSum
     _MstInit
       _Delay_ms
       _LedAmarilloInit
       _LedParpadea
         _Delay_ms
       _RsInit
         _PsInit
     _Ppal_Ciclo
       _MioCiclo
         _MIOAdcAjuste2_5
           _MIOAdcLeido2Act
           ___aldiv
             ___lmul (ARG)
           ___lmul
         _MioPreparaReg
         _MrAgregaReg
           _MrSeparaFecha
           _RtcLee
             _Bcd2Hex
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CLeeByte
             _I2CSendAck
             _I2CSendNAck
             _I2CStart
             _I2CStop
           __MrEsc
             _MseEsc
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CStart
               _I2CStop
             __CalculaRegPos
               ___lwdiv
               ___lwmod
           __MrPreparaFecha
             _memcpy
           __MrPreparaPor
           __MrSgte
           _memcpy
         _abs
       _Tpo_Ciclo
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop
     _Ppal_Init
       _ADC_Init
       _Delay_ms
       _I2CInit
       _MIOInit
       _MrInicializa
       _MrInit
         _MrInicializa
         _MrLeeReg
           __MrLee
             _MseLee
               _I2CEscByte
                 _Hex2Bcd (ARG)
                   ___awdiv
                   ___awmod
               _I2CLeeByte
               _I2CSendAck
               _I2CSendNAck
               _I2CStart
               _I2CStop
             __CalculaRegPos
               ___lwdiv
               ___lwmod
         __MrEsc
           _MseEsc
             _I2CEscByte
               _Hex2Bcd (ARG)
                 ___awdiv
                 ___awmod
             _I2CStart
             _I2CStop
           __CalculaRegPos
             ___lwdiv
             ___lwmod
         __MrPreparaPor
         _memcpy
       _RsTxEnviaMsg
         _RsCheckSum
       _RtcInit
         _RtcEsc
           _Hex2Bcd
             ___awdiv
             ___awmod
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CStart
           _I2CStop
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop
       _Tpo_init
         _RtcLee
           _Bcd2Hex
           _I2CEscByte
             _Hex2Bcd (ARG)
               ___awdiv
               ___awmod
           _I2CLeeByte
           _I2CSendAck
           _I2CSendNAck
           _I2CStart
           _I2CStop

 _Interr (ROOT)
   _MstInterr
     _IntDelay_ms
     _IntLedParpadea
       _IntDelay_ms
     _LedAmarilloInterr
     _RsInterr
       _PsRxInterrupt
         _PsRxRecibeCar
       _PsTxInterrupt
         _PsTxEnviaCar
   _Ppal_Interr
     _LedAmarilloInterr
     _MioInterr
       _ADC_Lee
     _Tpo_interr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     18      93       8       57.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     2E      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     179       6        0.0%
DATA                 0      0     179       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 21 13:48:34 2019

    __end_of_IntLedParpadea 1F16             PsTxEnviaCar@car 0001              __CalculaRegPos 1AF4  
       __size_of_I2CSendAck 003C                          _GO 007E11      __size_of_MioPreparaReg 00B6  
              ___awdiv@sign 001E             _MIOAdcAjuste2_5 07BA                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
             ?_MrInicializa 0001                         l123 23C8                         l116 1E78  
                       l315 19EA                         l316 1A30                         l317 19F2  
                       l325 1BDA                         l421 0F30                         l191 245E  
                       l178 1E3E                         l435 2372                         l453 25F4  
                       l375 15A4                         l607 06A8                         l570 0ADC  
                       l666 250E                         l588 00F0        __size_of_I2CSendNAck 0034  
                       _GIE 007F97                __CFG_CPB$OFF 000000                         _PR2 000FBB  
              __CFG_CPD$OFF 000000                         _abs 24F0             __end_of_I2CInit 2648  
           _MIOAdcLeido2Act 258E             __end_of_ADC_Lee 210A                ___awmod@sign 001E  
           __end_of_I2CStop 2540                         wreg 000FE8               ??_IntDelay_ms 0003  
              __CFG_LVP$OFF 000000                        l1023 2060                        l1033 21CC  
                      ?_abs 0019                        l5010 095A                        l5002 0936  
                      l5100 168C                        l4310 21E8                        l4134 19F4  
                      l5006 0948                        l4160 1A52                        l4320 1090  
                      l4240 203A                        l5040 0FFE                        l5024 0F80  
                      l4330 10DC                        l5026 0F8A                        l4316 2204  
                      l4180 1B9E                        l4236 202E                        l4260 21AE  
                      l4420 1C3C                        l4412 1C1C                        l4404 1C02  
                      l5036 0FE6                        l3620 1E6E                        l5116 16E4  
                      l5108 16B8                        l4334 1116                        l4326 10AE  
                      l4238 2036                        l4270 0B2E                        l4414 1C24  
                      l5046 102A                        l5054 1048                        l5150 0AD8  
                      l5222 2174                        l4192 1BC2                        l4328 10D0  
                      l4248 2056                        l4264 21C2                        l4256 21A2  
                      l4280 0B7A                        l4440 1E2E                        l4360 1A84  
                      l4416 1C28                        l4424 1C46                        l4408 1C0E  
                      l5056 106C                        l3376 23B6                        l5232 218E  
                      l4338 1146                        l4258 21AA                        l4434 1E10  
                      l4540 11BA                        l4508 1CE4                        l4276 0B4C  
                      l4372 1AAA                        l4428 1C54                        l3628 1E98  
                      l5092 1660                        l4470 15A8                        l4518 1D16  
                      l4294 0BEE                        l4278 0B6E                        l4702 0F28  
                      l4374 1AB2                        l4366 1A94                        l4544 11CC  
                      l4288 0BC4                        l4392 1AEA                        l4384 1AD2  
                      l4376 1AB6                        l4650 0E2C                        l4810 154E  
                      l4802 1522                        l4548 1D3A                        l4740 0DA0  
                      l4388 1ADC                        l4558 1D5C                        l4662 0E6C  
                      l4646 0E1C                        l4806 1532                        l4728 0D44  
                      l4658 0E46                        l4666 0E72                        l4834 00CE  
                      l4762 1F7E                        l4684 0ED4                        l4676 0E96  
                      l4940 0538                        l4924 046C                        l4916 0422  
                      l4908 03D8                        l4852 01A0                        l4678 0E9E  
                      l4950 05C0                        l4942 0562                        l4870 0262  
                      l4846 0172                        l4790 14DC                        l4766 1F92  
                      l4688 0EF0                        l4944 058C                        l4928 04CE  
                      l4792 14EA                        l4784 14B6                        l4954 063E  
                      l4866 0218                        l4858 01CE                        l4794 14EE  
                      l4778 149C                        l4964 068A                        l4884 0300  
                      l4958 0656                        l4898 0372                        l4978 072A  
         ??_LedAmarilloInit 0019                        u2105 1802                        u2115 1822  
                      u3020 2372                        u3220 0CE0                        u3045 125E  
                      u2085 17C2                        u3055 1274                        u2095 17E2  
                      u2650 1A30                        u3370 0F5C                        u3607 2640  
                      u3617 23BC                        u2690 1BDA                        u3707 2408  
                      u3627 251C                        u3717 237C                        u3637 2526  
                      u3807 22BE                        u3727 2386                        u3647 252E  
                      u3817 22C8                        u3737 2390                        u3657 2538  
                      u3907 1A1C                        u3827 1B78                        u3747 2398  
                      u3667 23E4                        u2795 1B50                        _RCIF 007CF5  
                      u3917 1A34                        u3837 1BAC                        u3757 23A2  
                      u3677 23EC                        u3927 1A3E                        u3847 1BB4  
                      u3767 2298                        u3687 23F6                        u3937 1A5E  
                      u3857 1BC6                        u3777 22A2                        u3697 23FE  
                      u3947 1A68                        u3867 1BDE                        u3787 22AC  
                      u3877 1A00                        u3797 22B4                        u3887 1A0A  
                      u3897 1A12             __end_of_MIOInit 147C                        _Car1 0045  
                      _TXIF 007CF4                        _Dir1 00AE             __end_of_Bcd2Hex 2632  
                      _Ptr1 00B0         __end_of_LedParpadea 1EBA                        abs@a 0019  
                      _main 26CA                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf1 000FE7  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0047               __CFG_BORV$190 000000            __end_of_I2CStart 2410  
          __end_of_ADC_Init 265E                        prodh 000FF4                        prodl 000FF3  
                      start 0094             __end_of_Hex2Bcd 2344               __CFG_IESO$OFF 000000  
    __end_of__CalculaRegPos 1B72               __CFG_MCLRE$ON 000000                ___param_bank 000000  
           ?_IntLedParpadea 0006          _RsTxTransmitiendoF 00BC                       ??_abs 001B  
           __end_of__MrSgte 25FE             __end_of_MstMain 2194             __end_of_MstInit 2150  
           __end_of_RtcInit 2294                IntDelay_ms@I 0004              ??_MrInicializa 0019  
           __end_of___aldiv 1560         __end_of_MrAgregaReg 0DF2                       ?_main 018C  
           __end_of___awdiv 1AF4             __end_of___awmod 1C5E             ___awdiv@divisor 001B  
                     _T2CON 000FBA             __end_of___lwdiv 206A                       i2l111 2254  
           __end_of___lwmod 21D6                       i2l131 1ED4                       i2l109 2246  
                     i2l138 242C                       i2l515 20EC                       i2l613 0058  
           ___awdiv@counter 001D                       _RCSTA 000FAB                       _Adc5v 0088  
                     _SPBRG 000FAF                       _PORTB 000F81                       _TRISA 000F92  
                     _TRISB 000F93               _MrSeparaFecha 1190                       _TXSTA 000FAC  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000                       _Hora1 0125  
                     _MrAnt 2674               __CFG_WRT2$OFF 000000         ___lmul@multiplicand 001D  
             __CFG_WRT3$OFF 000000                       _MrGpo 00A2                       _MrReg 00D1  
                     _Dummy 00B6                       _MrUlt 26B6              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000               _MioPreparaReg 17B6  
            __pbitbssCOMRAM 0230                       pclath 000FFA                       tablat 000FF5  
       __end_of_IntDelay_ms 2442                       status 000FD8              __CFG_T3CMX$RC0 000000  
          __end_of_Delay_ms 23DE              __CFG_PBADEN$ON 000000                 MseEsc@Datos 002B  
               MseEsc@Index 0179             ?__CalculaRegPos 0020                 MseLee@Datos 002B  
                _MrRegsXGpo 00A4                 MseLee@Index 0179             __initialization 1FC4  
   __end_of_MIOAdcAjuste2_5 096E                __end_of_main 26D2            __end_of_MrLeeReg 2618  
          __end_of_MioCiclo 0B10            __end_of_MrFormat 191E              __CFG_PCLKEN$ON 000000  
   __end_of_MIOAdcLeido2Act 25B4                   ??_I2CInit 0019                  _RsCheckSum 1DFE  
                 ??_ADC_Lee 0003                   ??_I2CStop 0019               ??_Ppal_Interr 0007  
                    ??_main 002F            __end_of_MstCiclo 269A           _LedAmarilloInterr 2216  
          __end_of_RsInterr 26CA               __activetblptr 000002              ?_MrSeparaFecha 0001  
              ??_I2CEscByte 0027          ?_LedAmarilloInterr 0001                ??_I2CLeeByte 001B  
                    ?_MrAnt 0001              __CFG_SDOMX$RB3 000000                      ?_MrUlt 0001  
                 ??_MIOInit 0019             __CFG_CCP2MX$RC1 000000                   ??_Bcd2Hex 0019  
               _LedParpadea 1E5E            __end_of_Tpo_init 1DFE                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADCON2 000FC0                      _I2CAck 00A8  
              ??_I2CSendAck 0019              ?_MioPreparaReg 0001                      _ADRESH 000FC4  
                    _ADRESL 000FC3                  _Ppal_Ciclo 2568            ___awdiv@dividend 0019  
                    _ANSELA 000F5B                      _ANSELB 000F5C                      _ANSELC 000F5D  
       ??_LedAmarilloInterr 0001                      _EEByte 011E                   ??_Hex2Bcd 0021  
            __CFG_WDTEN$OFF 000000                      i2l3700 1942                      i2l3712 1996  
                    i2l3634 241A                      i2l3722 19BE                      i2l3660 12D6  
                    i2l3670 130E                      i2l3718 19B0                      i2l3680 1346  
                    i2l3666 12FA                      i2l3924 2234                      i2l3676 1328  
                    i2l3684 1362                      _INTCON 000FF2                      i2l3946 1EF4  
                    i2l3938 1ECA                      i2l3858 20DC                      i2l3868 20F6  
                    _RCREG1 000FAE                  _RsRxBuffer 014E                      _OSCCON 000FD3  
                    _Adc2_5 008A                      _Adc5v1 0086                      _TMR2IE 007CE9  
                    _TMR2IF 007CF1                      _SPBRGH 000FB0          __size_of_MioInterr 0052  
                _RsTxBuffer 0130                      _TXREG1 000FAD                      _EscRAM 25B4  
                    _LeeRAM 2540                 _MrNRegEnGpo 00A0                      _MrDirV 0041  
                _RsTxTransF 00C2                      _MrInit 0DF2                      _MrSgte 265E  
                    _MonDir 00B8                      _MseEsc 1072                      _MrUltV 0043  
                    _MseLee 0B10                   ??__MrSgte 001B                      _PsInit 2442  
                 ??_MstMain 002F                      _Interr 0008                   ??_MstInit 0023  
                    __MrEsc 24C6              __CFG_XINST$OFF 000000                      __MrLee 249C  
                    _RsInit 22D0                      _RsRxCS 0030                      _RsTxCS 00D0  
                 ??_RtcInit 002A                      _RtcEsc 16F8                      _RtcLee 1560  
               _MrAgregaReg 0C8E          __end_of_I2CEscByte 1A70                      ___lmul 1F6E  
        __end_of_I2CLeeByte 1BEE                   ??___aldiv 002D                   ??___awdiv 001D  
                 ??___awmod 001D          __size_of_Ppal_Init 006A                   ??___lwdiv 001D  
                 ??___lwmod 001D               Delay_ms@delay 0019          __size_of_MstInterr 0006  
 __end_of_LedAmarilloInterr 2256                      _memcpy 21D6               ?_PsTxEnviaCar 0001  
                    clear_0 1FEA                      clear_1 1FF6                      clear_2 2004  
        __end_of_I2CSendAck 22D0            ___awdiv@quotient 001F             ___awmod@divisor 001B  
          ??_Ppal_RsComando 0183             ___awmod@counter 001D          __size_of_Tpo_Ciclo 00C2  
                 ?_I2CStart 0001                   ?_ADC_Init 0001                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8              RsCheckSum@Car1 0023  
               _IntDelay_ms 2410         __end_of_Ppal_Interr 26B6                  _Tpo_interr 2470  
      __CFG_LS48MHZ$SYS24X4 000000                  __accesstop 0060     __end_of__initialization 200A  
    __size_of_PsRxRecibeCar 0004        __end_of_MrInicializa 1D32                MseEsc@NBytes 002D  
             _MIOAdcDivisor 0114                MseLee@NBytes 002D               ___rparam_used 000001  
    __size_of_PsRxInterrupt 00F8               __end_of_MrAnt 2688               __end_of_MrUlt 26C0  
            __pcstackCOMRAM 0001            ?_MIOAdcAjuste2_5 0001            __CFG_nPWRTEN$OFF 000000  
              __pidataBANK0 26E0        IntLedParpadea@Nveces 0006               ?_MstRsComando 0001  
             __MrEsc@MrNReg 017D               __MrEsc@MrReg1 017F              ??_PsTxEnviaCar 0001  
          ?_MIOAdcLeido2Act 0001               __MrLee@MrNReg 017D                 ?_RsCheckSum 0019  
             __MrLee@MrReg1 017F               ?_RsTxEnviaMsg 0025             ??_MrSeparaFecha 0019  
         __end_of_MioInterr 20BC             _LedAmarilloInit 269A      __size_of_PsTxInterrupt 00B2  
       MrSeparaFecha@MrAmPm 0025                  ??_I2CStart 0019                  ??_ADC_Init 0019  
            PsInit@Baudrate 0019                     ??_MrAnt 0019                 RtcLee@Char1 0029  
                 ?_Delay_ms 0019                     ??_MrUlt 0019             ??_MioPreparaReg 0019  
          IntDelay_ms@delay 0001                 ?_Ppal_Ciclo 0001           __end_of_Ppal_Init 1CC8  
                 ?_MrLeeReg 0001                  __pbssBANK0 0060                  __pbssBANK1 0100  
                 ?_MioCiclo 0001           __end_of_MstInterr 26E0                   ?_MrFormat 0001  
          ??_IntLedParpadea 0008                     ?_EscRAM 0023                     ?_LeeRAM 0023  
                 ?_MstCiclo 0001                   ?_RsInterr 0001                     ?_MrInit 0001  
               Bcd2Hex@Bcd1 001B                     ?_MrSgte 0001                     ?_MseEsc 0029  
         __end_of_Tpo_Ciclo 16F8                     ?_MseLee 0029                 Bcd2Hex@Hex1 001A  
                   ?_PsInit 0019    __size_of__MrPreparaFecha 006A                     ?_Interr 0001  
                   ?__MrEsc 017D                     ?__MrLee 017D                     ?_RsInit 001D  
                   ?_RtcEsc 0001                     ?_RtcLee 0001      __size_of__MrPreparaPor 0034  
         __CFG_PLLSEL$PLL4X 000000              ??_MstRsComando 0187                     ?___lmul 0019  
                ADC_Lee@ind 0005                   ?_Tpo_init 0001               ??_I2CSendNAck 0019  
__size_of_LedAmarilloInterr 0040              ??_RsTxEnviaMsg 0027                     _I2CInit 2632  
                   ?_memcpy 0019                     _BAUDCON 000FB8              ___lmul@product 0021  
                   _ADC_Lee 20BC                     _I2CStop 2518               _PsRxRecibeCar 26E4  
               _Ppal_Interr 26A8           MrAgregaReg@MrTemp 0181               _PsRxInterrupt 1294  
                ??_Delay_ms 001B                     _MIOInit 138C                     _Bcd2Hex 2618  
               ?_Tpo_interr 0001                  ??_MrLeeReg 002F                     _NBytes1 00AC  
                ??_MioCiclo 0183                     _Hex2Bcd 230A                  ??_MrFormat 002F  
          ??__CalculaRegPos 0022         __size_of_RsCheckSum 0060                     _Buffer1 0100  
             _PsTxInterrupt 191E                _MrFecha12Ult 00EF                  ??_MstCiclo 002F  
           __size_of_EscRAM 0026             __size_of_LeeRAM 0028                  ??_RsInterr 0003  
                   __Hparam 0000                     _RsRxCar 0032                     __MrSgte 25DA  
                   _MstMain 2150             __size_of_MrInit 0148                     _RsTxCar 0031  
                   _MstInit 210A                     __Lparam 0000             __size_of_MrSgte 0016  
           __size_of_MseEsc 011E             __size_of_MseLee 017E                     _TempSeg 0082  
                   _RtcInit 2256             __size_of_PsInit 002E             __size_of_Interr 008C  
           __size_of__MrEsc 002A             __size_of__MrLee 002A                     _TpoDiaF 0094  
           __size_of_RsInit 003A             __size_of_RtcEsc 00BE             __size_of_RtcLee 00D6  
                   _TpoMinF 0098                     _TpoSegF 009A     __end_of_LedAmarilloInit 26A8  
                   ___aldiv 147C                     ___awdiv 1A70             __size_of___lmul 0056  
                   ___awmod 1BEE           RsTxEnviaMsg@Temp1 0028                     ___lwdiv 2018  
                ??_Tpo_init 002A                     ___lwmod 2194         __size_of_Ppal_Ciclo 0026  
            ?_PsRxRecibeCar 0001             __CFG_STVREN$OFF 000000                     __pcinit 1FC4  
             _RsRxCarDobleF 00BE             __size_of_memcpy 0040                     __ramtop 0800  
                   __ptext0 26CA                     __ptext1 2150                     __ptext2 1C5E  
                   __ptext3 1D9C                     __ptext4 2256                     __ptext5 138C  
                   __ptext6 2632                     __ptext7 2648                     __ptext8 2568  
                   __ptext9 1636              ?_PsRxInterrupt 0001                __size_of_abs 0028  
          ___awmod@dividend 0019         __end_of_I2CSendNAck 23AC            ___aldiv@dividend 0025  
             __MrPreparaPor 2344                ?_LedParpadea 001E                 _TpoSegEnDia 012C  
     __size_of_MrInicializa 006A                   EscRAM@Dir 0023        end_of_initialization 200A  
                 LeeRAM@Dir 0023        __end_of_PsTxEnviaCar 26DA               _RsTxCarDobleF 00BA  
                   memcpy@d 001F                     memcpy@n 001D                     memcpy@s 0021  
                 Delay_ms@I 001C               __Lmediumconst 0000          _MioCicloHabilitado 00CC  
                 _MIOAdcAct 0033                   _MIOAdcAnt 0074               _MstPpEjecutaF 00FF  
            ?_PsTxInterrupt 0001                   _MIOAdcMin 006A               _RsRxBufferLen 00CA  
         MIOAdcAjuste2_5@k1 0179                ?_MrAgregaReg 0001            ___aldiv@quotient 00F7  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE             RsCheckSum@RsLen 0019         __size_of_Tpo_interr 002C  
         ??__MrPreparaFecha 0023                   _PORTBbits 000F81                   _PORTCbits 000F82  
              _MrInicializa 1CC8               _RsTxBufferLen 00C8              ?__MrPreparaPor 0001  
                 _TRISBbits 000F93                   _TRISCbits 000F94                ?_IntDelay_ms 0001  
         __size_of_I2CStart 0032           __size_of_ADC_Init 0016        __end_of_MstRsComando 1072  
      __end_of_RsTxEnviaMsg 1F6E              __end_of_EscRAM 25DA              __end_of_LeeRAM 2568  
                 MseEsc@Dir 0029                   MseLee@Dir 0029              __end_of_MrInit 0F3A  
            __end_of_MrSgte 2674              __end_of_MseEsc 1190              __end_of_MseLee 0C8E  
            __end_of_PsInit 2470              __end_of_Interr 0094              __end_of__MrEsc 24F0  
            __end_of__MrLee 24C6                   _LedContMs 0191              __end_of_RsInit 230A  
           ??_PsRxRecibeCar 0001              __end_of_RtcEsc 17B6              __end_of_RtcLee 1636  
          ?_LedAmarilloInit 0001              __end_of___lmul 1FC4                ??_RsCheckSum 001D  
           ??_PsRxInterrupt 0001                 _I2CSendNAck 2378                   _MrFecha12 003D  
            __end_of_memcpy 2216                   _EntradaAN 00B2         start_initialization 1FC4  
                 _LecturaAN 00B4                   _MioInterr 206A                 __end_of_abs 2518  
         I2CEscByte@I2CByte 0025              _MseUltDirLeido 00A6                ??_Ppal_Ciclo 002F  
       RsCheckSum@CheckSum1 001F         RsCheckSum@CheckSum2 001E           __size_of_Delay_ms 0032  
           ??_PsTxInterrupt 0002             __CFG_nLPBOR$OFF 000000                   _PpalRsCMD 00CE  
         __size_of_MrLeeReg 001A          __end_of_RsCheckSum 1E5E                   _Ppal_Init 1C5E  
         __size_of_MioCiclo 01A2           __size_of_MrFormat 00B2                    ??_EscRAM 0027  
                  ??_LeeRAM 0025                   _RsRxIndex 00C6                   _MstInterr 26DA  
                 _RsTxIndex 00C4                    ??_MrInit 002F                    ??_MrSgte 001B  
                  ??_MseEsc 00F5                    ??_MseLee 00F5                    ??_PsInit 001D  
                  ??_Interr 000B                    ??__MrEsc 002F                    ??__MrLee 002F  
                  ??_RsInit 0021                    ??_RtcEsc 0029                    ??_RtcLee 0029  
       __MrPreparaFecha@Ind 0023           __size_of_MstCiclo 0012           __size_of_RsInterr 000A  
                  ??___lmul 0021                   _TpoMsCont 009E                   _Tpo_Ciclo 1636  
               __pdataBANK0 00FB                    ?_I2CInit 0001                    ??_memcpy 001F  
                  ?_ADC_Lee 0001                    ?_I2CStop 0001          __end_of_Ppal_Ciclo 258E  
             RsCheckSum@Ind 0021           __size_of_Tpo_init 0062                ?_Ppal_Interr 0001  
           ??__MrPreparaPor 0019    __size_of_MIOAdcAjuste2_5 01B4       __end_of_MrSeparaFecha 1294  
               __pbssCOMRAM 002F         RsTxEnviaMsg@RsTxLen 0025               __pcstackBANK0 00F5  
             __pcstackBANK1 0179    __size_of_MIOAdcLeido2Act 0026                    ?_MIOInit 0001  
                ?_MioInterr 0001       __size_of_PsTxEnviaCar 0008                    ?_Bcd2Hex 0001  
     __end_of_MioPreparaReg 186C                ??_Tpo_interr 0001     __size_of_Ppal_RsComando 0722  
      __size_of_LedParpadea 005C                    ?_Hex2Bcd 0001                  ?_Ppal_Init 0001  
                 __pnvBANK0 00FF                   __pnvBANK1 0191                  ?_MstInterr 0001  
                  ?__MrSgte 0019                    ?_MstMain 0001                    ?_MstInit 0001  
          ___lwdiv@dividend 0019                    ?_RtcInit 0001                   __pintcode 0008  
                  ?___aldiv 0025                    ?___awdiv 0019                    ?___awmod 0019  
                ?_Tpo_Ciclo 0001                    ?___lwdiv 0019                    ?___lwmod 0019  
      __size_of_MrAgregaReg 0164                _PsTxEnviaCar 26D2          __end_of_Tpo_interr 249C  
     __size_of_MstRsComando 0138                    _I2CStart 23DE                    _ADC_Init 2648  
            __size_of_MrAnt 0014              __size_of_MrUlt 000A       __size_of_RsTxEnviaMsg 0058  
          ___lwdiv@quotient 001E           I2CLeeByte@I2CByte 001D                 Hex2Bcd@Bcd1 0023  
               Hex2Bcd@Hex1 0024        __size_of_IntDelay_ms 0032             ___aldiv@divisor 0029  
           ___aldiv@counter 00F5             __MrPreparaFecha 1D32                _RtcFechaHora 00E8  
                  i2u223_40 133E                    i2u256_40 2486                    i2u395_47 2420  
          __CFG_WDTPS$32768 000000                    _SSP1CON1 000FC6           Ppal_RsComando@ind 0185  
              _MstRsComando 0F3A     __size_of_IntLedParpadea 005C            __size_of_I2CInit 0016  
              _RsTxEnviaMsg 1F16            __size_of_ADC_Lee 004E            __size_of_I2CStop 0028  
               EscRAM@Car2P 0025                  _I2CEscByte 19D0                  _I2CLeeByte 1B72  
         __CFG_CFGPLLEN$OFF 000000                    _Delay_ms 23AC                 ??_MioInterr 0007  
          __size_of_MIOInit 00F0            __size_of_Bcd2Hex 001A           ??_MIOAdcAjuste2_5 002D  
                _I2CSendAck 2294           ___lmul@multiplier 0019                   copy_data0 1FD8  
                  _MrLeeReg 25FE                    _MrHora12 00F3                    _MioCiclo 096E  
                  _MrFormat 186C                    _MrRegAux 016C                    _MrRegPos 007E  
         ??_MIOAdcLeido2Act 0019            __size_of_Hex2Bcd 003A                    _MonRsCMD 00AA  
               ??_Ppal_Init 002F                    _Tpo50msF 009C                 ??_MstInterr 000B  
                  _MstCiclo 2688                    _RsInterr 26C0                    __Hrparam 0000  
                  __Lrparam 0000            __size_of__MrSgte 0024          __CFG_BOREN$SBORDIS 000000  
          __size_of_MstMain 0044            __size_of_MstInit 0046            __size_of_RtcInit 003E  
                  _TpoHoraF 0096     __size_of__CalculaRegPos 007E               _TpoRtcHoraAnt 008E  
              LedParpadea@I 0021                 ??_Tpo_Ciclo 002A            __size_of___aldiv 00E4  
                  _Tpo_init 1D9C              __MrSgte@MrDirX 0019            __size_of___awdiv 0084  
          __size_of___awmod 0070                ?_I2CSendNAck 0001                 _MIOAdcDelta 0060  
          __size_of___lwdiv 0052                 _MIOAdcLeido 00DE            __size_of___lwmod 0042  
        RsCheckSum@RsBuffer 001B        __size_of_Ppal_Interr 000E             ___lwdiv@divisor 001B  
           ___lwdiv@counter 001D                    __ptext10 096E                    __ptext11 24F0  
                  __ptext20 1E5E                    __ptext12 17B6                    __ptext21 23AC  
                  __ptext13 07BA                    __ptext30 1F16                    __ptext22 269A  
                  __ptext14 1F6E                    __ptext31 1DFE                    __ptext23 2688  
                  __ptext15 147C                    __ptext40 2674                    __ptext32 26B6  
                  __ptext24 0F3A                    __ptext16 258E                    __ptext41 0C8E  
                  __ptext33 265E                    __ptext25 0098                    __ptext17 210A  
                  __ptext50 1560                    __ptext42 25DA                    __ptext34 0DF2  
                  __ptext26 16F8                    __ptext18 22D0                    __ptext51 2518  
                  __ptext43 2344                    __ptext35 25FE                    __ptext27 230A  
                  __ptext19 2442                    __ptext60 25B4                    __ptext52 23DE  
                  __ptext44 1D32                    __ptext36 249C                    __ptext28 1BEE  
                  __ptext61 21D6                    __ptext53 2378                    __ptext45 24C6  
                  __ptext37 0B10                    __ptext29 1A70                    __ptext70 26D2  
                  __ptext54 2294                    __ptext46 1AF4                    __ptext38 186C  
                  __ptext71 1294                    __ptext63 26A8                    __ptext55 1B72  
                  __ptext47 2194                    __ptext39 1CC8                    __ptext72 26E4  
                  __ptext64 2470                    __ptext56 19D0                    __ptext48 2018  
                  __ptext73 2216                    __ptext65 206A                    __ptext57 2618  
                  __ptext49 1072                    __ptext74 1EBA                    __ptext66 20BC  
                  __ptext58 1190                    __ptext75 2410                    __ptext67 26DA  
                  __ptext59 2540                    __ptext68 26C0                    __ptext69 191E  
            RsInit@Baudrate 001D              _Ppal_RsComando 0098     __end_of__MrPreparaFecha 1D9C  
           IntLedParpadea@I 0009               __size_of_main 0008           LedParpadea@Nveces 001E  
                  int$flags 0047       __end_of_PsRxRecibeCar 26E8                    main@argc 018C  
                  main@argv 018E             ADC_Lee@AdcCanal 0001       __end_of_PsRxInterrupt 138C  
  __size_of_LedAmarilloInit 000E                 ?_I2CEscByte 0025                 ?_I2CLeeByte 0019  
              _TpoRtcDiaAnt 008C      __end_of_Ppal_RsComando 07BA                    memcpy@d1 0019  
                  memcpy@s1 001B             MrInicializa@Ind 0019                _TpoRtcMinAnt 0090  
           I2CEscByte@Index 0027                _TpoRtcSegAnt 0092                 ?_I2CSendAck 0001  
                  intlevel2 0000           __MrPreparaPor@Ind 0019            ___lwmod@dividend 0019  
     __end_of_PsTxInterrupt 19D0      __CalculaRegPos@MrNReg1 0020                  _MIOSegCont 0084  
        _MstPpInicializadoF 002F             I2CLeeByte@Index 001B        __CFG_CPUDIV$NOCLKDIV 000000  
            _IntLedParpadea 1EBA             _RsRxRecibioMsgF 00C0              _MrInicializado 0230  
           ___lwmod@divisor 001B       __end_of__MrPreparaPor 2378             ___lwmod@counter 001D  
           ?_Ppal_RsComando 0001               ??_LedParpadea 0020                ___aldiv@sign 00F6  
           MstRsComando@Ind 018A            ?__MrPreparaFecha 0001              _MIOTpoDeltaMax 00FD  
            _MIOTpoDeltaMin 00FB          __CFG_FOSC$INTOSCIO 000000      __size_of_MrSeparaFecha 0104  
       __size_of_I2CEscByte 00A0               ??_MrAgregaReg 002F         __size_of_I2CLeeByte 007C  
